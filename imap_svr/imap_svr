#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use IO::Socket;
use IO::Socket::INET;
use Time::HiRes;
use Benchmark ':hireswallclock';
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");

$| = 1;

# return codes
our ($state_ok,$state_warn,$state_crit,$state_unkn,$state_noop) = (0,1,2,3,4);

# return stuff
our ($rc, $result) = (0,'');

our $eminfo = '/usr/local/eminfo/eminfo';
our $filename = (split /\//, __FILE__)[-1];

# check eminfo
unless (-f $eminfo && -x $eminfo) {
  printf "{unknown}:{str}:{$eminfo not prepared.}";
  exit $state_unkn;
}

# read plugin config here
our $addr_port = '127.0.0.1:143';
open my $fh, "$eminfo view $filename addr_port 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $addr_port = $_;
	last;
  }
}

our $time_out = 10;
open $fh, "$eminfo view $filename time_out 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $time_out = $_;
	last;
  }
}
$time_out = 10 if ($time_out =~ m/\D/ || !defined $time_out);

our $imap_user = '';
open $fh, "$eminfo view $filename imap_user 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $imap_user = $_;
	last;
  }
}

our $imap_pass = '';
open $fh, "$eminfo view $filename imap_pass 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $imap_pass = $_;
	last;
  }
}

# Main body begin
my ($total,$critnum,$unknnum) = (0,0,0);
my ($time_start,$time_stop,$time_duration);

$result = "check list: $addr_port ### ### ";

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {
  $total++;
  my ($imap_host, $imap_port) = (split /:/, shift @addr_pair)[0,1];
  if (!defined $imap_host || !defined $imap_port) {
	$result .= "<font color=yellow> imap_host or imap_port not defined </font> ### ### ";
	$unknnum++;
	next;
  }
  if ($imap_port =~ /\D/) {
	$result .= "<font color=yellow> $imap_host:$imap_port imap port not numberic </font> ### ### ";
	$unknnum++;
	next;
  }

  $time_start = Benchmark->new();
  my $imap=IO::Socket::INET->new(
	PeerAddr =>	$imap_host,
	PeerPort => 	$imap_port,
	Proto	 =>	'tcp',
	Timeout =>	($time_out =~ /\D/)?10:$time_out,
  );
  unless (defined $imap) {
	if ($@) {
		$@ =~ s/[\r\n]//g;
		$@ = Encode::decode("gb2312",$@);
		$result .= "<font color=red> connect [$imap_host:$imap_port] failed in $time_out seconds, return [$@] </font> ";
	} else {
		$result .= "<font color=red> connect [$imap_host:$imap_port] failed in $time_out seconds. </font> ";
	}
	$critnum++;
	goto ERREND;
  } else {
	(my $welcome = <$imap>) =~ s/[\r\n]//g;
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= "connect [$imap_host:$imap_port] return welcome banner ### [$welcome] ($time_duration seconds) ### ";
	$time_start = Benchmark->new();		## reset time_start
  }
  if($imap_user && $imap_pass) {
	print $imap "A01 LOGIN $imap_user $imap_pass\n\r";	## if without \r, will hang up for 30s.
	(my $response = <$imap>) =~ s/[\r\n]//g;
	unless (defined $response && $response =~ m/\AA01 (OK|SUCC|LOGIN|LOGON) /i) {
		$response = '' if (!defined $response);
		$result .= "<font color=red> imap command: A01 LOGIN return [message=$response] </font> ";
		$critnum++;
		goto ERREND;
	} else {
		print $imap "A02 LOGOUT\n\r" if $imap;		## if without \r, will hang up for 30s.
		$imap->close() if $imap;
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= "imap command: A01 LOGIN return [message=$response] ($time_duration seconds) ### ### ";
	}
  } else {
	$result .= " imap_user or imap_pass not defined, imap login test skip ### ### ";
  }
  next;

  ERREND: {
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= " ($time_duration seconds) ### ### ";
	next;
  }
}
# prepare last output
if ($critnum > 0) {
  print "{crit}:{str}:{ IMAP SVR CRITICAL | $critnum/$total imap check critical | $result }";
  exit $state_crit;
} elsif ($unknnum > 0) {
  print "{unknown}:{str}:{ IMAP SVR UNKNOWN | $unknnum/$total imap check unknown | $result }";
  exit $state_unkn;
} else {
  print "{ok}:{str}:{ IMAP SVR OK | $total/$total imap check success | $result }";
  exit $state_ok;
}
