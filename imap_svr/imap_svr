#!/usr/bin/env perl

our $basedir = '/usr/local/esop/agent/mole';
our $mole = "$basedir/sbin/mole";

BEGIN {
  my $basedir = '/usr/local/esop/agent/mole';
  my $pllib_dir = "$basedir/opt/plmods";
  my @incs = (    # set additional path
        # rhel5 32bit
        $pllib_dir.'/lib/perl5/',
        $pllib_dir.'/lib/perl5/5.8.8/',
        $pllib_dir.'/lib/perl5/site_perl/',
        $pllib_dir.'/lib/perl5/site_perl/5.8.8/',
        # rhel5 64bit
        $pllib_dir.'/lib64/perl5/',
        $pllib_dir.'/lib64/perl5/5.8.8/',
        $pllib_dir.'/lib64/perl5/site_perl/',
        $pllib_dir.'/lib64/perl5/site_perl/5.8.8/',
        # rhel6 32bit
        $pllib_dir.'/lib/perl5/',
	$pllib_dir.'/share/perl5/',
        # rhel6 64bit
        $pllib_dir.'/lib64/perl5/',
	$pllib_dir.'/share/perl5/',
  );

  push @INC, @incs;
};

use strict;
use warnings;
use utf8;
use IO::Socket;
use IO::Socket::INET;
use Time::HiRes;
use Benchmark ':hireswallclock';
use Locale::Messages qw (textdomain bindtextdomain gettext nl_putenv);
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';

$| = 1;

# return codes
our ($state_succ,$state_warn,$state_crit,$state_unkn,$state_noop,$state_notify) = (0,1,2,3,4,5);

# return stuff
our ($rc, $result) = (0,'');

our $filename = (split /\//, __FILE__)[-1];

# check mole
unless (-f $mole && -x $mole) {
  printf "{unkn}:{str}:{$mole not prepared.}";
  exit $state_unkn;
}

# read mole locale_def
our $localdir = "$basedir/share/locale/";
open my $fh, "$mole printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $localdir = $_;
        last;
  }
}

# read plugin locale setting
our $locale = 'zh_CN.UTF-8';
open $fh, "$mole view $filename locale 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $locale = $_;
        last;
  }
  if(!defined $locale || $locale eq ''){
        open my $fh1, "$mole view default locale 2>&- |";
        if($fh1){
                while(<$fh1>){
                        chomp; $locale = $_;
                        last;
                }
        }
  }
}
if(!defined $locale || $locale eq ''){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'zh_CN' || $locale eq 'zh_CN.UTF-8' || $locale eq 'zh'){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'en_US' || $locale eq 'en_US.UTF-8' || $locale eq 'en'){
        $locale = 'en_US.UTF-8';
}else{
        $locale = 'zh_CN.UTF-8';
}
nl_putenv("LANGUAGE=$locale");

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $addr_port = '127.0.0.1:143';
open $fh, "$mole view $filename addr_port 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $addr_port = $_;
	last;
  }
}

our $time_out = 10;
open $fh, "$mole view $filename time_out 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $time_out = $_;
	last;
  }
}
$time_out = 10 if ($time_out =~ m/\D/ || !defined $time_out);

our $imap_user = '';
open $fh, "$mole view $filename imap_user 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $imap_user = $_;
	last;
  }
}

our $imap_pass = '';
open $fh, "$mole view $filename imap_pass 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $imap_pass = $_;
	last;
  }
}

# Main body begin
my ($total,$critnum,$unknnum) = (0,0,0);
my ($time_start,$time_stop,$time_duration);

$result = sprintf(_"check list: %s ### ### ",$addr_port);

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {
  $total++;
  my ($imap_host, $imap_port) = (split /:/, shift @addr_pair)[0,1];
  if (!defined $imap_host || !defined $imap_port) {
	$result .= sprintf(_"<font color=yellow> imap_host or imap_port not defined </font> ### ### ");
	$unknnum++;
	next;
  }
  if ($imap_port =~ /\D/) {
	$result .= sprintf(_"<font color=yellow> %s:%s imap port not numberic </font> ### ### ",$imap_host,$imap_port);
	$unknnum++;
	next;
  }

  $time_start = Benchmark->new();
  my $imap=IO::Socket::INET->new(
	PeerAddr =>	$imap_host,
	PeerPort => 	$imap_port,
	Proto	 =>	'tcp',
	Timeout =>	($time_out =~ /\D/)?10:$time_out,
  );
  unless (defined $imap) {
	if ($@) {
		$@ =~ s/[\r\n]//g;
		$result .= sprintf(_"<font color=red> connect [%s:%d] failed in %d seconds, return [%s] ",$imap_host,$imap_port,$time_out,$@);
	} else {
		$result .= sprintf(_"<font color=red> connect [%s:%d] failed in %d seconds. ",$imap_host,$imap_port,$time_out);
	}
	$critnum++;
	goto ERREND;
  } else {
	my $welcome = <$imap>;
	if ($welcome) {
		$welcome =~ s/[\r\n]//g;
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= sprintf(_"connect [%s:%d] return welcome banner ### [%s] (%f seconds) ### ",$imap_host,$imap_port,$welcome,$time_duration);
		$time_start = Benchmark->new();		## reset time_start
	} else {
		$result .= sprintf(_"<font color=red> connect [%s:%d] didn't return welcome banner ",$imap_host,$imap_port);
		$critnum++;
		goto ERREND;
	}
  }
  if($imap_user && $imap_pass) {
	print $imap "A01 LOGIN $imap_user $imap_pass\n\r";	## if without \r, will hang up for 30s.
	my $response = <$imap>;
	$response =~ s/[\r\n]//g if defined $response;
	unless (defined $response && $response =~ m/\AA01 (OK|SUCC|LOGIN|LOGON) /i) {
		$response = '' if (!defined $response);
		$result .= sprintf(_"<font color=red> imap command: A01 LOGIN return [message=%s] ",$response);
		$critnum++;
		goto ERREND;
	} else {
		print $imap "A02 LOGOUT\n\r" if $imap;		## if without \r, will hang up for 30s.
		$imap->close() if $imap;
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= sprintf(_"imap command: A01 LOGIN return [message=%s] (%f seconds) ### ### ",$response,$time_duration);
	}
  } else {
	$result .= sprintf(_" imap_user or imap_pass not defined, imap login test skip ### ### ");
  }
  next;

  ERREND: {
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= sprintf(_" (%f seconds) </font> ### ### ",$time_duration);
	next;
  }
}
# prepare last output
if ($critnum > 0) {
  printf _"{crit}:{str}:{ IMAP SVR CRITICAL | %d/%d imap check critical | %s }",$critnum,$total,$result;
  exit $state_crit;
} elsif ($unknnum > 0) {
  printf _"{unkn}:{str}:{ IMAP SVR UNKNOWN | %d/%d imap check unknown | %s }",$unknnum,$total,$result;
  exit $state_unkn;
} else {
  printf _"{succ}:{str}:{ IMAP SVR OK | %d/%d imap check success | %s }",$total,$total,$result;
  exit $state_succ;
}
