#!/usr/bin/env bash

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" ] && [ -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&-
else
        echo -en "{unkn}:{str}:{include file not exists or empty}"
	exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="cpu_usage"
else
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi

# === SET GLOBAL LOCALE
glocale=$(get_locale cpu_usage)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] || [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
	export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help}

Usage	 :   data

Output   :   usa_pct% wait_pct% sys_pct% usr_pct%
Example  :   0.4 0.2 0 0
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { succ | warn | crit | unkn | noop | notify }
TYPE=    	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
uplimit=$( read_mole_config cpu_usage uplimit )
wa_uplimit=$( read_mole_config cpu_usage wa_uplimit )
sy_uplimit=$( read_mole_config cpu_usage sy_uplimit )
us_uplimit=$( read_mole_config cpu_usage us_uplimit )

# if null return STATE_UNKN.

# if null or invalid set default.

# check function here
check(){

  if [ ! -x "/usr/bin/vmstat" ]; then
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "Command: [/usr/bin/vmstat] not prepared.")";
	return
  fi

  local WARN_LIMIT= CRIT_LIMIT=
  if is_multi_threshold "${uplimit}"; then
	local ARRY_LIMIT=( $(seperate_multi_threshold "${uplimit}" 2>&- ) )
	WARN_LIMIT=${ARRY_LIMIT[0]}
	CRIT_LIMIT=${ARRY_LIMIT[1]}
	if is_int "${WARN_LIMIT}" && is_between "${WARN_LIMIT}" "0" "100"; then
		:
	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "uplimit [\${uplimit}] warn threshold should be int and between 0-100.")";
		return
	fi
	if is_int "${CRIT_LIMIT}" && is_between "${CRIT_LIMIT}" "0" "100"; then
		:
	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "uplimit [\${uplimit}] crit threshold should be int and between 0-100.")";
		return
	fi
	if [ "$(echo "${WARN_LIMIT} >= ${CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "uplimit [\${uplimit}] warn threshold must lower than crit threshold.")";
		return
	fi
  else
  	if is_int "${uplimit}" && is_between "${uplimit}" "0" "100"; then
		CRIT_LIMIT="${uplimit}"
  	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "uplimit [\${uplimit}] should be int and between 0-100.")";
		return
  	fi
  fi

  local WA_WARN_LIMIT= WA_CRIT_LIMIT=
  if is_multi_threshold "${wa_uplimit}"; then
	local ARRY_LIMIT=( $(seperate_multi_threshold "${wa_uplimit}" 2>&- ) )
	WA_WARN_LIMIT=${ARRY_LIMIT[0]}
	WA_CRIT_LIMIT=${ARRY_LIMIT[1]}
	if is_int "${WA_WARN_LIMIT}" && is_between "${WA_WARN_LIMIT}" "0" "100"; then
		:
	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "wa_uplimit [\${wa_uplimit}] warn threshold should be int and between 0-100.")";
		return
	fi
	if is_int "${WA_CRIT_LIMIT}" && is_between "${WA_CRIT_LIMIT}" "0" "100"; then
		:
	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "wa_uplimit [\${wa_uplimit}] crit threshold should be int and between 0-100.")";
		return
	fi
	if [ "$(echo "${WA_WARN_LIMIT} >= ${WA_CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "wa_uplimit [\${wa_uplimit}] warn threshold must lower than crit threshold.")";
		return
	fi
  else
  	if is_int "${wa_uplimit}" && is_between "${wa_uplimit}" "0" "100"; then
  		WA_CRIT_LIMIT="${wa_uplimit}"
  	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "wa_uplimit [\${wa_uplimit}] should be int and between 0-100.")";
		return
  	fi
  fi

  local SY_WARN_LIMIT= SY_CRIT_LIMIT=
  if is_multi_threshold "${sy_uplimit}"; then
	local ARRY_LIMIT=( $(seperate_multi_threshold "${sy_uplimit}" 2>&- ) )
	SY_WARN_LIMIT=${ARRY_LIMIT[0]}
	SY_CRIT_LIMIT=${ARRY_LIMIT[1]}
	if is_int "${SY_WARN_LIMIT}" && is_between "${SY_WARN_LIMIT}" "0" "100"; then
		:
	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "sy_uplimit [\${sy_uplimit}] warn threshold should be int and between 0-100.")";
		return
	fi
	if is_int "${SY_CRIT_LIMIT}" && is_between "${SY_CRIT_LIMIT}" "0" "100"; then
		:
	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "sy_uplimit [\${sy_uplimit}] crit threshold should be int and between 0-100.")";
		return
	fi
	if [ "$(echo "${SY_WARN_LIMIT} >= ${SY_CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "sy_uplimit [\${sy_uplimit}] warn threshold must lower than crit threshold.")";
		return
	fi
  else
  	if is_int "${sy_uplimit}" && is_between "${sy_uplimit}" "0" "100"; then
		SY_CRIT_LIMIT="${sy_uplimit}"
  	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "sy_uplimit [\${sy_uplimit}] should be int and between 0-100.")";
		return
  	fi
  fi

  local US_WARN_LIMIT= US_CRIT_LIMIT=
  if is_multi_threshold "${us_uplimit}"; then
	local ARRY_LIMIT=( $(seperate_multi_threshold "${us_uplimit}" 2>&- ) )
	US_WARN_LIMIT=${ARRY_LIMIT[0]}
	US_CRIT_LIMIT=${ARRY_LIMIT[1]}
	if is_int "${US_WARN_LIMIT}" && is_between "${US_WARN_LIMIT}" "0" "100"; then
		:
	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "us_uplimit [\${us_uplimit}] warn threshold should be int and between 0-100.")";
		return
	fi
	if is_int "${US_CRIT_LIMIT}" && is_between "${US_CRIT_LIMIT}" "0" "100"; then
		:
	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "us_uplimit [\${us_uplimit}] crit threshold should be int and between 0-100.")";
		return
	fi
	if [ "$(echo "${US_WARN_LIMIT} >= ${US_CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "us_uplimit [\${us_uplimit}] warn threshold must lower than crit threshold.")";
		return
	fi
  else
  	if is_int "${us_uplimit}" && is_between "${us_uplimit}" "0" "100"; then
		US_CRIT_LIMIT="${us_uplimit}"
  	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "us_uplimit [\${us_uplimit}] should be int and between 0-100.")";
		return
  	fi
  fi

  # collect data
  local cpu_usage=
  cpu_usage=( $( ( /usr/bin/vmstat 1 10 |\
		   /bin/awk '($1!~/[0-9]+/ || NF!=17){next;} \
				{id+=$15;wa+=$16;sy+=$14;us+=$13} \
				END{print 100-id/10,wa/10,sy/10,us/10}'
		 ) 2>/dev/null )
 	    )

  # output data and exit if MODE=1
  [ "${MODE}" == "1" ] && {
	echo "${cpu_usage[*]}"
	exit;
  }

  p_usage="${cpu_usage[0]}";
  wa_usage="${cpu_usage[1]}"
  sy_usage="${cpu_usage[2]}";
  us_usage="${cpu_usage[3]}"

  oknum=0 critnum=0 warnnum=0 result=
  if [ -n "${CRIT_LIMIT}" ] && [ "$(echo  "${p_usage} >= ${CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
	((critnum++))
	result="${result} $(html_red "$(eval_gettext "cpu usage: [\${p_usage}%] >= cirt uplimit: [\${CRIT_LIMIT}%]")") ###"
  elif [ -n "${WARN_LIMIT}" ] && [ "$(echo  "${p_usage} >= ${WARN_LIMIT}" | bc 2>&-)" == "1" ]; then
	((warnnum++))
	result="${result} $(html_red "$(eval_gettext "cpu usage: [\${p_usage}%] >= warn uplimit: [\${WARN_LIMIT}%]")") ###"
  else
	((oknum++))
	result="${result} $(eval_gettext "cpu usage: [\${p_usage}%]") ###"
  fi

  if [ -n "${WA_CRIT_LIMIT}" ] && [ "$(echo  "${wa_usage} >= ${WA_CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
	((critnum++))
	result="${result} $(html_red "$(eval_gettext "cpu wait usage: [\${wa_usage}%] >= crit uplimit: [\${WA_CRIT_LIMIT}%]")") ###"
  elif [ -n "${WA_WARN_LIMIT}" ] && [ "$(echo  "${wa_usage} >= ${WA_WARN_LIMIT}" | bc 2>&-)" == "1" ]; then
	((warnnum++))
	result="${result} $(html_red "$(eval_gettext "cpu wait usage: [\${wa_usage}%] >= warn uplimit: [\${WA_WARN_LIMIT}%]")") ###"
  else
	((oknum++))
	result="${result} $(eval_gettext "cpu wait usage: [\${wa_usage}%]") ###"
  fi

  if [ -n "${SY_CRIT_LIMIT}" ] && [ "$(echo  "${sy_usage} >= ${SY_CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
	((critnum++))
	result="${result} $(html_red "$(eval_gettext "cpu sys usage: [\${sy_usage}%] >= crit uplimit: [\${SY_CRIT_LIMIT}%]")") ###"
  elif [ -n "${SY_WARN_LIMIT}" ] && [ "$(echo  "${sy_usage} >= ${SY_WARN_LIMIT}" | bc 2>&-)" == "1" ]; then
	((warnnum++))
	result="${result} $(html_red "$(eval_gettext "cpu sys usage: [\${sy_usage}%] >= warn uplimit: [\${SY_WARN_LIMIT}%]")") ###"
  else
	((oknum++))
	result="${result} $(eval_gettext "cpu sys usage: [\${sy_usage}%]") ###"
  fi

  if [ -n "${US_CRIT_LIMIT}" ] && [ "$(echo  "${us_usage} >= ${US_CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
	((critnum++))
	result="${result} $(html_red "$(eval_gettext "cpu user usage: [\${us_usage}%] >= crit uplimit: [\${US_CRIT_LIMIT}%]")") ###"
  elif [ -n "${US_WARN_LIMIT}" ] && [ "$(echo  "${us_usage} >= ${US_WARN_LIMIT}" | bc 2>&-)" == "1" ]; then
	((warnnum++))
	result="${result} $(html_red "$(eval_gettext "cpu user usage: [\${us_usage}%] >= warn uplimit: [\${US_WARN_LIMIT}%]")") ###"
  else
	((oknum++))
	result="${result} $(eval_gettext "cpu user usage: [\${us_usage}%]") ###"
  fi

  total=$((${critnum}+${warnnum}+${oknum}))
  if [ ${critnum} -gt 0 ]; then
	local top_pcpu_ps=$( (ps -eo pid,comm,pcpu|tail -n +2|sort -rn -k 3|head -n 10|sed -e 's/$/###/g' | tr -d '\n') 2>&- )
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "CPU Usage Check CRITICAL") | $(eval_gettext "\${critnum}/\${total} check critical.") | ${result} ### ### $(gettext "cpu usage top10:") ### ${top_pcpu_ps}"
  elif [ ${warnnum} -gt 0 ]; then
	local top_pcpu_ps=$( (ps -eo pid,comm,pcpu|tail -n +2|sort -rn -k 3|head -n 10|sed -e 's/$/###/g' | tr -d '\n') 2>&- )
	EXIT_STATUS=${STATE_WARN};
	LEVEL="warn";
	TYPE="str";
	CONTENT="$(gettext "CPU Usage Check WARNING") | $(eval_gettext "\${warnnum}/\${total} check warning.") | ${result} ### ### $(gettext "cpu usage top10:") ### ${top_pcpu_ps}"
  else
	EXIT_STATUS=${STATE_SUCC};
	LEVEL="succ";
	TYPE="str";
	CONTENT="$(gettext "CPU Usage Check OK") | $(eval_gettext "\${oknum}/\${total} check success.") | ${result}"
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
