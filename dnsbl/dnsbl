#!/usr/bin/env bash

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" ] && [ -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="dnsbl"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale dnsbl)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] || [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { succ | warn | crit | unkn | noop | notify }
TYPE=   	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	:
else
	dnsbl_server=$( read_mole_config dnsbl dnsbl_server )
	time_out=$( read_mole_config dnsbl time_out )
	exposed_addr=$( read_mole_config dnsbl exposed_addr )
fi

# if null return STATE_UNKN.

# if null or invalid set default.
[ -z "${dns_check_lst}" ] && dns_check_lst="eyou.net:mx,ns"

# is_ipaddr function here
is_ipaddr() {
	echo "${1}" | grep -E -q "^(([0-9]|([1-9][0-9])|(1[0-9]{2})|(2([0-4][0-9]|5[0-5])))\.){3}([1-9]|([1-9][0-9])|(1[0-9]{2})|(2([0-4][0-9]|5[0-5])))$"
}

# check function here
check(){

  if [ -f "/usr/bin/dig" ] && [ -x "/usr/bin/dig" ]; then
	:
  else
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "Util: [/usr/bin/dig] not prepared.")"
	return
  fi

  if [ -z "${dnsbl_server}" ]; then
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "dnsbl_server not defined.")";
        return
  fi

  if is_int "${time_out}"; then
        :
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "time_out [\${time_out}] should be int.")";
        return
  fi

  if [ -z "${exposed_addr}" ]; then
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "exposed_addr not defined.")";
        return
  fi

  local result= warnnum=0  unknnum=0 total=0
  local flagwarn=0  flagunkn=0

  result="$(eval_gettext "DNSBL Server: [\${dnsbl_server}]") ### ###"
  for x in `echo "${exposed_addr}"`
  do
	flagwarn=0
	flagunkn=0
	((total++))

	if ! is_ipaddr "${x}"; then
		((unknnum++))
		result="${result} $(eval_gettext "\${x} is not valid ip address") ### "
		continue
	fi
	
	convertip=$( (echo -e "${x}" | awk 'BEGIN{FS=".";OFS="."} {print $4,$3,$2,$1}')  2>&- )
	for y in `echo "${dnsbl_server}"`
	do
		queryname="${convertip}.${y}"
		response=$( /usr/bin/dig +short +time="${time_out}" A "${queryname}" 2>&1 )
		if [ $? -ne 0 ]; then
			((flagunkn++))
			result="${result} $(eval_gettext "\${queryname} dns query failed: [\${response}]") ### "
		else
			if [ -n "${response}" ]; then
				if (echo "${response}" | grep -E -q "^127.") >/dev/null 2>&1; then
					((flagwarn++))
					result="${result} $(html_red "$(eval_gettext "\${x} listed in \${y}")") ### "
					reason=$( /usr/bin/dig +short +time="${time_out}" TXT "${queryname}" 2>/dev/null )
					if [ -n "${reason}" ]; then
						result="${result} $(gettext "reason:") ${reason} ### " 
					fi
				fi
			fi
		fi
	done
	
	if [ $flagwarn -gt 0 ]; then
		((warnnum++))
	elif [ $flagunkn -gt 0 ]; then
		((unknnum++))
	else
		result="${result} $(eval_gettext "\${x} not listed in blacklist") ### "
	fi

	result="${result} ### "
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit;

  if [ "${warnnum}" -gt "0" ]; then
	EXIT_STATUS=${STATE_WARN};
	LEVEL="warn";
	TYPE="str";
	CONTENT="$(gettext "DNSBL Check WARNING") | $(eval_gettext "\${warnnum}/\${total} check warning") | ${result} "
  elif [ "${unknnum}" -gt "0" ]; then
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "DNSBL Check UNKNOWN") | $(eval_gettext "\${unknnum}/\${total} check unknown") | ${result} "
  else
	EXIT_STATUS="${STATE_SUCC}"
	LEVEL="succ"
	TYPE="str"
	CONTENT="$(gettext "DNSBL Check OK") | $(eval_gettext "\${total}/\${total} check success") | ${result} "
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
