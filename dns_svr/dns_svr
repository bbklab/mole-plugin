#!/usr/bin/env bash


BASE_DIR="/usr/local/eminfo/"
# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unknown}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unknown}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unknown}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="dns_svr"
else    
        echo -en "{unknown}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale dns_svr)
if [ -z "${glocale}" ]; then
        export LANG="${LANG}"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help} {dns_check_lst} {max_elapsed_time}

Usage:	 data  "eyou.net:mx,ns,soa  mail.eyou.net:a"  10

Output:   
Example:
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unknown | noop }
TYPE=   	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	dns_check_lst="$2"
	max_elapsed_time="$3"
else
	dns_check_lst=$( read_eminfo_config dns_svr dns_check_lst )
	max_elapsed_time=$( read_eminfo_config dns_svr max_elapsed_time )
fi

# if null return STATE_UNKNOWN.

# if null or invalid set default.
[ -z "${dns_check_lst}" ] && dns_check_lst="eyou.net:mx,ns,soa  mail.eyou.net:a  1.1.1.1:ptr"
[ -z "${max_elapsed_time}" -o ! -z "${max_elapsed_time//[0-9]}" ] && max_elapsed_time="10"

# check function here
check(){

  # /usr/bin/time -p -f "%E"
  [ -f "/usr/bin/time" -a -x "/usr/bin/time" ] || {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="$(gettext "Util: [/usr/bin/time] not prepared.")"
        return
  }

  [ -f "/usr/bin/host" -a -x "/usr/bin/host" ] || {
	EXIT_STATUS=${STATE_UNKNOWN};
	LEVEL="unknown";
	TYPE="str";
	CONTENT="$(gettext "Util: [/usr/bin/host] not prepared.")"
	return
  }

  local result= warnnum=0  unknnum=0 total=0

  result="$(eval_gettext "DNS Check List: [\${dns_check_lst}]") ### ###"
  for x in `echo "${dns_check_lst}"`
  do
	((total++))
	target=$(echo -e "${x}" | awk -F: '{print $1}')
	types=$(echo -e "${x}" | awk -F: '{print $2}')
	tmpfile="/tmp/.dns_svr_time_tmp"
	flag=0
	for y in `echo -e "${types}" | tr '[;/]' ' '`
	do
		error=$(/usr/bin/time -p -f "%E" -o "${tmpfile}" /usr/bin/host -t ${y} ${target} 2>&1)
		rc=$?
		if [ "${rc}" == "0" ]; then
			elapsed=$(head -n1 "${tmpfile}")
			result="${result} $(eval_gettext "dns resolving [\${y}] record on [\${target}] succeed in [\${elapsed}] seconds") ### "
		else
			error=$(echo -e "${error}" | tr -d '\r\n')
			result="${result} $(html_red "$(eval_gettext "dns resolving [\${y}] record on [\${target}] returned [\${error}]")") ### "
			((flag++))
		fi
	done
	result="${result} ### "
	[ "${flag}" == "0" ] || ((warnnum++))
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit;

  [ "${warnnum}" -gt "0" ] && {
	EXIT_STATUS=${STATE_WARNING};
	LEVEL="warn";
	TYPE="str";
	CONTENT="$(gettext "DNS SVR Check WARNING") | $(eval_gettext "\${warnnum}/\${total} check failed") | ${result} "
  } || {
	EXIT_STATUS="${STATE_OK}"
	LEVEL="ok"
	TYPE="str"
	CONTENT="$(gettext "DNS SVR Check OK") | $(eval_gettext "\${total}/\${total} check success") | ${result} "
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
