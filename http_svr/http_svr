#!/usr/bin/env bash

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" ] && [ -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="http_svr"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale http_svr)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] || [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {addr_port}  {tmout}
{addr_port} format:
  [http|https]:ip:port

Usage:   data  "http:127.0.0.1:80  https:mail.eyou.net:443"  10

Output:   
{addr}:{port}  {http_code} {time_total}s {size_download}Bytes

127.0.0.1:80 200 0.008s 12Bytes
mail.eyou.net:443 200 0.108s 24736Bytes
EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { succ | warn | crit | unkn | noop | notify }
TYPE=    	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
        addr_port="$2"
	time_out="$3"
else   
	addr_port=$( read_mole_config http_svr addr_port )
	time_out=$( read_mole_config http_svr time_out )
fi

# if null return STATE_UNKN.

# check function here
check(){
  if [ -f "/usr/bin/curl" ] && [ -x "/usr/bin/curl" ]; then
	:
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "utilite [/usr/bin/curl] not prepared.")"
        return
  fi

  if is_int "${time_out}"; then
        :
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "time_out [\${time_out}] should be int.")";
        return
  fi  

  local total=0  critnum=0  unknnum=0  result=
  for x in `echo "${addr_port}"`;
  do
	((total++))
	local addr=  port=  str1=  str2=
	prot=$(echo "${x}" | awk -F: '{print $1}')
	addr=$(echo "${x}" | awk -F: '{print $2}')
	port=$(echo "${x}" | awk -F: '{print $3}')

	if [ -z "${addr}" ]; then
		((unknnum++))
		result=" ${result} $(html_red "$(eval_gettext "check [\${x}]: addr [\${addr}] required")") ### ### "
		continue
	fi

	if ! is_int "${port}"; then
		((unknnum++))
		result=" ${result} $(html_red "$(eval_gettext "check [\${x}]: port [\${port}] should be int")") ### ### "
		continue
	fi

	if [ "${prot}" == "https" ]; then
		arr=(  $(/usr/bin/curl -k \
				--max-time ${time_out} -s -o /dev/null \
				-w "%{http_code} %{time_total} %{size_download}Bytes %{time_namelookup} %{time_connect} %{time_starttransfer}" \
				"${prot}://${addr}:${port}" 2>&1)
		)
	elif [ "${prot}" == "http" ]; then
		arr=(  $(/usr/bin/curl \
				--max-time ${time_out} -s -o /dev/null \
				-w "%{http_code} %{time_total} %{size_download}Bytes %{time_namelookup} %{time_connect} %{time_starttransfer}" \
				"${prot}://${addr}:${port}" 2>&1)
		)
	else
		((unknnum++))
		result=" ${result} $(html_red "$(eval_gettext "check [\${x}]: protocol [\${prot}] should be https or http")") ### ### "
		continue
	fi

	# output data and exit if MODE=1
	[ "${MODE}" == "1" ] && {
		echo "${addr}:${port} ${arr[*]}"
		continue
	}

	code=${arr[0]}; time=${arr[1]}; pagesize=${arr[2]};
	namelookup=${arr[3]}; connect=${arr[4]}; transfer=${arr[5]};
	connect=$(echo "${connect}-${namelookup}" |bc 2>&-|sed -e 's/^\./0\./')
	process=$(echo "${transfer}-${connect}" |bc 2>&-|sed -e 's/^\./0\./')
	download=$(echo "${time}-${transfer}" |bc 2>&-|sed -e 's/^\./0\./')
  	if [ "${code}" == "200" ]; then
		result=" ${result} $(eval_gettext "check [\${x}] return [code=\${code}, time=\${time}s, pagesize=\${pagesize}]") ### "
		result=" ${result} $(eval_gettext "time details: [namelookup=\${namelookup}s, connect=\${connect}s, process=\${process}s, download=\${download}s]") ### ### "
  	else
		((critnum++))
		result=" ${result} $(html_red "$(eval_gettext "check [\${x}] return [code=\${code}, time=\${time}s, pagesize=\${pagesize}]")") ### "
		result=" ${result} $(eval_gettext "time details: [namelookup=\${namelookup}s, connect=\${connect}s, process=\${process}s, download=\${download}s]") ### ### "
  	fi
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit

  if [ ${critnum} -gt 0 ]; then
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "HTTP SVR CRITICAL") | $(eval_gettext "\${critnum}/\${total} http check critical.") | "${result}" "
  elif [ ${unknnum} -gt 0 ]; then
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "HTTP SVR UNKNOWN") | $(eval_gettext "\${unknnum}/\${total} http check unknown.") | "${result}" "
  else
	EXIT_STATUS=${STATE_SUCC};
	LEVEL="succ";
	TYPE="str";
	CONTENT="$(gettext "HTTP SVR OK") | $(eval_gettext "\${total}/\${total} http check success.") | "${result}" "
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
