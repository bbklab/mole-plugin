#!/usr/bin/env perl

our $basedir = '/usr/local/esop/agent/mole';
our $mole = "$basedir/sbin/mole";

BEGIN {
  my $basedir = '/usr/local/esop/agent/mole';
  my $pllib_dir = "$basedir/opt/plmods";
  my @incs = (    # set additional path
        # rhel5 32bit
        $pllib_dir.'/lib/perl5/',
        $pllib_dir.'/lib/perl5/5.8.8/',
        $pllib_dir.'/lib/perl5/site_perl/',
        $pllib_dir.'/lib/perl5/site_perl/5.8.8/',
	$pllib_dir.'/lib/perl5/site_perl/5.8.8/i386-linux-thread-multi/',
        # rhel5 64bit
        $pllib_dir.'/lib64/perl5/',
        $pllib_dir.'/lib64/perl5/5.8.8/',
        $pllib_dir.'/lib64/perl5/site_perl/',
        $pllib_dir.'/lib64/perl5/site_perl/5.8.8/',
	$pllib_dir.'/lib64/perl5/site_perl/5.8.8/x86_64-linux-thread-multi/',
        # rhel6 32bit
        $pllib_dir.'/lib/perl5/',
	$pllib_dir.'/share/perl5/',
        # rhel6 64bit
        $pllib_dir.'/lib64/perl5/',
	$pllib_dir.'/share/perl5/',
  );

  push @INC, @incs;
};

use strict;
use warnings;
use utf8;
use JSON;
use Locale::Messages qw (textdomain bindtextdomain gettext nl_putenv);
# use Smart::Comments;
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';

$SIG{'PIPE'} = 'IGNORE';

$| = 1;

# return codes
our ($state_succ,$state_warn,$state_crit,$state_unkn,$state_noop) = (0,1,2,3,4);

# return stuff
our ($rc, $result) = (0,'');

our $filename = "emp_smtpauth_limit";

# check mole 
unless (-f $mole && -x $mole) {
  printf "{unkn}:{str}:{$mole not prepared.}";
  exit $state_unkn;
}

# read mole locale_def
our $localdir = "$basedir/share/locale/";
open my $fh, "$mole printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $localdir = $_; 
        last;
  }
}

# read plugin locale setting
our $locale = 'zh_CN.UTF-8';
open $fh, "$mole view $filename locale 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $locale = $_;
        last;
  }
  if(!defined $locale || $locale eq ''){
        open my $fh1, "$mole view default locale 2>&- |";
        if($fh1){
                while(<$fh1>){
                        chomp; $locale = $_;
                        last;
                }
        }
  }
}
if(!defined $locale || $locale eq ''){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'zh_CN' || $locale eq 'zh_CN.UTF-8' || $locale eq 'zh'){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'en_US' || $locale eq 'en_US.UTF-8' || $locale eq 'en'){
        $locale = 'en_US.UTF-8';
}else{
        $locale = 'zh_CN.UTF-8';
}
nl_putenv("LANGUAGE=$locale");

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $action_tag_path;
open $fh, "$mole view $filename action_tag_path 2>&- |";
if ($fh) {
  while(<$fh>){
        chomp; $action_tag_path = $_;
        last;
  }
}
unless (defined $action_tag_path && length $action_tag_path) {
	die 'action_tag_path not defined';
}
unless (-d $action_tag_path && -w $action_tag_path) {
	die 'action_tag_path must be exist directory';
}

our $action_pipe_file;
open $fh, "$mole view $filename action_pipe_file 2>&- |";
if ($fh) {
  while(<$fh>){
        chomp; $action_pipe_file = $_;
        last;
  }
}

our $action_lock_user = 1;
open $fh, "$mole view $filename action_lock_user 2>&- |";
if ($fh) {
  while(<$fh>){
        chomp; $action_lock_user = $_;
        last;
  }
}
if ($action_lock_user =~ m/\D/ || !defined $action_lock_user) {
	$action_lock_user = 1;
}

our $action_mod_pass = "{}";
open $fh, "$mole view $filename action_mod_pass 2>&- |";
if ($fh) {
  while(<$fh>){
        chomp; $action_mod_pass = $_; 
        last;
  }
}
our $mod_pass_config;
our %mod_pass_config = ();
eval { $mod_pass_config = JSON->new->allow_nonref->utf8(1)->ascii(1)->decode($action_mod_pass); };
if ($@) {
	die 'action_mod_pass not valid json';
} else {
	%mod_pass_config = ( 
  		'enable'		=> $mod_pass_config->{'enable'},
  		'fixpass'		=> $mod_pass_config->{'password'}{'fixed'},
  		'fixstr'		=> $mod_pass_config->{'password'}{'password'},
  		'display'		=> $mod_pass_config->{'password'}{'display'},
	);
}
### %mod_pass_config

our $tmpcsvfile = "/tmp/$filename.lockuser.tmp.csv";

# Sub Def
sub random_pass {
  my ($length) = @_;
  ### $length
  my @chars = (0..9,'a'..'z','A'..'Z','#','(',')','=','-','+','_','@');
  my $randpass = join "", map{ $chars[int rand @chars] } 0..($length-1);
  ### $randpass
  return $randpass;
}

sub gen_lock_csv {	# only called by lock_user
  my ($user,$domain,$password) = @_;
  if (open my $fh, ">", "$tmpcsvfile") {
  	if (defined $password && $password ne '') {
		printf $fh ":cond:acct_name,:cond:domain_name,user_basic:has_smtp,user_basic:has_remote,user_basic:password\n";
		printf $fh "\"$user\",\"$domain\",\"0\",\"0\",\"$password\"\n";
  	} else {
		printf $fh ":cond:acct_name,:cond:domain_name,user_basic:has_smtp,user_basic:has_remote\n";
		printf $fh "\"$user\",\"$domain\",\"0\",\"0\"\n";
  	}
	close $fh if $fh;
  }
}

sub lock_user {
  my ($user,$domain,$locknum,$password) = @_;
  my $em_control = "/usr/local/eyou/mail/app/sbin/em_control";
  my $rmessage = "";
  if (defined $password && $password ne '') {
	&gen_lock_csv($user,$domain,$password);
  } else {
	&gen_lock_csv($user,$domain);
  }
  if (-f $tmpcsvfile && -s $tmpcsvfile) {
	if (-f $em_control && -x $em_control) {
		my $result = "";
		open my $fh, "sudo -u eyou $em_control -m user::mod_user -f $tmpcsvfile -t c 2>&1 | ";
		if ($fh) {
			while(<$fh>){
				chomp; s/(\A\s+|\s+\Z)//g;
				next if m/\A\s*\Z/;
				$result .= $_ . ' ### ';
			}
		}
		if ($result =~ m/success/i) {
			$rmessage = sprintf(_"lock user %s\@%s succeed, result: ### %s ### ",$user,$domain,$result);
			my $today = "";
			open my $fh, "/bin/date +%Y%m%d 2>&- |";
			if ($fh) {
				while(<$fh>){
					chomp; s/(\A\s+|\s+\Z)//g; $today = $_;
					last;
				}
			}
			my $tagfile = "$action_tag_path/$user\@$domain\_$today";
			if (-f $tagfile && -s $tagfile) {   # tagfile exist, added +1
				if (open my $fh, ">", $tagfile) {
					$locknum += 1;
					printf $fh "$locknum\n";
					close $fh if $fh;
				}
			} else {	# tagfile not exist, first lock, write 1
				if ($locknum == 0){
					if (open my $fh, ">", $tagfile) {
						printf $fh "1\n";
						close $fh if $fh;
					}
				}
			}
		} else {
			$rmessage = sprintf(_"lock user %s\@%s failed, result: ### %s ### ",$user,$domain,$result);
		}
	} else {
		$rmessage = sprintf(_"em_control [%s] not exists or executable, can't lock user",$em_control);
	}
 	unlink $tmpcsvfile;
  } else {
	$rmessage = sprintf(_"tmp csv file [%s] not exists or empty",$tmpcsvfile);
  }
  return $rmessage;
}

# Main Handler Begin
unless ($action_lock_user) {
  printf _"action lock user disabled, nothing to do.";
  exit 0;
}

our $password = ""; 
if ($mod_pass_config{'enable'}) {
  if ($mod_pass_config{'fixpass'}) {
	$password = $mod_pass_config{'fixstr'};
  } else {
	$password = &random_pass(15);
  }
  if ($mod_pass_config{'display'}) {
	$result .= sprintf(_"lock user on smtp and remote ### modify user password as [%s] ### ### ",$password);
  } else {
	$result .= sprintf(_"lock user on smtp and remote ### ### ");
  }
}
### $password

if (-f $action_pipe_file && -s $action_pipe_file) {
  if (open my $fh, "<", $action_pipe_file) {
	while(<$fh>){
		my ($user,$domain,$locknum) = (split /[\s+|@]/)[1,2,3];
		$result .= &lock_user($user,$domain,$locknum,$password) . ' ### ';
	}
	close $fh if ($fh);
  } else {
	$result = sprintf(_"open pipe file [%s] failed. nothing to do.",$action_pipe_file);
  }
} else {
  $result = sprintf(_"pipe file [%s] not exists or empty. nothing to do.",$action_pipe_file);
}
### $result
printf $result;
