#!/usr/bin/env bash

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="disk_space"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale disk_space)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi




show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {space|inode}  {ext3 ext4 ...}

Usage:	 data  space|inode  "ext3 ext4"

Output:   

EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { succ | warn | crit | unkn | noop | notify }
TYPE=   	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	action="$2"
	fstype="$3"
else
	fstype=$( read_mole_config disk_space fstype)
	exclude_mpoint=$( read_mole_config disk_space exclude_mpoint )
	space_pct=$( read_mole_config disk_space space_pct)
	inode_pct=$( read_mole_config disk_space inode_pct)
fi

# if null return STATE_UNKN.

# if null or invalid set default.
[ -z "${fstype}" ] && fstype="ext2 ext3 ext4"
[ -z "${exclude_mpoint}" ] && exclude_mpoint="/boot"


# check function here
check(){

  [ -f "/bin/df" -a -x "/bin/df" ] || {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "Util: [/bin/df] not prepared.")";
        return
  }

  [ -f "/etc/mtab" -a -s "/etc/mtab" ] || {
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "File: [/etc/mtab] not prepared.")";
	return
  }

  if is_int "${space_pct}" && is_between "${space_pct}" "0" "100"; then
        :
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "space_pct [\${space_pct}] should be int and between 0-100.")";
        return
  fi

  if is_int "${inode_pct}" && is_between "${inode_pct}" "0" "100"; then
        :
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "inode_pct [\${inode_pct}] should be int and between 0-100.")";
        return
  fi

  local result= mpoint= warnnum=0

  result="### $(gettext "Space Check") ### "
  for t in `echo "${fstype}"`
  do
	mpoint=$(awk '($3~/\<'${t}'\>/){print $2}' "/etc/mtab" 2>&-|tr '\n' ' ')
	for m in `echo "${mpoint}"`
	do
		line=( $(/bin/df -P -T -m "${m}" 2>&- | tail -n +2) )
		if [ "${#line[@]}" != "7" ]; then
			((warnnum++))
			fdnum=${#line[@]}
			result="${result} $(html_red "$(eval_gettext "mount point \${m}, filed number \${fdnum} <> 7")") ###"
			continue
		fi
		if [ "${line[5]//[0-9]}" != "%" ]; then
			((warnnum++))
			fpercent=${line[5]}
			result="${result} $(html_red "$(eval_gettext "mount point \${m}, percent filed \${fpercent} unrecognized")") ###"
			continue
		fi
		if [ "$(echo -e "${exclude_mpoint}"|grep -E -o -w "${line[6]}")" != "" ]; then
			fmount=${line[6]}
			result="${result} ["${line[@]}"] $(eval_gettext "mount point \${fmount} SKIP") ###"
			continue
		fi

		local device="${line[0]}"  fstype="${line[1]}"  size="${line[2]}" used="${line[3]}"
		local used_pct=$(echo "${line[5]}"|tr -d '%')  mount="${line[6]}"
		size=$(echo -e "scale=3; ${size}/1024"|bc 2>&-|sed -e 's/^\./0\./')
		used=$(echo -e "scale=3; ${used}/1024"|bc 2>&-|sed -e 's/^\./0\./')

		# output data and exit if MODE=1
		if [ "${MODE}" == "1" -a "${action}" == "space" ]; then
			echo "Disk_Space: ${device} ${fstype} ${mount} ${size}M ${used}M ${used_pct}%"
			continue
		fi

		# check spare space percent
		if [ "$( echo "${used_pct}>${space_pct}" | bc 2>&- )" == "1" ]; then
			((warnnum++))
			result="${result} $(html_red "$(eval_gettext "\${device} -> \${mount} (\${fstype}), size: \${size}G,  used: \${used}G, used percent: \${used_pct}% > \${space_pct}%")") ### "
		else
			result="${result} $(eval_gettext "\${device} -> \${mount} (\${fstype}), size: \${size}G, used: \${used}G, used percent: \${used_pct}%") ###"
		fi
	done
  done

  result="${result} ### $(gettext "Inode Check") ### "
  for t in `echo "${fstype}"`
  do
	mpoint=$(awk '($3~/\<'${t}'\>/){print $2}' "/etc/mtab" 2>&-|tr '\n' ' ')
	for m in `echo "${mpoint}"`
	do
		line=( $(/bin/df -P -T -i "${m}" 2>&- | tail -n +2) )
		if [ "${#line[@]}" != "7" ]; then
			((warnnum++))
			fdnum=${#line[@]}
			result="${result} $(html_red "$(eval_gettext "mount point \${m}, filed number \${fdnum} <> 7")") ###"
			continue
		fi
		if [ "${line[5]//[0-9]}" != "%" ]; then
			((warnnum++))
			fpercent=${line[5]}
			result="${result} $(html_red "$(eval_gettext "mount point \${m}, percent filed \${fpercent} unrecognized")") ###"
			continue
		fi
		if [ "$(echo -e "${exclude_mpoint}"|grep -E -o -w "${line[6]}")" != "" ]; then
			fmount=${line[6]}
			result="${result} ["${line[@]}"] $(eval_gettext "mount point \${fmount} SKIP") ###"
			continue
		fi

                local device="${line[0]}"  fstype="${line[1]}"  size="${line[2]}" used="${line[3]}"
                local used_pct=$(echo "${line[5]}"|tr -d '%')  mount="${line[6]}"

        	# output data and exit if MODE=1
        	if [ "${MODE}" == "1" -a "${action}" == "inode" ]; then
                	echo "Inode_Space: ${device} ${fstype} ${mount} ${size} ${used} ${used_pct}%"
                	continue
         	fi  

		# check inode spare percent
		if [ "$(echo "${used_pct}>${inode_pct}" | bc 2>&-)" == "1" ]; then
			((warnnum++))
			result="${result} $(html_red "$(eval_gettext "\${device} -> \${mount} (\${fstype}), size: \${size}, used: \${used}, used percent: \${used_pct}% > \${inode_pct}%")") ###"
		else
			result="${result} $(eval_gettext "\${device} -> \${mount} (\${fstype}), size: \${size}, used: \${used}, used percent: \${used_pct}%") ###"
		fi
	done
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit;

  [ "${warnnum}" -gt "0" ] && {
	EXIT_STATUS=${STATE_WARN};
	LEVEL="warn";
	TYPE="str";
	CONTENT="$(gettext "Disk Space Check WARNING") | $(eval_gettext "\${warnnum} check failed.") | ${result} "
  } || {
	EXIT_STATUS="${STATE_SUCC}"
	LEVEL="succ"
	TYPE="str"
	CONTENT="$(gettext "Disk Space Check OK") | $(gettext "disk-space, disk-inode check success.") | ${result} "
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
