#!/usr/bin/env perl

our $basedir = '/usr/local/esop/agent/mole';
our $mole = "$basedir/sbin/mole";

BEGIN {
  my $basedir = '/usr/local/esop/agent/mole';
  my $pllib_dir = "$basedir/opt/plmods";
  my @incs = (    # set additional path
        # rhel5 32bit
        $pllib_dir.'/lib/perl5/',
        $pllib_dir.'/lib/perl5/5.8.8/',
        $pllib_dir.'/lib/perl5/site_perl/',
        $pllib_dir.'/lib/perl5/site_perl/5.8.8/',
        # rhel5 64bit
        $pllib_dir.'/lib64/perl5/',
        $pllib_dir.'/lib64/perl5/5.8.8/',
        $pllib_dir.'/lib64/perl5/site_perl/',
        $pllib_dir.'/lib64/perl5/site_perl/5.8.8/',
        # rhel6 32bit
        $pllib_dir.'/lib/perl5/',
	$pllib_dir.'/share/perl5/',
        # rhel6 64bit
        $pllib_dir.'/lib64/perl5/',
	$pllib_dir.'/share/perl5/',
  );

  push @INC, @incs;
};

use warnings;
use strict;
use utf8;
use Locale::Messages qw (textdomain bindtextdomain gettext nl_putenv :locale_h :libintl_h);
use POSIX qw (setlocale LC_ALL);
# use Smart::Comments;
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';


# return codes
our ($state_succ,$state_warn,$state_crit,$state_unkn,$state_noop,$state_notify) = (0,1,2,3,4,5);

# return stuff
our ($rc, $result) = (0,'');

our $filename = (split /\//, __FILE__)[-1];

# check mole 
unless (-f $mole && -x $mole) {
  printf "{unkn}:{str}:{$mole not prepared.}";
  exit $state_unkn;
}

# read mole locale_def
our $localdir = "$basedir/share/locale/";
open my $fh, "$mole printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $localdir = $_;
  	last;
  }
}

# read plugin locale setting
our $locale = 'zh_CN.UTF-8';
open $fh, "$mole view $filename locale 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $locale = $_;
        last;
  }
  if(!defined $locale || $locale eq ''){
        open my $fh1, "$mole view default locale 2>&- |";
        if($fh1){
                while(<$fh1>){
                        chomp; $locale = $_;
                        last;
                }
        }
  }
}
if(!defined $locale || $locale eq ''){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'zh_CN' || $locale eq 'zh_CN.UTF-8' || $locale eq 'zh'){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'en_US' || $locale eq 'en_US.UTF-8' || $locale eq 'en'){
        $locale = 'en_US.UTF-8';
}else{
        $locale = 'zh_CN.UTF-8';
}
setlocale(LC_ALL,$locale);
nl_putenv("LANGUAGE=$locale");
nl_putenv("LANG=$locale");

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $raidtemp_uplimit = 90;
open $fh, "$mole view $filename raidtemp_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $raidtemp_uplimit = $_;
  	last;
  }
}
$raidtemp_uplimit = 90 if $raidtemp_uplimit =~ /\D/;

our $disktemp_uplimit = 50;
open $fh, "$mole view $filename disktemp_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $disktemp_uplimit = $_;
  	last;
  }
}
$disktemp_uplimit = 50 if $disktemp_uplimit =~ /\D/;

our $bbutemp_uplimit = 90;
open $fh, "$mole view $filename bbutemp_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $bbutemp_uplimit = $_;
  	last;
  }
}
$bbutemp_uplimit = 90 if $bbutemp_uplimit =~ /\D/;

our $bbu_charge_status = 90;
open $fh, "$mole view $filename bbu_charge_status 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $bbu_charge_status = $_;
  	last;
  }
}
$bbu_charge_status = 90 if $bbu_charge_status =~ /\D/;

our $bbu_learn_check = 1;
open $fh, "$mole view $filename bbu_learn_check 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $bbu_learn_check = $_;
  	last;
  }
}
$bbu_learn_check = 1 if $bbu_learn_check =~ /\D/;

our $bbu_replace_check = 1;
open $fh, "$mole view $filename bbu_replace_check 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $bbu_replace_check = $_;
  	last;
  }
}
$bbu_replace_check = 1 if $bbu_replace_check =~ /\D/;

our $bbu_lowcap_check = 1;
open $fh, "$mole view $filename bbu_lowcap_check 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $bbu_lowcap_check = $_;
  	last;
  }
}
$bbu_lowcap_check = 1 if $bbu_lowcap_check =~ /\D/;

our $disk_online_check = 1;
open $fh, "$mole view $filename disk_online_check 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $disk_online_check = $_;
  	last;
  }
}
$disk_online_check = 1 if $disk_online_check =~ /\D/;

our $diskcrit_uplimit = 0;
open $fh, "$mole view $filename diskcrit_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $diskcrit_uplimit = $_;
  	last;
  }
}
$diskcrit_uplimit = 0 if $diskcrit_uplimit =~ /\D/;

our $diskfail_uplimit = 1;
open $fh, "$mole view $filename diskfail_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $diskfail_uplimit = $_;
  	last;
  }
}
$diskfail_uplimit = 0 if $diskfail_uplimit =~ /\D/;

our $memcrit_uplimit = 0;
open $fh, "$mole view $filename memcrit_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $memcrit_uplimit = $_;
  	last;
  }
}
$memcrit_uplimit = 0 if $memcrit_uplimit =~ /\D/;

our $memfail_uplimit = 0;
open $fh, "$mole view $filename memfail_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $memfail_uplimit = $_;
  	last;
  }
}
$memfail_uplimit = 0 if $memfail_uplimit =~ /\D/;

our $pdmedia_error_uplimit = 0;
open $fh, "$mole view $filename pdmedia_error_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $pdmedia_error_uplimit = $_;
  	last;
  }
}
$pdmedia_error_uplimit = 0 if $pdmedia_error_uplimit =~ /\D/;

our $pdother_error_uplimit = 0;
open $fh, "$mole view $filename pdother_error_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $pdother_error_uplimit = $_;
  	last;
  }
}
$pdother_error_uplimit = 0 if $pdother_error_uplimit =~ /\D/;

our $pdprd_failure_uplimit = 0;
open $fh, "$mole view $filename pdprd_failure_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $pdprd_failure_uplimit = $_;
  	last;
  }
}
$pdprd_failure_uplimit = 0 if $pdprd_failure_uplimit =~ /\D/;

# Main body begin

# 1. collect raid information
my @raid_info = ();
my $os_bitmode = '64';
my $getconf = "/usr/bin/getconf";
if (-f $getconf && -x $getconf) {
  open my $fh, "$getconf LONG_BIT 2>&1 |";
  if ($fh) {
	while(<$fh>){
		chomp; s/\A\s*//; s/\s*\Z//g; $os_bitmode = $_;
	}
  }
}
my $megacli = '/opt/MegaRAID/MegaCli/MegaCli64'; 
$megacli = '/opt/MegaRAID/MegaCli/MegaCli' if ($os_bitmode eq '32');
if (-f $megacli && -x $megacli) {
  my ($i,$raid_num) = (0,0);
  open my $fh, "$megacli -adpCount -NoLog 2>&- | ";
  if($fh){
        while(<$fh>){
		chomp; s/(\A\s+|\s+\Z)//g;
                if (/\A\s*Controller Count:\s*(\d+)/i){
                        $raid_num = $1; 
                        last;
                }   
        } 
  }
  for($i=0;$i<$raid_num;$i++){
	my %raid_single = (
		'RAID_ID'                       => $i,
		'Product_Name'			=> '',	# Info
		'Serial_Number'                 => '',  # Info
		'Physical_Disk_Number'		=> '',  # Info
		'Virtual_Disk_Number'		=> '',  # Info
		'RAID_Memory'			=> '',  # Info
		'RAID_BBU'			=> '',	# Learn_Cycle_Active, Relative_State_of_Charge, Temperature, Battery_Replacement_Required, Remaining_Capacity_Low
		'RAID_Temp_Sensor'              => '',	# Temperature
		'Physical_Disks_Critical'       => '',  # >0
		'Physical_Disks_Failed'         => '',  # >0
		'Memory_Correctable_Errors'     => '',	# >0
		'Memory_Uncorrectable_Errors'   => '',  # >0
		'Physical_Disk_Info'		=> '',	# media_error, other_error, predictive_failure, temperature
	);	
        my %raid_temp_sensor = (        ### init  %raid_temp_sensor
                'Present'       => 0,
                'Temperature'   => '', 
        );
	open my $fh1, "$megacli -AdpAllInfo -a$i -NoLog 2>&- | ";
	if($fh1){
		while(<$fh1>){
			chomp; s/(\A\s+|\s+\Z)//g;
                        if(/\A\s*Product Name\s*:\s*(.+)\s*\Z/i){
                                $raid_single{'Product_Name'} = $1; 
                                next;
                        }   
                        if(/\A\s*Serial No\s*:\s*(.+)\s*\Z/i){
                                $raid_single{'Serial_Number'} = $1;
                                next;
                        }
			if(/\A\s*Disks\s*:\s*(\d+)\s*\Z/i){
				$raid_single{'Physical_Disk_Number'} = $1;
				if ($raid_single{'Physical_Disk_Number'} > 0) {
                                        my @pd_array = ();
                                        my %pd_single = (
                                                'pd_id'                 => 'X', # init
                                                'inquiry_data'          => '',  # Info
						'media_type'		=> '',  # Info
						'position'		=> '',  # Info
                                                'media_error'           => '',
                                                'other_error'           => '',
                                                'predictive_failure'    => '',
						'firmware_state'	=> '',
                                                'temperature'           => '',
                                        );
					my $pd_finish_flag = 0;
                                        open my $fh4, "$megacli -PDList -a$i -NoLog 2>&- | ";
                                        if($fh4){
                                                while(<$fh4>){
                                                        chomp; s/(\A\s+|\s+\Z)//g;
                                                        # if blank-line, check if single physical disk finished.
                                                        if(/\A\s*\Z/i){ 
                                                                if($pd_single{'pd_id'} ne 'X' && $pd_finish_flag == 0){
                                                                        $pd_finish_flag = 1;
                                                                        my %tmp_pd_single = %pd_single;
                                                                        push @pd_array, \%tmp_pd_single;
                                                                }else{
                                                                        $pd_finish_flag = 0;
                                                                        $pd_single{'pd_id'} = 'X';
                                                                }
                                                                next;
                                                        }
                                                        if(/\A\s*Device Id\s*:\s*(\d+)\s*\Z/i){
                                                                $pd_single{'pd_id'} = $1;
                                                                next;
                                                        }       
                                                        if(/\A\s*Drive\'s postion\s*:\s*(.+)\s*\Z/i){
                                                                $pd_single{'position'} = $1;
                                                                next;
							}
                                                        if(/\A\s*Media Error Count\s*:\s*(.+)\s*\Z/i){
                                                                $pd_single{'media_error'} = $1;
                                                                next;
                                                        }       
                                                        if(/\A\s*Other Error Count\s*:\s*(.+)\s*\Z/i){
                                                                $pd_single{'other_error'} = $1;
                                                                next;
                                                        }       
                                                        if(/\A\s*Predictive Failure Count\s*:\s*(.+)\s*\Z/i){
                                                                $pd_single{'predictive_failure'} = $1;
                                                                next;
                                                        }
                                                        if(/\A\s*Inquiry Data\s*:\s*(.+?)\s*\Z/i){
                                                                $pd_single{'inquiry_data'} = $1;
                                                                next;
                                                        }       
                                                        if(/\A\s*Media Type\s*:\s*(.+)\s*\Z/i){
                                                                $pd_single{'media_type'} = $1; 
                                                                next;
                                                        } 
                                                        if(/\A\s*Firmware state\s*:\s*(.+)\s*\Z/i){
                                                                $pd_single{'firmware_state'} = $1;
                                                                next;
                                                        }
                                                        if(/\A\s*Drive Temperature\s*:\s*(.+)\s*\Z/i){
                                                                $pd_single{'temperature'} = $1;
                                                                next;
                                                        }
						}
					}
					$raid_single{'Physical_Disk_Info'} = \@pd_array;
				}
				next;
			}
			if(/\A\s*Virtual Drives\s*:\s*(\d+)\s*\Z/i){
                                $raid_single{'Virtual_Disk_Number'} = $1;
				next;
			}
                        if(/\A\s*Memory Size\s*:\s*(.+)\s*\Z/i){
                                $raid_single{'RAID_Memory'} = $1;
                                next;
                        }
                        if(/\A\s*Temperature sensor for controller\s*:\s*Present\s*\Z/i){
                                $raid_temp_sensor{'Present'} = 1;
                                next;
                        }
                        if(/\A\s*Controller temperature\s*:\s*(.+)\s*\Z/i){
                                $raid_temp_sensor{'Temperature'} = $1;
                                next;
                        }
                        if(/\A\s*Critical Disks\s*:\s*(\d+)\s*\Z/i){
                                $raid_single{'Physical_Disks_Critical'} = $1;
                                next;
                        }
                        if(/\A\s*Failed Disks\s*:\s*(\d+)\s*\Z/i){
                                $raid_single{'Physical_Disks_Failed'} = $1;
                                next;
                        }
                        if(/\A\s*Memory Correctable Errors\s*:\s*(\d+)\s*\Z/i){
                                $raid_single{'Memory_Correctable_Errors'} = $1;
                                next;
                        }
                        if(/\A\s*Memory Uncorrectable Errors\s*:\s*(\d+)\s*\Z/i){
                                $raid_single{'Memory_Uncorrectable_Errors'} = $1;
                                next;
                        }
			if(/\A\s*BBU\s*:\s*Present\s*\Z/i){
				my %bbu_single = (
					'Temperature'                   => '',
					'Learn_Cycle_Active'            => '',  # Yes, No
					'Relative_State_of_Charge'      => '',	
					'Battery_Replacement_Required'	=> '',  # Yes, No
					'Remaining_Capacity_Low'	=> '',  # Yes, No
				);
				open my $fh2, "$megacli -AdpBbuCmd -a$i -NoLog 2>&- | ";
				if($fh2){
                                        while(<$fh2>){
                                                chomp; s/(\A\s+|\s+\Z)//g;
                                                if(/\A\s*Temperature:\s*(.+)\s*\Z/i){
                                                        $bbu_single{'Temperature'} = $1;
                                                        next;
                                                }
                                                if(/\A\s*Learn Cycle Active\s*:\s*(.+)\s*\Z/i){
                                                        $bbu_single{'Learn_Cycle_Active'} = $1;
                                                        next;
                                                }
                                                if(/\A\s*Relative State of Charge:\s*(.+)\s*\Z/i){
                                                        $bbu_single{'Relative_State_of_Charge'} = $1;
                                                        next;
                                                }
                                                if(/\A\s*Battery Replacement required\s*:\s*(.+)\s*\Z/i){
                                                        $bbu_single{'Battery_Replacement_Required'} = $1; 
                                                        next;
                                                }
                                                if(/\A\s*Remaining Capacity Low\s*:\s*(.+)\s*\Z/i){
                                                        $bbu_single{'Remaining_Capacity_Low'} = $1;
                                                        next;
                                                }
					}
				}
				$raid_single{'RAID_BBU'} = \%bbu_single;
				next;
			}
		}
	}
	$raid_single{'RAID_Temp_Sensor'} = \%raid_temp_sensor;
	push @raid_info, \%raid_single;
  }
} else {
  printf _"{unkn}:{str}:{ RAID Information UNKNOWN | util megacli not prepared | %s not prepared }",$megacli;
  exit $state_unkn;
}

# 2. check raid information
my ($critnum,$warnnum,$total) = (0,0,0);
if (@raid_info) {
  $total = scalar @raid_info;
  while(@raid_info){
	my $raid = shift @raid_info;
	my ($critflag,$warnflag) = (0,0);

	$result  = sprintf(_"RAID ID: %d, Product Name: %s ### ",$raid->{'RAID_ID'},$raid->{'Product_Name'});
	$result .= sprintf(_"Serial: %s, RAID Memory: %s ### ",$raid->{'Serial_Number'},$raid->{'RAID_Memory'});
	$result .= sprintf(_"VD Number: %d, PD Number: %d ### ### ",$raid->{'Virtual_Disk_Number'},$raid->{'Physical_Disk_Number'});

	# 1. check raid temperature
	if (defined $raid->{'RAID_Temp_Sensor'} && $raid->{'RAID_Temp_Sensor'}->{'Present'}) {
		if (defined $raid->{'RAID_Temp_Sensor'}->{'Temperature'} && $raid->{'RAID_Temp_Sensor'}->{'Temperature'} ne '') {
			if ($raid->{'RAID_Temp_Sensor'}->{'Temperature'} =~ m/(\d+)\s*degree\s+celcius/i) {
				if ($1 >= $raidtemp_uplimit) {
					$warnflag ++;
					$result .= sprintf(_"<font color=red> Raid Controller Temperature: %d degree Celcius </font> ### ",$1);
				} else {
					$result .= sprintf(_"Raid Controller Temperature: %d degree Celcius ### ",$1);
				}
			} else {
				$result .= sprintf(_"Raid Controller Temperature: %s ### ",$raid->{'RAID_Temp_Sensor'}->{'Temperature'});
			}
		} else {
			$result .= sprintf(_"Raid Controller Temperature not detected. ### ");
		}
	} else {
			$result .= sprintf(_"Raid Temperature Sensor not exists, Raid Temperature Unknown. ### ");
	}

	# 2. check raid Physical_Disks_Critical
	if (defined $raid->{'Physical_Disks_Critical'} && $raid->{'Physical_Disks_Critical'} ne '') {
		if ($raid->{'Physical_Disks_Critical'} > $diskcrit_uplimit) {
			$critflag ++;
			$result .= sprintf(_"<font color=red> Critical Physical Disk: %d </font> ### ",$raid->{'Physical_Disks_Critical'});
		} else {
			$result .= sprintf(_"Critical Physical Disk: %d ### ",$raid->{'Physical_Disks_Critical'});
		}
	} else {
		$result .= sprintf(_"Critical Physical Disk Number not detected. ### ");
	}

	# 3. check raid Physical_Disks_Failed
	if (defined $raid->{'Physical_Disks_Failed'} && $raid->{'Physical_Disks_Failed'} ne '') {
		if ($raid->{'Physical_Disks_Failed'} > $diskfail_uplimit) {
			$critflag ++;
			$result .= sprintf(_"<font color=red> Failed Physical Disk: %d </font> ### ",$raid->{'Physical_Disks_Failed'});
		} else {
			$result .= sprintf(_"Failed Physical Disk: %d ### ",$raid->{'Physical_Disks_Failed'});
		}
	} else {
		$result .= sprintf(_"Failed Physical Disk Number not detected. ### ");
	}

	# 4. check raid Memory_Uncorrectable_Errors
	if (defined $raid->{'Memory_Uncorrectable_Errors'} && $raid->{'Memory_Uncorrectable_Errors'} ne '') {
		if ($raid->{'Memory_Uncorrectable_Errors'} > $memcrit_uplimit) {
			$critflag ++;
			$result .= sprintf(_"<font color=red> Memory Uncorrectable Error: %d </font> ### ",$raid->{'Memory_Uncorrectable_Errors'});
		} else {
			$result .= sprintf(_"Memory Uncorrectable Error: %d ### ",$raid->{'Memory_Uncorrectable_Errors'});
		}
	} else {
		$result .= sprintf(_"Memory Uncorrectable Error Number not detected. ### ");
	}

	# 5. check raid Memory_Correctable_Errors
	if (defined $raid->{'Memory_Correctable_Errors'} && $raid->{'Memory_Correctable_Errors'} ne '') {
		if ($raid->{'Memory_Correctable_Errors'} > $memfail_uplimit) {
			$critflag ++;
			$result .= sprintf(_"<font color=red> Memory Correctable Error: %d </font> ### ",$raid->{'Memory_Correctable_Errors'});
		} else {
			$result .= sprintf(_"Memory Correctable Error: %d ### ",$raid->{'Memory_Correctable_Errors'});
		}
	} else {
		$result .= sprintf(_"Memory Correctable Error Number not detected. ### ");
	}

	# bbu exists or not ?
	if (defined $raid->{'RAID_BBU'} && $raid->{'RAID_BBU'} ne '') {
		# 6. check raid bbu Learn_Cycle_Active
		if ($bbu_learn_check) {
			if (defined $raid->{'RAID_BBU'}->{'Learn_Cycle_Active'} && $raid->{'RAID_BBU'}->{'Learn_Cycle_Active'} ne '') {
				if (lc($raid->{'RAID_BBU'}->{'Learn_Cycle_Active'}) eq 'yes') {
					$warnflag ++;
					$result .= sprintf(_"<font color=red> Attention! Raid BBU Learning Now Actived! </font> ### ");
				} else {
					$result .= sprintf(_"Raid BBU Learning not Actived Now. ### ");
				}
			} else {
				$result .= sprintf(_"Raid BBU Learning Active Status not detected. ### ");
			}
		} else {
			$result .= sprintf(_"Raid BBU Learning Check Disabled in Plugin Config. ### ");
		}

		# 7. check raid bbu Relative_State_of_Charge
		if (defined $raid->{'RAID_BBU'}->{'Relative_State_of_Charge'} && $raid->{'RAID_BBU'}->{'Relative_State_of_Charge'} ne '') {
			if ($raid->{'RAID_BBU'}->{'Relative_State_of_Charge'} =~ m/(\d+)\s*%/i) {
				if ($1 <= $bbu_charge_status) {
					$warnflag ++;
					$result .= sprintf(_"<font color=red> Raid BBU Charger Status: %d",$1).'% </font> ### ';
				} else {
					$result .= sprintf(_"Raid BBU Charger Status: %d",$1).'% ### ';
				}
			} else {
				$result .= sprintf(_"Raid BBU Charger Status: %s ### ",$raid->{'RAID_BBU'}->{'Relative_State_of_Charge'});
			}
		} else {
			$result .= sprintf(_"Raid BBU Charger Status not detected. ### ");
		}

		# 8. check raid bbu Temperature
		if (defined $raid->{'RAID_BBU'}->{'Temperature'} && $raid->{'RAID_BBU'}->{'Temperature'} ne '') {
			if ($raid->{'RAID_BBU'}->{'Temperature'} =~ m/(\d+)\s+C/i) {
				if ($1 >= $bbutemp_uplimit) {
					$warnflag ++;
					$result .= sprintf(_"<font color=red> Raid BBU Temperature: %d degree Celcius </font> ### ",$1);
				} else {
					$result .= sprintf(_"Raid BBU Temperature: %d degree Celcius ### ",$1);
				}
			} else {
				$result .= sprintf(_"Raid BBU Temperature: %s ### ",$raid->{'RAID_BBU'}->{'Temperature'});
			}
		} else {
			$result .= sprintf(_"Raid BBU Temperature not detected. ### ");
		}

		# 9. check raid bbu Battery_Replacement_Required
		if ($bbu_replace_check) {
			if (defined $raid->{'RAID_BBU'}->{'Battery_Replacement_Required'} && $raid->{'RAID_BBU'}->{'Battery_Replacement_Required'} ne '') {
				if (lc($raid->{'RAID_BBU'}->{'Battery_Replacement_Required'}) eq 'yes') {
					$warnflag ++;
					$result .= sprintf(_"<font color=red> Attention! Raid BBU Battery Need to be Replaced! </font> ### ");
				} else {
					$result .= sprintf(_"Raid BBU Battery Still Working Well. ### ");
				}
			} else {
				$result .= sprintf(_"Raid BBU Battery Replacement Status not detected. ### ");
			}
		} else {
			$result .= sprintf(_"Raid BBU Battery Replacement Check Disabled in Plugin Config. ### ");
		}

		# 10. check raid bbu Remaining_Capacity_Low
		if ($bbu_lowcap_check) {
			if (defined $raid->{'RAID_BBU'}->{'Remaining_Capacity_Low'} && $raid->{'RAID_BBU'}->{'Remaining_Capacity_Low'} ne '') {
				if (lc($raid->{'RAID_BBU'}->{'Remaining_Capacity_Low'}) eq 'yes') {
					$warnflag ++;
					$result .= sprintf(_"<font color=red> Attention! Raid BBU Remaining Capacity Low! </font> ### ");
				} else {
					$result .= sprintf(_"Raid BBU Remaining Capacity Normal. ### ");
				}
			} else {
				$result .= sprintf(_"Raid BBU Remaining Capacity Low Status not detected. ### ");
			}
		} else {
			$result .= sprintf(_"Raid BBU Remaining Capacity Low Check Disabled in Plugin Config. ### ");
		}

	} else {
		$result .= sprintf(_"Raid BBU not exists, Raid BBU Information Unknown. ### ");
	}

	## physical disks check
	my ($pdcritnum,$pdwarnnum,$pdtotal,$pdresult) = (0,0,0,'');
	# my @pds = $raid->{'Physical_Disk_Info'};  # wrong!
	my @pds = @{$raid->{'Physical_Disk_Info'}};
	if (@pds) {
		$pdtotal = scalar @pds;
		while(@pds){
			my $pd = shift @pds;

			my $pdinfo = sprintf(_"PD ID: %d, Meida Type: %s ### ",$pd->{'pd_id'},$pd->{'media_type'});
			$pdinfo   .= sprintf(_"PD Position: %s ### ",$pd->{'position'});
			$pdinfo   .= sprintf(_"PD Manufacturer: %s ### ",$pd->{'inquiry_data'});
			my $flag = 0;

			# 11. check raid pd temperature
			if (defined $pd->{'temperature'} && $pd->{'temperature'} ne '') {
				if ($pd->{'temperature'} =~ m/(\d+)C\s+/i) {
					if ($1 >= $disktemp_uplimit) {
						$pdwarnnum ++;
						if (!$flag) {
							$pdresult .= $pdinfo;
							$flag = 1;
						}
						$pdresult .= sprintf(_"<font color=red> Physical Disk Temperature: %d C </font> ### ",$1);
					}
				}
			} 

			# 12. check raid pd media_error
			if (defined $pd->{'media_error'} && $pd->{'media_error'} ne '') {
				if ($pd->{'media_error'} > $pdmedia_error_uplimit) {
					$pdcritnum ++;
					if (!$flag) {
						$pdresult .= $pdinfo;
						$flag = 1;
					}
					$pdresult .= sprintf(_"<font color=red> Pyhsical Disk Media Error: %d </font> ### ",$raid->{'media_error'});
				}
			}

			# 13. check raid pd other_error 
			if (defined $pd->{'other_error'} && $pd->{'other_error'} ne '') {
				if ($pd->{'other_error'} > $pdother_error_uplimit) {
					$pdwarnnum ++;
					if (!$flag) {
						$pdresult .= $pdinfo;
						$flag = 1;
					}
					$pdresult .= sprintf(_"<font color=red> Pyhsical Disk Other Error: %d </font> ### ",$raid->{'other_error'});
				}
			}

			# 14. check raid pd predictive_failure 
			if (defined $pd->{'predictive_failure'} && $pd->{'predictive_failure'} ne '') {
				if ($pd->{'predictive_failure'} > $pdprd_failure_uplimit) {
					$pdwarnnum ++;
					if (!$flag) {
						$pdresult .= $pdinfo;
						$flag = 1;
					}
					$pdresult .= sprintf(_"<font color=red> Pyhsical Disk Predictive Failure: %d </font> ### ",$raid->{'pdprd_failure_uplimit'});
				}
			}

        		# 15. check pd firmware_state
			if ($disk_online_check) {
        			if (defined $pd->{'firmware_state'} && $pd->{'firmware_state'} ne '') {
                			unless ($pd->{'firmware_state'} =~ m/\bOnline\b/i) {
                    				$pdcritnum ++;
						if (!$flag) {
							$pdresult .= $pdinfo;
							$flag =1;
						}
                    				$pdresult .= sprintf(_"<font color=red> Pyhsical Disk Missing? Fireware State: %s </font> ### ",$pd->{'firmware_state'});
                			}
        			} else {
                			$pdcritnum ++;
					if (!$flag) {
						$pdresult .= $pdinfo;
						$flag =1;
					}
                			$pdresult .= sprintf(_"<font color=red> Pyhsical Disk Missing? Fireware State Not Detected. </font> ### ");
        			}
			} 
		}
		if($pdcritnum == 0 && $pdwarnnum == 0){
			$pdresult .= sprintf(_"Total %d Physical Disks Online, Temperature Normal, and No Errors ###",$pdtotal);
		} else {
			$warnflag ++ if $pdwarnnum > 0;
			$critflag ++ if $pdcritnum > 0;
		}

	} else {
		$pdresult .= sprintf(_"No Physical Disks Found ?! Maybe Something Unknown Occured ... ### ");
	}
	$result .= $pdresult;
	$result .= " ### ### ### ### ";

	$critnum ++ if $critflag > 0;
	$warnnum ++ if $warnflag > 0;
  }
} else {
  printf _"{unkn}:{str}:{ RAID Information UNKNOWN | collected nothing about raid | collected nothing about raid ### maybe raid controller card not recoginized or not exist. }";
  exit $state_unkn;
}

# 3. prepare last output
if ($critnum > 0) {
  printf _"{crit}:{str}:{ RAID CONTROLLER CRITICAL | %d/%d raid controller card healthy check critical | %s }",$critnum,$total,$result;
  exit $state_crit;
} elsif ($warnnum > 0) {
  printf _"{warn}:{str}:{ RAID CONTROLLER WARNING | %d/%d raid controller card healthy check warn | %s }",$warnnum,$total,$result;
  exit $state_warn;
} else {
  printf _"{succ}:{str}:{ RAID CONTROLLER OK | %d/%d raid controller card healthy check success | %s }",$total,$total,$result;
  exit $state_succ;
}
