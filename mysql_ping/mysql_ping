#!/usr/bin/env bash



BASE_DIR="/usr/local/eminfo/"
# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unknown}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unknown}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unknown}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="mysql_ping"
else    
        echo -en "{unknown}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale mysql_ping)
if [ -z "${glocale}" ]; then
        export LANG="${LANG}"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi



show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {mysqladmin_path}  {ip,port,user,pass; ip,port,user,pass; ...}  {time_out}

Usage:   data  /opt/mysql/bin/mysqladmin  "127.0.0.1,3306,eyou,eyou; 127.0.0.1,3316,eyou,eyou"   10

Output:   {ip:port}  {[result]}

127.0.0.1:3306  [mysqld is alive ]
169.131.5.95:3316  [mysqld is alive ]
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# Set Default
EXIT_STATUS=0
LEVEL=""    	### { ok | warn | crit | unknown | noop }
TYPE=""    	### { str| file }
CONTENT=""      ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	mysqladmin_path="$2"
	mysql_conn_conf="$3"
	mysql_time_out="$4"
else
	mysqladmin_path=$( read_eminfo_config mysql_ping mysqladmin_path )
	mysql_conn_conf=$( read_eminfo_config mysql_ping mysql_conn_conf )
	mysql_time_out=$( read_eminfo_config mysql_ping mysql_time_out )
fi

# if null return STATE_UNKNOWN.

# if null or invalid set default.
[ -z "${mysqladmin_path}" ] && mysqladmin_path="/usr/local/eyou/mail/opt/mysql/bin/mysqladmin"
[ -z "${mysql_conn_conf}" ] && mysql_conn_conf="127.0.0.1,3306,eyou,eyou"
[ -z "${mysql_time_out}" -o ! -z "${mysql_time_out//[0-9]}" ] && mysql_time_out=10

# check function here
check() {

  [ -f "${mysqladmin_path}" -a -x "${mysqladmin_path}" ] || {
	EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="$(eval_gettext "utitile [\${mysqladmin_path}] not prepared.")"
	return
  } 

  local result=
  local oknum=0 errnum=0 unknum=0 total=0
  for pairs in `echo "${mysql_conn_conf}" | tr '[;/]' ' '`
  do
	((total++))

	sepnum=$(echo -e "${pairs}" | awk -F"," 'END{print --NF}')
	if [ "${sepnum}" != "3" ]; then
		((unknum++))
		result="${result} ### $(html_yellow "$(eval_gettext "[\${pairs}] is invalid")") ### ### "
		continue 1
	fi

  	mysql_host="$(echo -e "${pairs}"|awk -F"," '{print $1}')"
  	mysql_port="$(echo -e "${pairs}"|awk -F"," '{print $2}')"
  	mysql_user="$(echo -e "${pairs}"|awk -F"," '{print $3}')"
  	mysql_pass="$(echo -e "${pairs}"|awk -F"," '{print $4}')"
 	result="${result} $(eval_gettext "ping mysql [\${mysql_host}:\${mysql_port}] with user [\${mysql_user}]") ### "

	if [ -z "${mysql_pass}" ]; then
		cmd="${mysqladmin_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} --connect-timeout ${mysql_time_out} "
	else
		cmd="${mysqladmin_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} -p"${mysql_pass}" --connect-timeout ${mysql_time_out} "
	fi

	ping_result=$( ${cmd} ping 2>&1 )
	ping_result=$(echo -e "${ping_result}" | sed -e '/password on the command line/d' |tr -d '\r\n')
	if [ "$(echo "${ping_result}"|grep -E -o -i "is alive")" == "" ]; then
		((errnum++))
		result="${result} $(html_red "$(gettext "result:") [${ping_result}]") ### ### "
	else
		((oknum++))
		result="${result} $(gettext "result:") [${ping_result}] ### ### "
	fi

	# output data and exit if MODE=1 
        [ "${MODE}" == "1" ] && {
                echo "${mysql_host}:${mysql_port}  [${ping_result}]"
                continue
        }
  done

  # exit if MODE=1 
  [ "${MODE}" == "1" ] && exit

  [ "${errnum}" != "0" ] && {
	EXIT_STATUS=${STATE_CRITICAL};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "Mysql Ping CRITICAL") | $(eval_gettext "\${errnum}/\${total} check failed") | ${result} "
  } || {
	[ "${oknum}" == "${total}" ] && {
		EXIT_STATUS=${STATE_OK};
		LEVEL="ok";
		TYPE="str";
		CONTENT="$(gettext "Mysql Ping OK") | $(eval_gettext "\${oknum}/\${total} check success") | ${result} "
	} || {
		[ "${unknum}" != "0" ] && {
			EXIT_STATUS=${STATE_UNKNOWN};
			LEVEL="unknown";
			TYPE="str";
			CONTENT="$(gettext "Mysql Ping Unknown") | $(eval_gettext "\${unknum}/\${total} check unknown") | ${result} "
		}
	}
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
