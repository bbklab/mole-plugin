#!/usr/bin/env perl

our $basedir = '/usr/local/esop/agent/mole';
our $mole = "$basedir/sbin/mole";

BEGIN {
  my $basedir = '/usr/local/esop/agent/mole';
  my $pllib_dir = "$basedir/opt/plmods";
  my @incs = (    # set additional path
        # rhel5 32bit
        $pllib_dir.'/lib/perl5/',
        $pllib_dir.'/lib/perl5/5.8.8/',
        $pllib_dir.'/lib/perl5/site_perl/',
        $pllib_dir.'/lib/perl5/site_perl/5.8.8/',
        # rhel5 64bit
        $pllib_dir.'/lib64/perl5/',
        $pllib_dir.'/lib64/perl5/5.8.8/',
        $pllib_dir.'/lib64/perl5/site_perl/',
        $pllib_dir.'/lib64/perl5/site_perl/5.8.8/',
        # rhel6 32bit
        $pllib_dir.'/lib/perl5/',
	$pllib_dir.'/share/perl5/',
        # rhel6 64bit
        $pllib_dir.'/lib64/perl5/',
	$pllib_dir.'/share/perl5/',
  );

  push @INC, @incs;
};

use strict;
use warnings;
use utf8;
use Net::SNMP;
use Time::HiRes;
use Benchmark ':hireswallclock';
use Locale::Messages qw (textdomain bindtextdomain gettext nl_putenv :locale_h :libintl_h);
use POSIX qw (setlocale);
use Smart::Comments;
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';

$SIG{'PIPE'} = 'IGNORE';

$| = 1;

# return codes
our ($state_succ,$state_warn,$state_crit,$state_unkn,$state_noop,$state_notify) = (0,1,2,3,4,5);

# return stuff
our ($rc, $result) = (0,'');

our $filename = (split /\//, __FILE__)[-1];

# check mole
unless (-f $mole && -x $mole) {
  printf "{unkn}:{str}:{$mole not prepared.}";
  exit $state_unkn;
}

# read mole locale_def
our $localdir = "$basedir/share/locale/";
open my $fh, "$mole printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $localdir = $_;
        last;
  }
}

# read plugin locale setting
our $locale = 'zh_CN.UTF-8';
open $fh, "$mole view $filename locale 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $locale = $_;
        last;
  }
  if(!defined $locale || $locale eq ''){
        open my $fh1, "$mole view default locale 2>&- |";
        if($fh1){
                while(<$fh1>){
                        chomp; $locale = $_;
                        last;
                }
        }
  }
}
if(!defined $locale || $locale eq ''){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'zh_CN' || $locale eq 'zh_CN.UTF-8' || $locale eq 'zh'){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'en_US' || $locale eq 'en_US.UTF-8' || $locale eq 'en'){
        $locale = 'en_US.UTF-8';
}else{
        $locale = 'zh_CN.UTF-8';
}
setlocale(LC_ALL,$locale);
nl_putenv("LANGUAGE=$locale");
nl_putenv("LANG=$locale");

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $addr_port = undef;
open $fh, "$mole view $filename addr_port 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $addr_port = $_;
	last;
  }
}
if (!defined $addr_port) {
  printf _"{unkn}:{str}:{ addr_port not defined.}";
  exit $state_unkn;
}

our $time_out = undef;
open $fh, "$mole view $filename time_out 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $time_out = $_;
	last;
  }
}
if (!defined $time_out) {
  printf _"{unkn}:{str}:{ time_out not defined.}";
  exit $state_unkn;
} elsif ($time_out =~ m/\D/) {
  printf _"{unkn}:{str}:{ time_out [%s] shoule be int.}",$time_out;
  exit $state_unkn;
}

our $comt_name = undef;
open $fh, "$mole view $filename comt_name 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $comt_name = $_;
	last;
  }
}
if (!defined $comt_name) {
  printf _"{unkn}:{str}:{ comt_name not defined.}";
  exit $state_unkn;
}

our $tray_limit = undef;
open $fh, "$mole view $filename tray_limit 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $tray_limit = $_;
	last;
  }
}
if (!defined $tray_limit) {
  printf _"{unkn}:{str}:{ tray_limit not defined.}";
  exit $state_unkn;
}
our ($tray_warn, $tray_crit) = split (/,/, $tray_limit);
if (defined $tray_warn && defined $tray_crit) {
  if ($tray_warn =~ /\D/) {
  	printf _"{unkn}:{str}:{ tray_warn [%s] shoule be int.}", $tray_warn;
  	exit $state_unkn;
  }
  if ($tray_crit =~ /\D/) {
 	printf _"{unkn}:{str}:{ tray_crit [%s] shoule be int.}", $tray_crit;
	exit $state_unkn;
  }
  if ($tray_crit >= $tray_warn) {
  	printf _"{unkn}:{str}:{ tray_crit [%s] shoule be smaller than tray_warn [%s].}", $tray_crit, $tray_warn;
  	exit $state_unkn;
  }
} else {
  $tray_crit = $tray_warn;	# only crit limit defined
  if ($tray_crit =~ /\D/) {
 	printf _"{unkn}:{str}:{ tray_crit [%s] shoule be int.}", $tray_crit;
	exit $state_unkn;
  }
}

our $toner_limit = undef;
open $fh, "$mole view $filename toner_limit 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $toner_limit = $_;
	last;
  }
}
if (!defined $toner_limit) {
  printf _"{unkn}:{str}:{ toner_limit not defined.}";
  exit $state_unkn;
}
our ($toner_warn, $toner_crit) = split (/,/, $toner_limit);
if (defined $toner_warn && defined $toner_crit) {
  if ($toner_warn =~ /\D/) {
  	printf _"{unkn}:{str}:{ toner_warn [%s] shoule be int.}", $toner_warn;
  	exit $state_unkn;
  }
  if ($toner_crit =~ /\D/) {
 	printf _"{unkn}:{str}:{ toner_crit [%s] shoule be int.}", $toner_crit;
	exit $state_unkn;
  }
  if ($toner_crit >= $toner_warn) {
  	printf _"{unkn}:{str}:{ toner_crit [%s] shoule be smaller than toner_warn [%s].}", $toner_crit, $toner_warn;
  	exit $state_unkn;
  }
} else {
  $toner_crit = $toner_warn;	# only crit limit defined
  if ($toner_crit =~ /\D/) {
 	printf _"{unkn}:{str}:{ toner_crit [%s] shoule be int.}", $toner_crit;
	exit $state_unkn;
  }
}

# Main body begin

my ($total,$warnnum,$critnum,$unknnum) = (0,0,0,0);
my ($time_start,$time_stop,$time_duration);

my %OID_DevInfo=(
	'SysDescr'	=> 	'.1.3.6.1.2.1.1.1.0',
	'SysUptime'	=> 	'.1.3.6.1.2.1.1.3.0',
	'Model'		=> 	'.1.3.6.1.2.1.25.3.2.1.3.1',
	'Serial'	=> 	'.1.3.6.1.2.1.43.5.1.1.17.1',
);
my %OID_Consumables=(
	'prConsumTable'	=> 	'.1.3.6.1.2.1.43.11.1.1',
	'prConsumNames'	=> 	'.1.3.6.1.2.1.43.11.1.1.6.1',
	'prConsumMax'	=>	'.1.3.6.1.2.1.43.11.1.1.8.1',
	'prConsumNow'	=>	'.1.3.6.1.2.1.43.11.1.1.9.1',
);
my %OID_Tray=(
	'prTrayTable'	=> 	'.1.3.6.1.2.1.43.8.2.1',
	'prTrayName'	=>	'.1.3.6.1.2.1.43.8.2.1.13.1',
	'prTrayMax'	=> 	'.1.3.6.1.2.1.43.8.2.1.9.1',
	'prTrayNow'	=>	'.1.3.6.1.2.1.43.8.2.1.10.1',
);

$result = sprintf(_"check list: %s ### ### ",$addr_port);

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {
  $total++;
  my ($snmp_host, $snmp_port) = (split /:/, shift @addr_pair)[0,1];
  unless (defined $snmp_host && defined $snmp_port) {
	$result .= sprintf(_"<font color=yellow> printer_host or printer_port not defined </font> ### ### ");
	$unknnum++;
	next;
  }
  unless ($snmp_port =~ /\A\d+\Z/) {
	$result .= sprintf(_"<font color=yellow> %s:%s snmp port not int </font> ### ### ",$snmp_host,$snmp_port);
	$unknnum++;
	next;
  }

  $time_start = Benchmark->new();
  my ($snmp,$error) = Net::SNMP->session(
	-hostname     =>  $snmp_host,
	-port	      =>  $snmp_port,
	-timeout      =>  (int($time_out/4)) ? int($time_out/4) : 1,	# in all of my test, the real {timeout} is 4 times of 
									# configed {timeout}, so I reduced it to 1/4
	-community    =>  $comt_name,
	-version      =>  'snmpv1',
	-nonblocking  =>  0,		# be in blocking mode
	-retries      =>  3,
  );
  if (!defined $snmp) {
	$error =~ s/[\r\n]//g;
	$result .= sprintf(_"<font color=red> connect printer [%s:%d] through snmp return [%s] ",$snmp_host,$snmp_port,$error);
	$critnum++;
	goto ERREND;
  }
	
  # get general information
  my $snmp_result = $snmp->get_request(
	-varbindlist	=> 	[values %OID_DevInfo],
  );
  if ($snmp_result) {
	my %snmp_result = %{$snmp_result};
	$result .= sprintf(_"printer [%s:%s] general information: ### ",$snmp_host,$snmp_port);
	$result .= sprintf(_"System Describe: %s ### ",$snmp_result{$OID_DevInfo{'SysDescr'}}) if (defined $snmp_result{$OID_DevInfo{'SysDescr'}});
	$result .= sprintf(_"System Uptime: %s ### ",$snmp_result{$OID_DevInfo{'SysUptime'}}) if (defined $snmp_result{$OID_DevInfo{'SysUptime'}});
	$result .= sprintf(_"System Model: %s ### ",$snmp_result{$OID_DevInfo{'Model'}}) if ($snmp_result{$OID_DevInfo{'Model'}});
	$result .= sprintf(_"System Serial: %s ### ",$snmp_result{$OID_DevInfo{'Serial'}}) if ($snmp_result{$OID_DevInfo{'Serial'}});
  } else {
	$error = $snmp->error();
	if ($error && length $error) {
		$error =~ s/[\r\n]//g;
		$result .= sprintf(_"<font color=red> read printer [%s:%s] general information error: [%s]",$snmp_host,$snmp_port,$error);
		$critnum++;
		goto ERREND;
	} else {
		$result .= sprintf(_"printer [%s:%s] general information unknown ### ",$snmp_host,$snmp_port);
	}
  }
  
  # get paper tray consume
  my ($tray_critflag,$tray_warnflag) = (0,0);
  $snmp_result = $snmp->get_entries(
	-columns 	=>	[$OID_Tray{'prTrayName'},$OID_Tray{'prTrayMax'},$OID_Tray{'prTrayNow'}],
  );
  if ($snmp_result) {
	my %tray_index = ();
	my $total_traypct = 100;
	my ($totalmax, $totalnow, $tray_details) = (0,0,'');
	foreach my $key (keys %{$snmp_result}) {
		my ($base, $index) = ($key =~ m/($OID_Tray{'prTrayTable'}\.\d+\.\d+)\.(\d+)/);
		next unless (defined $base && defined $index);
		if ($base eq $OID_Tray{'prTrayName'}) {
			if ($snmp_result->{$key} && length $snmp_result->{$key}) {
				$tray_index{$index}{'name'} = $snmp_result->{$key};
			} else {
				$tray_index{$index}{'name'} = "Tray $index";
			}
		}
		if ($base eq $OID_Tray{'prTrayMax'}) {
			$tray_index{$index}{'max'} = $snmp_result->{$key};
		}
		if ($base eq $OID_Tray{'prTrayNow'}) {
			$tray_index{$index}{'now'} = $snmp_result->{$key};
		}
	}
	foreach my $key (keys %tray_index) {
		my ($name, $now, $max) = ($tray_index{$key}{'name'},$tray_index{$key}{'now'},$tray_index{$key}{'max'});
		if ($now eq '-3') {		# (-3) means that the printer knows that at least one unit remains.
			$tray_details .= sprintf(_" - Tray (%s) is OK! (%d) ### ",$name,$max);
		} elsif ($now eq '-2') {	# (-2) means unknown
			$tray_details .= sprintf(_" - Tray (%s) is Unknown! (%d) ### ",$name,$max);
		} elsif ($now eq '0') {		# (0) means no paper left!
			$totalmax += $max; $totalnow += 0;
			$tray_details .= sprintf(_" - Tray (%s) is Empty! (0/%d) ### ",$name,$max);
		} else {
			$totalmax += $max; $totalnow += $now;
			if($max eq '0') { $max = 1; }
			my $pct = sprintf("%.2f",$now*100/$max);
			$tray_details .= sprintf(_" - Tray (%s) is at %s", $name, $pct) . '%! ';
			$tray_details .= sprintf(_"(%d/%d) ### ", $now, $max);
		}
		next;
	}
	$total_traypct = sprintf("%.2f",$totalnow*100/$totalmax);
	if ($total_traypct <= $tray_crit) {
		$result .= sprintf(_"<font color=red> Tray Paper is at %s", $total_traypct) . '%! ' . sprintf(_"(%s paper)",$totalnow) . ' </font> ### ';
		$result .= $tray_details;
		$tray_critflag ++;
	} elsif ($total_traypct <= $tray_warn) {
		$result .= sprintf(_"<font color=red> Tray Paper is at %s", $total_traypct) . '%! ' . sprintf(_"(%s paper)",$totalnow) . ' </font> ### ';
		$result .= $tray_details;
		$tray_warnflag ++;
	} else {
		$result .= sprintf(_"Tray Paper is at %s", $total_traypct) . '%! ' . sprintf(_"(%s paper)",$totalnow) . ' ### ';
		$result .= $tray_details;
	}
	
  } else {
	$error = $snmp->error();
	if ($error && length $error) {
		$error =~ s/[\r\n]//g;
		$result .= sprintf(_"<font color=red> read printer [%s:%s] paper tray information error: [%s]",$snmp_host,$snmp_port,$error);
		$critnum++;
		goto ERREND;
	} else {
		$result .= sprintf(_"printer paper tray information unknown ### ",$snmp_host,$snmp_port);
	}
  }

  # get toner consume
  my ($toner_critflag,$toner_warnflag) = (0,0);
  $snmp_result = $snmp->get_entries(
	-columns 	=>	[$OID_Consumables{'prConsumNames'},$OID_Consumables{'prConsumMax'},$OID_Consumables{'prConsumNow'}],
  );
  if ($snmp_result) {
	my %consum_index = ();
	foreach my $key (keys %{$snmp_result}) {
		my ($base, $index) = ($key =~ m/($OID_Consumables{'prConsumTable'}\.\d+\.\d+)\.(\d+)/);
		next unless (defined $base && defined $index);
		if ($base eq $OID_Consumables{'prConsumNames'}) {
			if ($snmp_result->{$key} && length $snmp_result->{$key}) {
				$consum_index{$index}{'name'} = $snmp_result->{$key};
			} else {
				$consum_index{$index}{'name'} = "Consumor $index";
			}
		}
		if ($base eq $OID_Consumables{'prConsumMax'}) {
			$consum_index{$index}{'max'} = $snmp_result->{$key};
		}
		if ($base eq $OID_Consumables{'prConsumNow'}) {
			$consum_index{$index}{'now'} = $snmp_result->{$key};
		}
	}
	my %toner_index = ();
	foreach my $key (keys %consum_index) {
		if ($consum_index{$key}{'name'} =~ m/toner/i) {		# filter: only want <toner> related
			$toner_index{$key} = \%{$consum_index{$key}};
		}
	}
	my $total_tonerpct = 100;
	my ($totalmax, $totalnow, $toner_details) = (0,0,'');
	foreach my $key (keys %toner_index) {
		my ($name, $now, $max) = ($toner_index{$key}{'name'},$toner_index{$key}{'now'},$toner_index{$key}{'max'});
		if ($now eq '-3') {		# (-3) means that the consumor is full
			$totalmax += $max; $totalnow += $max;
			$toner_details .= sprintf(_" - Toner (%s) is FULL! (%d) ### ",$name,$max);
		} elsif ($now eq '-2') {	# (-2) means unknown
			$toner_details .= sprintf(_" - Toner (%s) is Unknown! (%d) ### ",$name,$max);
		} elsif ($now eq '0') {		# (0) means no paper left!
			$totalmax += $max; $totalnow += 0;
			$toner_details .= sprintf(_" - Toner (%s) is Empty! (0/%d) ### ",$name,$max);
		} else {
			$totalmax += $max; $totalnow += $now;
			if($max eq '0') { $max = 1; }
			my $pct = sprintf("%.2f",$now*100/$max);
			$toner_details .= sprintf(_" - Toner (%s) is at %s", $name, $pct) . '%! ';
			$toner_details .= sprintf(_"(%d/%d) ### ", $now, $max);
		}
		next;
	}
	$total_tonerpct = sprintf("%.2f",$totalnow*100/$totalmax);
	if ($total_tonerpct <= $toner_crit) {
		$result .= sprintf(_"<font color=red> Toner is at %s", $total_tonerpct) . '%! </font> ### ';
		$result .= $toner_details;
		$toner_critflag ++;
	} elsif ($total_tonerpct <= $toner_warn) {
		$result .= sprintf(_"<font color=red> Toner is at %s", $total_tonerpct) . '%! </font> ### ';
		$result .= $toner_details;
		$toner_warnflag ++;
	} else {
		$result .= sprintf(_"Toner is at %s", $total_tonerpct) . '%! ### ';
		$result .= $toner_details;
	}
	
  } else {
	$error = $snmp->error();
	if ($error && length $error) {
		$error =~ s/[\r\n]//g;
		$result .= sprintf(_"<font color=red> read printer [%s:%s] consumor information error: [%s]",$snmp_host,$snmp_port,$error);
		$critnum++;
		goto ERREND;
	} else {
		$result .= sprintf(_"printer consumor information unknown ### ",$snmp_host,$snmp_port);
	}
  }

  if ($tray_critflag || $toner_critflag) {
	$critnum++;
  } elsif ($tray_warnflag || $toner_warnflag) {
	$warnnum++;
  }

  $result .= ' ### ';
  next;

  ERREND: {
	if ($snmp) { $snmp->close(); }; 
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= sprintf(_" (%f seconds) </font> ### ### ",$time_duration);
	next;
  }
}

# prepare last output
if ($critnum > 0) {
  printf _"{crit}:{str}:{ Printer Check CRITICAL | %d/%d printer check critical | %s }",$critnum,$total,$result;
  exit $state_crit;
} elsif ($warnnum > 0) {
  printf _"{warn}:{str}:{ Printer Check WARNING | %d/%d printer check warnning | %s }",$warnnum,$total,$result;
  exit $state_warn;
} elsif ($unknnum > 0) {
  printf _"{unkn}:{str}:{ Printer Check UNKNOWN | %d/%d printer check unknown | %s }",$unknnum,$total,$result;
  exit $state_unkn;
} else {
  printf _"{succ}:{str}:{ Printer Check OK | %d/%d printer check success | %s }",$total,$total,$result;
  exit $state_succ;
}
