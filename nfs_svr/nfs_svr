#!/bin/bash


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" ] && [ -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="nfs_svr"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale nfs_svr)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] || [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {nfs_server_ip}

Usage:   data  166.111.96.102

Output:   

EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=          ### { ok | warn | crit | unkn | noop | notify }
TYPE=           ### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	nfs_server_ip=$2
else
	nfs_server_ip=$(read_mole_config nfs_svr nfs_server_ip)
fi

# if null return STATE_UNKN.

# if null or invalid set default.
[ -z "${nfs_server_ip}" ] && nfs_server_ip="127.0.0.1"

# check function here
check(){
  if [ -f "/usr/sbin/rpcinfo" ] && [ -x "/usr/sbin/rpcinfo" ]; then
	:
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "utilite [/usr/sbin/rpcinfo] not prepared.")"
        return
  fi

  if [ -f "/usr/sbin/showmount" ] && [ -x "/usr/sbin/showmount" ]; then
	:
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "utilite [/usr/sbin/showmount] not prepared.")"
        return
  fi

  if [ -f "/etc/mtab" ] && [ -s "/etc/mtab" ]; then
	:
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "File: [/etc/mtab] not prepared.")"
        return
  fi

  local nfs_server_services="nfs mountd portmapper nlockmgr"
  local nfs_client_services="portmapper"
  local status=
  local failed_server_services=
  local failed_client_services=
  local result= critnum=0  unknnum=0
  local mpoint=
  result="$(eval_gettext "NFS Server: [\${nfs_server_ip}]") ### ###"
  for ip in `echo "${nfs_server_ip}"`
  do
	((total++))
	### check nfs server side services
	status=$(/usr/sbin/rpcinfo -p "${ip}" 2>&1)
	for i in ${nfs_server_services}
 	do
		i1=$(echo -e "${status}" | grep -E -o -w "${i}")
		if [ -z "${i1}" ]; then
			failed_server_services="${i},${failed_server_services}"
		fi 
	done
	if [ ! -z "${failed_server_services}" ]; then
		result="${result} $(html_red "$(eval_gettext "nfs server [\${ip}], services: [\${failed_server_services}] dead")") ### ### "
		((critnum++))	
		continue
	else
		result="${result} $(eval_gettext "nfs server [\${ip}], services: [\${nfs_server_services}] alive") ### "
	fi

	### check nfs client side services
	status=$(/usr/sbin/rpcinfo -p "127.0.0.1" 2>&1)
	for i in ${nfs_client_services}
	do
		i2=$(echo -e "${status}" | grep -E -o -w "${i}")
		if [ -z "${i2}" ]; then
			failed_client_services="${i},${failed_client_services}"
		fi
	done
	if [ ! -z "${failed_client_services}" ]; then
		result="${result} $(html_red "$(eval_gettext "nfs local client services: [\${failed_client_services}] dead")") ### ### "
		((critnum++))
		continue
	else
		result="${result} $(eval_gettext "nfs local client services: [\${nfs_client_services}] alive") ### "
	fi

	### check nfs server export list
	nfs_exports=$(/usr/sbin/showmount -e ${ip} --no-headers 2>&1)
	if [ "$?" != "0" ]; then
		((critnum++))
		readerror=$(echo -e "${nfs_exports}"|tr -d '\r\n')
		result="${result} $(html_red "$(eval_gettext "read nfs exports error: [\${readerror}]")") ### ### "
		continue
	else
		path_exports=$(echo -e "${nfs_exports}" | /bin/awk '{a[$1]++} END{for(c in a){printf "%s ",c}}')
		result="${result} $(eval_gettext "read nfs exports list: [\${path_exports}]") ### "
	fi

	for i in ${path_exports}
	do
		mpoint=$(/bin/awk '($1=="'$ip':'$i'" && $3~/\<nfs\>/){print $2;exit;}' /etc/mtab 2>&-)
		if [ ! -z "${mpoint}" ] && [ -d "${mpoint}" ]; then
			result="${result} $(eval_gettext "\${ip}:\${i} mounted on \${mpoint}") ### "
		fi
	done
	result="${result} ###"
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit;

  [ "${critnum}" -gt "0" ] && {
        EXIT_STATUS=${STATE_CRIT};
        LEVEL="crit";
        TYPE="str";
        CONTENT="$(gettext "NFS SVR Check CRITICAL") | $(eval_gettext "\${critnum} nfs server check failed") | ${result} "
  } || {
	EXIT_STATUS="${STATE_SUCC}"
	LEVEL="succ"
	TYPE="str"
	CONTENT="$(gettext "NFS SVR Check OK") | $(eval_gettext "\${total} nfs server check success") | ${result} "
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
