#!/usr/bin/env perl
use warnings;
use strict;
use utf8;
use Locale::Messages qw (textdomain bindtextdomain gettext nl_putenv);
use Smart::Comments;
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';


# return codes
our ($state_ok,$state_warn,$state_crit,$state_unkn,$state_noop) = (0,1,2,3,4);

# return stuff
our ($rc, $result) = (0,'');

our $eminfo = '/usr/local/eminfo/eminfo';
our $filename = (split /\//, __FILE__)[-1];

# check eminfo
unless (-f $eminfo && -x $eminfo) {
  printf "{unknown}:{str}:{$eminfo not prepared.}";
  exit $state_unkn;
}

# read eminfo locale_def
our $localdir = '/usr/local/eminfo/share/locale/';
open my $fh, "$eminfo printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $localdir = $_;
  	last;
  }
}

# read plugin locale setting
our $locale = 'zh_CN.UTF-8';
open $fh, "$eminfo view $filename locale 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $locale = $_;
        last;
  }
  if(!defined $locale || $locale eq ''){
        open my $fh1, "$eminfo view default locale 2>&- |";
        if($fh1){
                while(<$fh1>){
                        chomp; $locale = $_;
                        last;
                }
        }
  }
}
if(!defined $locale || $locale eq ''){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'zh_CN' || $locale eq 'zh_CN.UTF-8' || $locale eq 'zh'){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'en_US' || $locale eq 'en_US.UTF-8' || $locale eq 'en'){
        $locale = 'en_US.UTF-8';
}else{
        $locale = 'zh_CN.UTF-8';
}
nl_putenv("LANGUAGE=$locale");

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $wearout_life_uplimit = 80;
open $fh, "$eminfo view $filename wearout_life_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $wearout_life_uplimit = $_;
  	last;
  }
}
$wearout_life_uplimit = 80 if $wearout_life_uplimit =~ /\D/;

our $wear_leveling_uplimit = 80;
open $fh, "$eminfo view $filename wear_leveling_uplimit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $wear_leveling_uplimit = $_;
  	last;
  }
}
$wear_leveling_uplimit = 80 if $wear_leveling_uplimit =~ /\D/;

our $Reallocated_Sector_Ct = 0;
open $fh, "$eminfo view $filename Reallocated_Sector_Ct 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $Reallocated_Sector_Ct = $_;
  	last;
  }
}
$Reallocated_Sector_Ct = 0 if $Reallocated_Sector_Ct =~ /\D/;

our $Program_Fail_Cnt_Total = 0;
open $fh, "$eminfo view $filename Program_Fail_Cnt_Total 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $Program_Fail_Cnt_Total = $_;
  	last;
  }
}
$Program_Fail_Cnt_Total = 0 if $Program_Fail_Cnt_Total =~ /\D/;

our $Erase_Fail_Count_Total = 0;
open $fh, "$eminfo view $filename Erase_Fail_Count_Total 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $Erase_Fail_Count_Total = $_;
  	last;
  }
}
$Erase_Fail_Count_Total = 0 if $Erase_Fail_Count_Total =~ /\D/;

our $Runtime_Bad_Block = 0;
open $fh, "$eminfo view $filename Runtime_Bad_Block 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $Runtime_Bad_Block = $_;
  	last;
  }
}
$Runtime_Bad_Block = 0 if $Runtime_Bad_Block =~ /\D/;

our $Data_Address_Mark_Errs = 0;
open $fh, "$eminfo view $filename Data_Address_Mark_Errs 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $Data_Address_Mark_Errs = $_;
  	last;
  }
}
$Data_Address_Mark_Errs = 0 if $Data_Address_Mark_Errs =~ /\D/;

our $ssd_dev = '';
open $fh, "$eminfo view $filename ssd_dev 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $ssd_dev = $_;
  	last;
  }
}
if (!defined $ssd_dev || $ssd_dev eq '') {
  printf _"{unknown}:{str}:{ssd device not defined in config.}";
  exit $state_unkn;
}
unless (-e $ssd_dev && -b $ssd_dev) {
  printf _"{unknown}:{str}:{device %s not exists or not block devices}",$ssd_dev;
  exit $state_unkn;
}

# Main body begin


# 1. collect ssd information
my @ssd_info = ();
my $os_bitmode = '64';
my $getconf = "/usr/bin/getconf";
if (-f $getconf && -x $getconf) {
  open my $fh, "$getconf LONG_BIT 2>&1 |";
  if ($fh) {
	while(<$fh>){
		chomp; s/\A\s*//; s/\s*\Z//g; $os_bitmode = $_;
	}
  }
}
my $smartctl = '/usr/sbin/smartctl';   # rpm dep: smartmontools >= 5.42
my $megacli = '/opt/MegaRAID/MegaCli/MegaCli64'; 
$megacli = '/opt/MegaRAID/MegaCli/MegaCli' if ($os_bitmode eq '32');
if (-f $megacli && -x $megacli && -f $smartctl && -x $smartctl) {
  my ($i,$raid_num) = (0,0);
  open my $fh, "$megacli -adpCount -NoLog 2>&- | ";
  if($fh){
        while(<$fh>){
                if (/\A\s*Controller Count:\s*(\d+)/i){
                        chomp; $raid_num = $1; 
                        last;
                }   
        } 
  }
  for($i=0;$i<$raid_num;$i++){
	my %ssd_single = (
		'pd_id'                 => 'X', # init
		'media_type'		=> '',  # Info: Solid State Device
		'inquiry_data'          => '',  # Info
		'position'		=> '',  # Info
		'raw_size'		=> '',  # Info
		'firmware_state'	=> '',  # Info
		'temperature'		=> '',  # Info
		'ssd_attr'		=> '',  
	);
	my %ssd_attr = (
		'Media_Wearout_Indicator'	=> '',
		'Wear_Leveling_Count'		=> '',
		'Reallocated_Sector_Ct'		=> '',
		'Program_Fail_Cnt_Total'	=> '',
		'Erase_Fail_Count_Total'	=> '',
		'Runtime_Bad_Block'		=> '',
		'Data_Address_Mark_Errs'	=> '',
	);
	my $pd_finish_flag = 0;
        open my $fh1, "$megacli -PDList -a$i -NoLog 2>&- | ";
	if($fh1){
		while(<$fh1>){
                	chomp; s/(\A\s+|\s+\Z)//g;
                        # if blank-line, check if single physical disk finished.
                        if(/\A\s*\Z/i){ 
                        	if($ssd_single{'pd_id'} ne 'X' && $pd_finish_flag == 0){
                               	   $pd_finish_flag = 1;
				   if (defined $ssd_single{'media_type'} && $ssd_single{'media_type'} =~ m/Solid State Device/i) {
					open my $fh2, "$smartctl -a -d sat+megaraid,$ssd_single{'pd_id'} $ssd_dev 2>&- | ";
					if($fh2){
						while(<$fh2>){
						  chomp; s/(\A\s+|\s+\Z)//g;
						  if(m/\A\s*\d+\s+Media_Wearout_Indicator\s*/i){
						     $ssd_attr{'Media_Wearout_Indicator'} = join(",",(split /\s+/)[3,-1]);
						     next;
						  }
						  if(m/\A\s*\d+\s+Wear_Leveling_Count\s*/i){
						     $ssd_attr{'Wear_Leveling_Count'} = join(",",(split /\s+/)[3,-1]);
						     next;
						  }
						  if(m/\A\s*\d+\s+Reallocated_Sector_Ct\s*/i){
						     $ssd_attr{'Reallocated_Sector_Ct'} = (split /\s+/)[-1];
						     next;
						  }
						  if(m/\A\s*\d+\s+Program_Fail_Cnt_Total\s*/i){
					   	     $ssd_attr{'Program_Fail_Cnt_Total'} = (split /\s+/)[-1];
						     next;
						  }
						  if(m/\A\s*\d+\s+Erase_Fail_Count_Total\s*/i){
						     $ssd_attr{'Erase_Fail_Count_Total'} = (split /\s+/)[-1];
						     next;
						  }
						  if(m/\A\s*\d+\s+Runtime_Bad_Block\s*/i){
						     $ssd_attr{'Runtime_Bad_Block'} = (split /\s+/)[-1];
						     next;
						  }
						  if(m/\A\s*\d+\s+Data_Address_Mark_Errs\s*/i){
						     $ssd_attr{'Data_Address_Mark_Errs'} = (split /\s+/)[-1];
						     next;
						  }
						}
						$ssd_single{'ssd_attr'} = \%ssd_attr;
					  }
                                          my %tmp_ssd_single = %ssd_single;
                                          push @ssd_info, \%tmp_ssd_single;
				   }
                                }else{
                                        $pd_finish_flag = 0;
                                        $ssd_single{'pd_id'} = 'X';
                                }
                                next;
                        }
			if(/\A\s*Device Id\s*:\s*(\d+)\s*\Z/i){
                               $ssd_single{'pd_id'} = $1;
                               next;
                        }       
			if(/\A\s*Media Type\s*:\s*(.+)\s*\Z/i){
				$ssd_single{'media_type'} = $1; 
				next;
			}   
			if(/\A\s*Drive\'s postion\s*:\s*(.+)\s*\Z/i){
				$ssd_single{'position'} = $1;
				next;
			}
			if(/\A\s*Inquiry Data\s*:\s*(.+?)\s*\Z/i){
				$ssd_single{'inquiry_data'} = $1;
				next;
			}       
			if(/\A\s*Raw Size\s*:\s*([\d.]+\s+(\w)+)\s*/i){
				$ssd_single{'raw_size'} = $1; 
				next;
			}   
			if(/\A\s*Firmware state\s*:\s*(.+)\s*\Z/i){
				$ssd_single{'firmware_state'} = $1;
				next;
			}  
			if(/\A\s*Drive Temperature\s*:\s*(.+)\s*\Z/i){
				$ssd_single{'temperature'} = $1;
				next;
			}
			next;
		}
	}
  }
} else {
  printf _"{unknown}:{str}:{ SSD Information UNKNOWN | util megacli/smartctl not prepared | %s or %s not prepared }",$megacli,$smartctl;
  exit $state_unkn;
}

# 2. check ssd information
my ($critnum,$warnnum,$total) = (0,0,0);
if (@ssd_info){
  $total = scalar @ssd_info;
  while(@ssd_info){
	my $ssd = shift @ssd_info;
	my ($critflag,$warnflag) = (0,0);
  	
	$result  = sprintf(_"PD ID: %d, Fireware State: %s ### ",$ssd->{'pd_id'},$ssd->{'firmware_state'});
	$result .= sprintf(_"PD Manufacturer: %s ### ",$ssd->{'inquiry_data'});
	$result .= sprintf(_"Media: %s, Raw Size: %s ### ",$ssd->{'media_type'},$ssd->{'raw_size'});
	$result .= sprintf(_"PD Position: %s, Temperature: %s ### ",$ssd->{'position'},$ssd->{'temperature'});
	$result .= sprintf(_"Device Name: %s ### ",$ssd_dev);
	$result .= " ### ";

	my $ssd_attr = $ssd->{'ssd_attr'};
	if (defined $ssd_attr && $ssd_attr ne '') {
		# 1. check ssd Data_Address_Mark_Errs 
        	if (defined $ssd_attr->{'Data_Address_Mark_Errs'} && $ssd_attr->{'Data_Address_Mark_Errs'} =~ m/\A\d+\Z/) {
                	if ($ssd_attr->{'Data_Address_Mark_Errs'} > $Data_Address_Mark_Errs) {
                        	$critflag ++;
                        	$result .= sprintf("<font color=red> Data_Address_Mark_Errs: %d </font> ### ",$ssd_attr->{'Data_Address_Mark_Errs'});
                	} else {
                        	$result .= sprintf("Data_Address_Mark_Errs: %d ### ",$ssd_attr->{'Data_Address_Mark_Errs'});
                	}
        	} else {
                	$result .= sprintf("Data_Address_Mark_Errs not detected. ### ");
        	}

		# 2. check ssd Erase_Fail_Count_Total 
        	if (defined $ssd_attr->{'Erase_Fail_Count_Total'} && $ssd_attr->{'Erase_Fail_Count_Total'} =~ m/\A\d+\Z/) {
                	if ($ssd_attr->{'Erase_Fail_Count_Total'} > $Erase_Fail_Count_Total) {
                        	$critflag ++;
                        	$result .= sprintf("<font color=red> Erase_Fail_Count_Total: %d </font> ### ",$ssd_attr->{'Erase_Fail_Count_Total'});
                	} else {
                        	$result .= sprintf("Erase_Fail_Count_Total: %d ### ",$ssd_attr->{'Erase_Fail_Count_Total'});
                	}
        	} else {
                	$result .= sprintf("Erase_Fail_Count_Total not detected. ### ");
        	}

		# 3. check ssd Program_Fail_Cnt_Total 
        	if (defined $ssd_attr->{'Program_Fail_Cnt_Total'} && $ssd_attr->{'Program_Fail_Cnt_Total'} =~ m/\A\d+\Z/) {
                	if ($ssd_attr->{'Program_Fail_Cnt_Total'} > $Program_Fail_Cnt_Total) {
                        	$critflag ++;
                        	$result .= sprintf("<font color=red> Program_Fail_Cnt_Total: %d </font> ### ",$ssd_attr->{'Program_Fail_Cnt_Total'});
                	} else {
                        	$result .= sprintf("Program_Fail_Cnt_Total: %d ### ",$ssd_attr->{'Program_Fail_Cnt_Total'});
                	}
        	} else {
                	$result .= sprintf("Program_Fail_Cnt_Total not detected. ### ");
        	}
		
		# 4. check ssd Reallocated_Sector_Ct
        	if (defined $ssd_attr->{'Reallocated_Sector_Ct'} && $ssd_attr->{'Reallocated_Sector_Ct'} =~ m/\A\d+\Z/) {
                	if ($ssd_attr->{'Reallocated_Sector_Ct'} > $Reallocated_Sector_Ct) {
                        	$critflag ++;
                        	$result .= sprintf("<font color=red> Reallocated_Sector_Ct: %d </font> ### ",$ssd_attr->{'Reallocated_Sector_Ct'});
                	} else {
                        	$result .= sprintf("Reallocated_Sector_Ct: %d ### ",$ssd_attr->{'Reallocated_Sector_Ct'});
                	}
        	} else {
                	$result .= sprintf("Reallocated_Sector_Ct not detected. ### ");
        	}

		# 5. check ssd Runtime_Bad_Block 
        	if (defined $ssd_attr->{'Runtime_Bad_Block'} && $ssd_attr->{'Runtime_Bad_Block'} =~ m/\A\d+\Z/) {
                	if ($ssd_attr->{'Runtime_Bad_Block'} > $Runtime_Bad_Block) {
                        	$critflag ++;
                        	$result .= sprintf("<font color=red> Runtime_Bad_Block: %d </font> ### ",$ssd_attr->{'Runtime_Bad_Block'});
                	} else {
                        	$result .= sprintf("Runtime_Bad_Block: %d ### ",$ssd_attr->{'Runtime_Bad_Block'});
                	}
        	} else {
                	$result .= sprintf("Runtime_Bad_Block not detected. ### ");
        	}
	} else {
		$result .= sprintf(_"SSD Attributes Details Not Detected, Maybe smartctl version < 5.42 ### ");
	}

	# 6. check ssd firmware_state
	if (defined $ssd->{'firmware_state'} && $ssd->{'firmware_state'} ne '') {
		if ($ssd->{'firmware_state'} =~ m/\bOnline\b/i) {
		    $result .= sprintf(_"SSD is Online, Fireware State: %s ### ",$ssd->{'firmware_state'});
		} else {
		    $critflag ++;
		    $result .= sprintf(_"<font color=red> SSD Missing? Fireware State: %s </font> ### ",$ssd->{'fireware_state'});
		}
	} else {
		$critflag ++;
		$result .= sprintf(_"<font color=red> SSD Missing? Fireware State Not Detected. </font> ### ");
	}

	# 7. check ssd Media_Wearout_Indicator
	if (defined $ssd_attr->{'Media_Wearout_Indicator'} && $ssd_attr->{'Media_Wearout_Indicator'} ne '') {
		my ($pct,$value) = (split /,/, $ssd_attr->{'Media_Wearout_Indicator'})[0,1];
		if ($pct =~ m/\A\d+\Z/) {
 			if ($pct < (100-$wearout_life_uplimit)) {
				$warnflag ++;
				$result .= sprintf(_"<font color=red> Meida Remain Life Percent: %d",$pct)."%";
				$result .= sprintf(_", Number: %s </font> ### ",$value);
			} else {
				$result .= sprintf(_"Meida Remain Life Percent: %d",$pct)."%";
				$result .= sprintf(_", Number: %s ### ",$value);
			}
		} else {
			$result .= sprintf(_"PCT Not Int, Media_Wearout_Indicator: %s ### ",$ssd_attr->{'Media_Wearout_Indicator'});
		}
	} else {
		$result .= sprintf(_"Media_Wearout_Indicator not detected. ### ");
	}

	# 8. check ssd Wear_Leveling_Count 
	if (defined $ssd_attr->{'Wear_Leveling_Count'} && $ssd_attr->{'Wear_Leveling_Count'} ne '') {
		my ($pct,$value) = (split /,/, $ssd_attr->{'Wear_Leveling_Count'})[0,1];
		if ($pct =~ m/\A\d+\Z/) {
 			if ($pct < (100-$wear_leveling_uplimit)) {
				$warnflag ++;
				$result .= sprintf(_"<font color=red> Wear Leveling Life Percent: %d",$pct)."%";
				$result .= sprintf(_", Count: %s </font> ### ",$value);
			} else {
				$result .= sprintf(_"Wear Leveling Life Percent: %d",$pct)."%";
				$result .= sprintf(_", Count: %s ### ",$value);
			}
		} else {
			$result .= sprintf(_"PCT Not Int, Wear_Leveling_Count: %s ### ",$ssd_attr->{'Wear_Leveling_Count'});
		}
	} else {
		$result .= sprintf(_"Wear_Leveling_Count not detected. ### ");
	}

	$result .= " ### ### ";

        $critnum ++ if $critflag > 0;
        $warnnum ++ if $warnflag > 0;
  }
} else {
  printf _"{unknown}:{str}:{ SSD Information UNKNOWN | collected nothing about ssd | collected nothing about ssd ### maybe raid controller card not recoginized or no ssd devices exist. }";
  exit $state_unkn;
}

# 3. prepare last output
if ($critnum > 0) {
  printf _"{crit}:{str}:{ SSD CRITICAL | %d/%d ssd healthy check critical | %s }",$critnum,$total,$result;
  exit $state_crit;
} elsif ($warnnum > 0) {
  printf _"{warn}:{str}:{ SSD WARNING | %d/%d ssd healthy check warn | %s }",$warnnum,$total,$result;
  exit $state_warn;
} else {
  printf _"{ok}:{str}:{ SSD OK | %d/%d ssd healthy check success | %s }",$total,$total,$result;
  exit $state_ok;
}
