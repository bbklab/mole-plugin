#!/usr/bin/env bash



BASE_DIR="/usr/local/eminfo/"
# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="mail_queue"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale mail_queue)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help}

Usage:  data 

Output:   {total} {local_num} {remote_num} {bounce_num}
Example:  11 3 8 0
EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=""    	### { succ | warn | crit | unkn | noop | notify }
TYPE=""    	### { str| file }
CONTENT=""      ### { strings | /path/to/result.file }

# Read plugin config value here
uplimit=$(read_eminfo_config mail_queue uplimit)

# if null return STATE_UNKN.

# if null or invalid set default.
[ -z "${uplimit}" -o ! -z "${uplimit//[0-9]}" ] && uplimit="300"

# check function here
check(){
  local total=0  ln=0  rn=0
  local ldir="/usr/local/eyou/mail/queue/Local/Info"
  local rdir="/usr/local/eyou/mail/queue/Remote/Info"
  local bdir="/usr/local/eyou/mail/queue/Bounce/Info"
  local mdir="/usr/local/eyou/mail/queue/Mlist/Info"
  local tdir="/usr/local/eyou/mail/queue/Tmp/Info"

  [ -d "${ldir}" -a -d "${rdir}" -a -d "${bdir}" ] || {
	EXIT_STATUS=${STATE_UNKN}
	LEVEL="unkn"
	TYPE="str"
	CONTENT="$(gettext "Mail Queue Directories Missing") | $(gettext "{Local/Remote/Bounce}/Info not directory")"
	return
  }

  ln=$(find ${ldir} -follow -type f 2>&-| wc -l)
  rn=$(find ${rdir} -follow -type f 2>&-| wc -l)
  bn=$(find ${bdir} -follow -type f 2>&-| wc -l)
  mn=$(find ${mdir} -follow -type f 2>&-| wc -l)
  tn=$(find ${tdir} -follow -type f 2>&-| wc -l)
  total=$(echo "${ln}+${rn}+${bn}+${mn}" | bc 2>&-)

  # output data and exit if MODE=1 
  [ "${MODE}" == "1" ] && {
	echo "${total} ${ln} ${rn} ${bn}"
	exit
  }

  if [ ! -z "${total}" -a -z "${total//[0-9]}" ]; then
 	[ "$( echo "${total} >= ${uplimit}" | bc 2>&- )" == "1" ] && {
		EXIT_STATUS="${STATE_CRIT}"
		LEVEL="crit"
		TYPE="str"
		CONTENT="$(gettext "Queuing Letters Number CRITICAL") | $(eval_gettext "\${total} letters") | $(eval_gettext "letters in local: [\${ln}]") ### $(eval_gettext "letters in remote: [\${rn}]") ### $(eval_gettext "letters in bounce: [\${bn}]") ### $(eval_gettext "letters in mlist: [\${mn}]") ### $(eval_gettext "letters in tmp: [\${tn}]") ### "
	} || {
		EXIT_STATUS="${STATE_SUCC}"
		LEVEL="succ"
		TYPE="str"
		CONTENT="$(gettext "Queuing Letters Number OK") | $(eval_gettext "\${total} letters") | $(eval_gettext "letters in local: [\${ln}]") ### $(eval_gettext "letters in remote: [\${rn}]") ### $(eval_gettext "letters in bounce: [\${bn}]") ### $(eval_gettext "letters in mlist: [\${mn}]") ### $(eval_gettext "letters in tmp: [\${tn}]") ### "
	}
  else
	EXIT_STATUS=${STATE_UNKN}
	LEVEL="unkn"
	TYPE="str"
	CONTENT="$(gettext "Queuing Letters Number Unknown") | $(eval_gettext "total: [${total}] not numberic") | $(eval_gettext "letters in local: [\${ln}]") ### $(eval_gettext "letters in remote: [\${rn}]") ### $(eval_gettext "letters in bounce: [\${bn}]") ### $(eval_gettext "letters in mlist: [\${mn}]") ### $(eval_gettext "letters in tmp: [\${tn}]") ### "
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
