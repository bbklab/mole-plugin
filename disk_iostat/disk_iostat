#!/usr/bin/env bash

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" ] && [ -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="disk_iostat"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale disk_iostat)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] || [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help}

Usage	 :   data

Output   :   {devpath} -> {mpoint} : %{util}
Example  :   
/dev/sda1 -> /boot : 0.006%
/dev/mapper/VolGroup-lv_root -> / : 81.08%
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { succ | warn | crit | unkn | noop | notify }
TYPE=    	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	dev_list=$2
else
	dev_list=$( read_mole_config disk_iostat dev_list )
	util_uplimit=$( read_mole_config disk_iostat util_uplimit )
fi

# if null return STATE_UNKN.

# if null or invalid set default.

# get_iopp function here
# Note: no returned stuff
# Note: result saved in ${iopp_write_details} and ${iopp_read_details}
get_iopp() {
  # collect iopp data if avaliable
  local iopp="${UTIL_IOPP}" 
  if [ -f "${iopp}" ] && [ -x "${iopp}" ]; then
	local iopp_top=10
	local iopp_data=$( ${iopp} -k 1 11 2>&- )
	if [ -n "${iopp_data}" ]; then
		local iopp_details=$( (echo -e "${iopp_data}" |\
					awk '($1~/^[ \t]*[0-9]+/) { i=sprintf("%s (%s)",$NF,$1); \
						write[i]+=$7; read[i]+=$6} \
						END{ for(w in write) {printf("write: %d,%s\n",write[w]/10,w)} \
						     for(r in read)  {printf("read: %d,%s\n",read[r]/10,r)} }'
					) 2>&- )
		if [ -n "${iopp_details}" ]; then
			iopp_write_details=$( ( echo -e "${iopp_details}"  |\
					awk -F "," '(/^write: /) {gsub("write: ", "", $0); printf("%dKB/S %s\n",$1,$2);}' |\
					sort -rn | head -n "${iopp_top}"
					) 2>&- )
			iopp_read_details=$( ( echo -e "${iopp_details}"  |\
					awk -F "," '(/^read: /) {gsub("read: ", "", $0); printf("%dKB/S %s\n",$1,$2);}' |\
					sort -rn | head -n "${iopp_top}"
					) 2>&- )
		fi
	fi
  fi
}

# check function here
check(){

  if [ -z "${dev_list}" ]; then
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "config {dev_list} empty, nothing to do.")";
	return
  fi

  local WARN_LIMIT= CRIT_LIMIT=
  if is_multi_threshold "${util_uplimit}"; then
	local ARRY_LIMIT=( $(seperate_multi_threshold "${util_uplimit}" 2>&- ) )
	WARN_LIMIT=${ARRY_LIMIT[0]}
	CRIT_LIMIT=${ARRY_LIMIT[1]}
	if is_int "${WARN_LIMIT}" && is_between "${WARN_LIMIT}" "0" "100"; then
		:
	else
        	EXIT_STATUS=${STATE_UNKN};
        	LEVEL="unkn";
        	TYPE="str";
        	CONTENT="$(eval_gettext "util_uplimit [\${util_uplimit}] warn threshold should be int and between 0-100.")";
        	return
	fi
	if is_int "${CRIT_LIMIT}" && is_between "${CRIT_LIMIT}" "0" "100"; then
		:
	else
        	EXIT_STATUS=${STATE_UNKN};
        	LEVEL="unkn";
        	TYPE="str";
        	CONTENT="$(eval_gettext "util_uplimit [\${util_uplimit}] crit threshold should be int and between 0-100.")";
        	return
	fi
	if [ "$(echo "${WARN_LIMIT} >= ${CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
        	EXIT_STATUS=${STATE_UNKN};
        	LEVEL="unkn";
        	TYPE="str";
        	CONTENT="$(eval_gettext "util_uplimit [\${util_uplimit}] warn threshold must lower than crit threshold.")";
        	return
	fi
  else
  	if is_int "${util_uplimit}" && is_between "${util_uplimit}" "0" "100"; then
        	CRIT_LIMIT="${util_uplimit}"		# set single threshold as crit-threshold
  	else
        	EXIT_STATUS=${STATE_UNKN};
        	LEVEL="unkn";
        	TYPE="str";
        	CONTENT="$(eval_gettext "util_uplimit [\${util_uplimit}] should be int and between 0-100.")";
        	return
  	fi 
  fi


  local iostat="${UTIL_IOSTAT}"
  if [ -f "${iostat}" ] && [ -x "${iostat}" ]; then
	:
  else
	iostat="/usr/bin/iostat"
  fi
  if [ -f "${iostat}" ] && [ -x "${iostat}" ]; then
	:
  else
	iostat="/usr/local/bin/iostat"
  fi
  
  if [ ! -f "${iostat}" ] || [ ! -x "${iostat}" ]; then
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "Util: [/usr/bin/iostat] not prepared.")";
	return
  fi

  local mtabfile="/etc/mtab"

  # collect data
  local iostat_data=$( ${iostat} -d -x ${dev_list} 1 11 2>&1 )
  
  oknum=0 critnum=0 warnnum=0 unknnum=0 result=
  for dev in ${dev_list}
  do
	((total++))
	# skip device that not exists
	if [ ! -e "${dev}" ]; then
		((warnnum++))
		result="${result} $(html_red "$(eval_gettext "\${dev} not exist")") ### "
		continue
	fi

	if [ -L "${dev}" ]; then	# in case of lvm
		dev_tmpname="$(/bin/readlink ${dev} 2>&-)"
		devname="${dev_tmpname##*/}"
	else
		devname="${dev##*/}"
	fi

	util=$( echo -e "${iostat_data}" | /bin/awk 'BEGIN{i=0;x=0} ($1~/^'${devname}'\>/){i++} {if(i>1 && $1~/^'${devname}'\>/){x+=$NF}} END{print x/10}' 2>&- )
	if [ -z "${util}" ] || [ ! -z "${util//[0-9.]}" ]; then
		util=0
	fi

	mpoint=$( /bin/awk -v d="${dev}" '($1==d){print $2;exit;}' "${mtabfile}" 2>&- )
	if [ -z "${mpoint}" ]; then
		((warnnum++))
		result="${result} $(html_red "$(eval_gettext "\${dev} not mounted")" ) ###"
		continue
	fi

  	# output data and exit if MODE=1
  	[ "${MODE}" == "1" ] && {
		echo "${dev} -> ${mpoint} : ${util}%"
		continue
  	}

	if [ -n "${CRIT_LIMIT}" ] && [ "$(echo  "${util} >= ${CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
		((critnum++))
		result="${result} $(html_red "$(eval_gettext "\${dev} (\${mpoint}) io busy percent: [\${util}%] >= uplimit: [\${CRIT_LIMIT}%]")" ) ###"
  	elif [ -n "${WARN_LIMIT}" ] && [ "$(echo  "${util} >= ${WARN_LIMIT}" | bc 2>&-)" == "1" ]; then
		((warnnum++))
		result="${result} $(html_red "$(eval_gettext "\${dev} (\${mpoint}) io busy percent: [\${util}%] >= uplimit: [\${WARN_LIMIT}%]")" ) ###"
  	else
		((oknum++))
		result="${result} $(eval_gettext "\${dev} (\${mpoint}) io busy percent: [\${util}%]") ###"
  	fi
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit

  if [ ${critnum} -gt 0 ]; then
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="crit";
	TYPE="str";

	iopp_write_details=
	iopp_read_details=
	get_iopp;
	if [ -n "${iopp_write_details}" ] && [ -n "${iopp_read_details}" ]; then
		iopp_details=$( (echo -e "$(gettext "write")\n${iopp_write_details}\n$(gettext "read")\n${iopp_read_details}\n"|sed -e 's/$/###/g'|tr -d '\n') 2>&- )
		CONTENT="$(gettext "IOStat Check CRITICAL") | $(eval_gettext "\${critnum}/\${total} check critical.") | ${result} ### ### $(gettext "disk read/write top:") ### ${iopp_details} "
	else
		CONTENT="$(gettext "IOStat Check CRITICAL") | $(eval_gettext "\${critnum}/\${total} check critical.") | ${result} "
	fi
  elif [ ${warnnum} -gt 0 ]; then
	EXIT_STATUS=${STATE_WARN};
	LEVEL="warn";
	TYPE="str";

	iopp_write_details=
	iopp_read_details=
	get_iopp;
	if [ -n "${iopp_write_details}" ] && [ -n "${iopp_read_details}" ]; then
		iopp_details=$( (echo -e "$(gettext "write")\n${iopp_write_details}\n$(gettext "read")\n${iopp_read_details}\n"|sed -e 's/$/###/g'|tr -d '\n') 2>&- )
		CONTENT="$(gettext "IOStat Check WARNING") | $(eval_gettext "\${warnnum}/\${total} check warning.") | ${result} ### ### $(gettext "disk read/write top:") ### ${iopp_details} "
	else
		CONTENT="$(gettext "IOStat Check WARNING") | $(eval_gettext "\${warnnum}/\${total} check warning.") | ${result} "
	fi
  elif [ ${unknnum} -gt 0 ]; then
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "IOStat Check UNKNOWN") | $(eval_gettext "\${unknnum}/\${total} check unknown.") | ${result}"
  else
	EXIT_STATUS=${STATE_SUCC};
	LEVEL="succ";
	TYPE="str";
	CONTENT="$(gettext "IOStat Cehck OK") | $(eval_gettext "\${oknum}/\${total} check success.") | ${result}"
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
