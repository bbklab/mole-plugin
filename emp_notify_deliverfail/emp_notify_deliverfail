#!/usr/bin/env perl

our $basedir = '/usr/local/esop/agent/mole';
our $mole = "$basedir/sbin/mole";

BEGIN {
  my $basedir = '/usr/local/esop/agent/mole';
  my $pllib_dir = "$basedir/opt/plmods";
  my @incs = (    # set additional path
        # rhel5 32bit
        $pllib_dir.'/lib/perl5/',
        $pllib_dir.'/lib/perl5/5.8.8/',
        $pllib_dir.'/lib/perl5/site_perl/',
        $pllib_dir.'/lib/perl5/site_perl/5.8.8/',
        # rhel5 64bit
        $pllib_dir.'/lib64/perl5/',
        $pllib_dir.'/lib64/perl5/5.8.8/',
        $pllib_dir.'/lib64/perl5/site_perl/',
        $pllib_dir.'/lib64/perl5/site_perl/5.8.8/',
        # rhel6 32bit
        $pllib_dir.'/lib/perl5/',
	$pllib_dir.'/share/perl5/',
        # rhel6 64bit
        $pllib_dir.'/lib64/perl5/',
	$pllib_dir.'/share/perl5/',
  );

  push @INC, @incs;
};

use warnings;
use strict;
use utf8;
use Locale::Messages qw (textdomain bindtextdomain gettext nl_putenv :locale_h :libintl_h);
use POSIX qw (setlocale LC_ALL);
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';


# return codes
our ($state_succ,$state_warn,$state_crit,$state_unkn,$state_noop,$state_notify) = (0,1,2,3,4,5);

# return stuff
our ($rc, $result) = (0,'');

our $filename = (split /\//, __FILE__)[-1];
our $tracefile = "/var/tmp/$filename.trace";

# check mole 
unless (-f $mole && -x $mole) {
  printf "{unkn}:{str}:{$mole not prepared.}";
  exit $state_unkn;
}

# read mole locale_def
our $localdir = "$basedir/share/locale/";
open my $fh, "$mole printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $localdir = $_; 
        last;
  }
}

# read plugin locale setting
our $locale = 'zh_CN.UTF-8';
open $fh, "$mole view $filename locale 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $locale = $_;
        last;
  }
  if(!defined $locale || $locale eq ''){
        open my $fh1, "$mole view default locale 2>&- |";
        if($fh1){
                while(<$fh1>){
                        chomp; $locale = $_;
                        last;
                }
        }
  }
}
if(!defined $locale || $locale eq ''){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'zh_CN' || $locale eq 'zh_CN.UTF-8' || $locale eq 'zh'){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'en_US' || $locale eq 'en_US.UTF-8' || $locale eq 'en'){
        $locale = 'en_US.UTF-8';
}else{
        $locale = 'zh_CN.UTF-8';
}
setlocale(LC_ALL,$locale);
nl_putenv("LANGUAGE=$locale");
nl_putenv("LANG=$locale");

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $deliverfile = '/usr/local/eyou/mail/log/deliver_mail.log';
open $fh, "$mole view $filename deliver_logfile 2>&- |";
if($fh){
  while(<$fh>){
	chomp; $deliverfile = $_;
	last;
  }
}

our $mole_basedir = $basedir;
open $fh, "$mole basedir 2>&- |";
if($fh){
  while(<$fh>){
	chomp; $mole_basedir = $_;
	last;
  }
}

our @attendlst = ();
our $attendlst = '';
open $fh, "$mole view $filename attention_list 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $attendlst = $_;
	last;
  }
}
if (defined $attendlst && $attendlst ne ''){
  $attendlst =~ s/\A\s*file://;
  unless(-f $attendlst) {
	if (-f $mole_basedir.'/'.$attendlst) {
  		$attendlst = $mole_basedir.'/'.$attendlst;
	}
  } 
  if (-f $attendlst) {
	if(open FH, $attendlst) {
		while (<FH>) {
			chomp;
			next if (/\A\s*\Z/ || /\A\s*#/ || /\A\s*;/);
			push @attendlst,  split /\s+/;
		}
		close FH;
	}
  } else {
	@attendlst = split /\s+/, $attendlst;
  }
}

# define dev, inode, position for {deliverfile}
our ($dev, $inode, $position) = ();

# define savepos
sub savepos {
  my ($deliverfile, $position, $tracefile) = @_;
  if (open FH, ">$tracefile") {
  	($dev, $inode) = (stat $deliverfile)[0,1];
	print FH "$dev $inode $position";
	close FH;
  } else {
	return undef;
  }
}

# define loadpos
sub loadpos {
  my $tracefile = shift;
  if (open FH, "<$tracefile") {
	while (<FH>) {
  		($dev, $inode, $position) = (split /\s+/)[0,1,2];
		last;
	}
	close FH;
  }
}

# Main body begin
unless (-f $deliverfile) {
  printf _"{noop}:{str}:{ deliver log file [%s] not exists. }",$deliverfile;
  exit $state_noop;
}
# 1. load position from tracefile
loadpos ($tracefile);
unless ($dev && $inode && $position) {  # maybe first running
  savepos ($deliverfile,0,$tracefile);	# save position again
  loadpos ($tracefile);			# load position again
}
# 2. read file dev,inode, checking rotated or not ?
my ($nowdev, $nowinode) = (stat $deliverfile)[0,1];
if ($dev ne $nowdev || $inode ne $nowinode) {	# maybe deliverfile logrotated
  savepos ($deliverfile,0,$tracefile);		# save position again
  loadpos ($tracefile);				# load position again
}
# 3. open authpri file and goto last position directly
unless (open FH, "<", $deliverfile) {
  printf _"{noop}:{str}:{ open deliver log file [%s] failed. }",$deliverfile;
  exit $state_noop;
}
seek (FH,$position,0);				# directly goto last position
# 4. scan authpri file record
my @record = ();
my $wholeline = '';
while (<FH>) {
  chomp;
  unless (m/\A\-/) {				# if not seperated line:  ----
	$wholeline .= $_;			# add $_ into $wholeline
	next;
  } else { 					# process $wholeline now
  	if ($wholeline =~ m/ result:\[0\] /i) {			# skip success
		$wholeline = '';
		next;
	}
  	unless ($wholeline =~ m/ is_finished:\[1\] /i) {	# skip unfinished
		$wholeline = '';
		next;
	}
  	if ($wholeline =~ m/\A.*from_digest:\[(.+?)\] to_digest:\[(.+?)\] subject_digest:\[(.+?)\] size:\[(.+?)\] .*module_type:\[(.+?)\] .*response:\[(.+?)\] client_ip:.* log_time:\[(.+?)\].*\Z/i) {
		my ($from,$to,$subject,$size,$mtype,$result,$time) = ($1,$2,$3,$4,$5,$6,$7);
		my ($sec,$min,$hour,$day,$mon,$year) = localtime($time);
		$time = sprintf("%d-%d-%d %d:%d:%d",$year+1900,$mon+1,$day,$hour,$min,$sec);
		if (grep(/\A\Q$from\E\Z/i, @attendlst) || grep(/\A\Q$to\E\Z/i, @attendlst)) {
			my $record = sprintf(_"%s [%s] -> [%s] ### ",$time,$from,$to);
			$record .= sprintf(_"subject: [%s] ### ",$subject);
			$record .= sprintf(_"size: [%d] ### ",$size);
			$record .= sprintf(_"type: [%s] ### ",$mtype);
			$record .= sprintf(_"<font color=red>result: [%s]</font> ### ",$result);
			$record .= "###";
			push @record, $record;
		}
  	}
	$wholeline = '';
  }
}
# 5. read nower position and save again.
my $newpos = tell(FH);
savepos ($deliverfile, $newpos, $tracefile);
close FH;
# 6. prepare last output
my $number = @record;
if ($number == 0) {
  printf _"{noop}:{str}:{no deliver fail event found}";
  exit $state_noop;
} else {
  while (@record) {
  	$result .= shift @record;
  }
  $result = sprintf(_"%d deliver fail event | %d deliver fail event | ",$number,$number) . $result;
  print "{notify}:{str}:{$result}";
  exit $state_notify;
}
