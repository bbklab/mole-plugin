#!/usr/bin/env bash

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else        
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="disk_fs"
else        
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi

# === SET GLOBAL LOCALE
glocale=$(get_locale disk_fs)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {fs|io}  {ext3 ext4 ...}

Usage:	 data  fs|io  "ext3 ext4"

Output:   
FS_Stat: {device} {fstype} {stat}
Disk_IO: {device} {fstype} {success|warn} {io-result}

FS_Stat: /dev/mapper/VolGroup-lv_root ext4 clean
FS_Stat: /dev/sda1 ext4 clean
Disk_IO: / ext4 success
Disk_IO: /boot ext4 success
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { succ | warn | crit | unkn | noop | notify }
TYPE=   	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	action="$2"
	fstype="$3"
else
	fstype=$( read_mole_config disk_fs fstype )
	exclude=$( read_mole_config disk_fs exclude )
fi

# if null return STATE_UNKN.

# if null or invalid set default.
[ -z "${fstype}" ] && fstype="ext2 ext3 ext4"

# check function here
check(){

  [ -f "/sbin/tune2fs" -a -x "/sbin/tune2fs" ] || {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "Util: [/sbin/tune2fs] not prepared.")";
        return
  }

  [ -f "/etc/mtab" -a -s "/etc/mtab" ] || {
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "File: [/etc/mtab] not prepared.")";
	return
  }

  local result= mpoint= warnnum=0  unknnum=0

  result="$(eval_gettext "FSTYPE: [\${fstype}]") ### ###"
  result="${result} ### $(gettext "FileSystem Stat") ### "
  for t in `echo "${fstype}"`
  do
	devices=$(awk '($3~/\<'${t}'\>/){print $1}' "/etc/mtab" 2>&-|tr '\n' ' ')
  	for d in `echo "${devices}"`
  	do
		if [ "$(echo -e "${exclude}"|grep -E -o -w "${d}")" != "" ]; then
			result="${result} $(eval_gettext "(\${t}) device \${d} SKIP") ### "
			continue
		fi

		stat=$(/sbin/tune2fs -l "${d}" 2>&- | awk -F: '($1~/Filesystem state/){gsub(" ","",$2);print $2;exit}')
		# output data and exit if MODE=1
		[ "${MODE}" == "1" -a "${action}" == "fs" ] && {
			echo "FS_Stat: ${d} ${t} ${stat}"
			continue
		}

		if [ -z "${stat}" ]; then
			result="${result} $(eval_gettext "(\${t}) \${d} -> unknown") ### ";
			((unknnum++))
		elif [ "${stat}" == "clean" ]; then
			result="${result} $(eval_gettext "(\${t}) \${d} -> clean") ###"
		else
			((warnnum++))
			result="${result} $(html_red "$(eval_gettext "(\${t}) \${d} -> \${stat}")") ###"
		fi
  	done
  done

  result="${result} ### $(gettext "IO Test") ###"
  for t in `echo "${fstype}"`
  do  
        mpoint=$(awk '($3~/\<'${t}'\>/){print $2}' "/etc/mtab" 2>&-|tr '\n' ' ')
        for m in `echo "${mpoint}"`
        do  
		if [ "$(echo -e "${exclude}"|grep -E -o -w "${m}")" != "" ]; then
			result="${result} $(eval_gettext "(\${t}) mount point \${m} SKIP") ### "
			continue
		fi

                ioerr=$(/bin/touch "${m}/.disk_fs.iotest" 2>&1 1>/dev/null)
  		rc=$?
                # output data and exit if MODE=1
                [ "${MODE}" == "1" -a "${action}" == "io" ] && {
			if [ "${rc}" == "0" ]; then
                        	echo "Disk_IO: ${m} ${t} success"
			else
				((warnnum++))
				echo "Disk_IO: ${m} ${t} warn \"${ioerr}\""
			fi
                        continue
                }   
                if [ "${rc}" == "0" ]; then
                        result="${result} $(eval_gettext "(\${t}) \${m} -> iotest Success") ### "
                else
			ioerr=$(echo -e "${ioerr}" | tr -d '\r\n')
                        result="${result} $(html_red "$(eval_gettext "(\${t}) \${m} -> iotest warning: \${ioerr}")") ### "
			((warnnum++))
                fi  
        done
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit;

  [ "${warnnum}" -gt "0" ] && {
	EXIT_STATUS=${STATE_WARN};
	LEVEL="warn";
	TYPE="str";
	CONTENT="$(gettext "IO/FS Check WARNING") | $(eval_gettext "\${warnnum} check failed") | ${result} "
  } || {
	[ "${unknnum}" -gt "0" ] && {
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(gettext "IO/FS Check UNKNOWN") | $(eval_gettext "\${unknnum} check unknown") | ${result} "
	} || {
		EXIT_STATUS="${STATE_SUCC}"
		LEVEL="succ"
		TYPE="str"
		CONTENT="$(gettext "IO/FS Check OK") | $(gettext "fsstat,iotest check success") | ${result} "
	}
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
