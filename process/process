#!/usr/bin/env bash



BASE_DIR="/usr/local/eminfo/"
# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unknown}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unknown}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unknown}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="process"
else    
        echo -en "{unknown}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale process)
if [ -z "${glocale}" ]; then
        export LANG="${LANG}"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {pslist_file}

Usage    :   data   /tmp/process.lst

Output   :   {flag}  {psname}:{running_num}:{min_num}
{flag}   :   0 OK, 1 FAIL

1  syslogd:0:1
0  rsyslogd:1:1
1  mailv4_mysql:0:1
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=          ### { ok | warn | crit | unknown | noop }
TYPE=           ### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
        pslist_file="$2"
else
	pslist_file=$(read_eminfo_config process pslist_file)
fi

# if null return STATE_UNKNOWN.
if [ -z "${pslist_file}" ]; then
	EXIT_STATUS=${STATE_UNKNOWN}
        LEVEL="unknown"
        TYPE="str"
        CONTENT="$(gettext "Need pslist_file.")"
        echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
        exit ${EXIT_STATUS}
else 
	if [ -f "/${pslist_file##*file:}" -a -s "/${pslist_file##*file:}" ]; then
		pslist_file="/${pslist_file##*file:}"
        elif [ -f "${BASE_DIR}/${pslist_file##*file:}" -a -s "${BASE_DIR}/${pslist_file##*file:}" ]; then
                pslist_file="${BASE_DIR}/${pslist_file##*file:}"
        else
                EXIT_STATUS=${STATE_UNKNOWN}
                LEVEL="unknown"
                TYPE="str"
                CONTENT="$(eval_gettext "pslist_file [\${pslist_file}] not exist or empty.")"
                echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
                exit ${EXIT_STATUS}
        fi
fi

# if null or invalid set default.

# check function here.
check() {
  local errnum=0 total=0 result=

  local ps_output=$( /bin/ps -eo cmd= 2>&1 )
  /bin/awk '($0!~/^[ \t]*#/ && $0!~/^[ \t]*$/)' "${pslist_file}" > /tmp/.check_process.eminfo 2>&-
  while read -a line
  do
	[ "${#line[@]}" != "3" ] && continue				### check filed number
	local pname="${line[0]}" pnum="${line[1]}" pattern="${line[2]}"
	[ -z "${pname}" -o -z "${pattern}" ] && continue		### check null
	[ -z "${pnum}" -o ! -z "${pnum//[0-9]}" ] && local pnum=1	### check null/invalid

	((total++)) 
	result="${result} $(eval_gettext "psname=[\${pname}], psnum=[\${pnum}], srchregx=[\${pattern}]") ### "
	local psnum=$(echo -e "${ps_output}" | grep -E -o -x -c "${pattern}")
	if [ "$(echo "${psnum} < ${pnum}" | bc 2>&-)" == "1" ]; then
		((errnum++))
		result="${result} $(html_red "$(eval_gettext "CRIT:  [\${pname}] (\${psnum}) < (\${pnum}).")") ### ### "
		if [ "${MODE}" == "1" ]; then
			echo "1  ${pname}:${psnum}:${pnum}"
		fi
	else
		result="${result} $(eval_gettext "OK:  [\${pname}] (\${psnum}) >= (\${pnum}).") ### ### "
		if [ "${MODE}" == "1" ]; then
			echo "0  ${pname}:${psnum}:${pnum}"
		fi
	fi
  done < /tmp/.check_process.eminfo

  # exit if MODE=1  
  [ "${MODE}" == "1" ] && exit;

  [ "${errnum}" != "0" ] && {
        EXIT_STATUS=${STATE_CRITICAL};
        LEVEL="crit";
        TYPE="str";
        CONTENT="$(gettext "Check Process CRITICAL") | $(eval_gettext "\${errnum}/\${total} Process Alert") | ${result}"
  } || {
        EXIT_STATUS="${STATE_OK}"
        LEVEL="ok"
        TYPE="str"
        CONTENT="$(gettext "Check Process OK") | $(eval_gettext "\${total}/\${total} Process OK") | ${result}"
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
