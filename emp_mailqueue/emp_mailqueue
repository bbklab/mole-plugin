#!/usr/bin/env bash

VERSION="0.4.fix1"
if [ "$1" == "version" ]; then
	echo -en "${VERSION}"
	exit 0
fi

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" ] && [ -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="emp_mailqueue"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale emp_mailqueue)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] && [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help}

Usage:  data 

Output:   {total} {local_num} {remote_num} {bounce_num}
Example:  11 3 8 0
EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=""    	### { succ | warn | crit | unkn | noop | notify }
TYPE=""    	### { str| file }
CONTENT=""      ### { strings | /path/to/result.file }

# Read plugin config value here
uplimit=$(read_mole_config emp_mailqueue uplimit)

# if null return STATE_UNKN.

# if null or invalid set default.

# check function here
check(){
  local total=0  ln=0  rn=0
  local ldir="/usr/local/eyou/mail/queue/Local/Info"
  local rdir="/usr/local/eyou/mail/queue/Remote/Info"
  local bdir="/usr/local/eyou/mail/queue/Bounce/Info"
  local mdir="/usr/local/eyou/mail/queue/Mlist/Info"
  local tdir="/usr/local/eyou/mail/queue/Tmp/Info"

  local WARN_LIMIT= CRIT_LIMIT=
  if is_multi_threshold "${uplimit}"; then
	if check_multi_threshold "${uplimit}" 1; then
		local ARRY_LIMIT=( $(seperate_multi_threshold "${uplimit}" 2>&- ) )
		WARN_LIMIT=${ARRY_LIMIT[0]}
		CRIT_LIMIT=${ARRY_LIMIT[1]}
		if [ "$(echo "${WARN_LIMIT} >= ${CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
			EXIT_STATUS=${STATE_UNKN};
        		LEVEL="unkn";
        		TYPE="str";
        		CONTENT="$(eval_gettext "uplimit [\${uplimit}] warn threshold must lower than crit threshold.")"
        		return
		fi
	else
        	EXIT_STATUS=${STATE_UNKN};
        	LEVEL="unkn";
        	TYPE="str";
        	CONTENT="$(eval_gettext "uplimit [\${uplimit}] is invalid multi threshold on int check.")"
        	return
	fi
  else
  	if is_int "${uplimit}"; then
        	CRIT_LIMIT=${uplimit}		# set single threshold as crit-threshold	
  	else
        	EXIT_STATUS=${STATE_UNKN};
        	LEVEL="unkn";
        	TYPE="str";
        	CONTENT="$(eval_gettext "uplimit [\${uplimit}] should be int.")";
        	return
  	fi 
  fi

  if [ -d "${ldir}" ] && [ -d "${rdir}" ] && [ -d "${bdir}" ]; then
	:
  else
	EXIT_STATUS=${STATE_UNKN}
	LEVEL="unkn"
	TYPE="str"
	CONTENT="$(gettext "Mail Queue Directories Missing") | $(gettext "{Local/Remote/Bounce}/Info not directory")"
	return
  fi

  ln=$( (find ${ldir}/[0-3][0-9] -follow -type f 2>&-| wc -l) 2>&- )
  rn=$( (find ${rdir}/[0-3][0-9] -follow -type f 2>&-| wc -l) 2>&- )
  bn=$( (find ${bdir}/[0-3][0-9] -follow -type f 2>&-| wc -l) 2>&- )
  mn=$( (find ${mdir}/[0-3][0-9] -follow -type f 2>&-| wc -l) 2>&- )
  tn=$( (find ${tdir}/[0-3][0-9] -follow -type f 2>&-| wc -l) 2>&- )
  total=$(echo "${ln}+${rn}+${bn}+${mn}" | bc 2>&-)

  # output data and exit if MODE=1 
  [ "${MODE}" == "1" ] && {
	echo "${total} ${ln} ${rn} ${bn}"
	exit
  }

  if is_int "${total}"; then
 	if [ -n "${CRIT_LIMIT}" ] && [ "$( echo "${total} >= ${CRIT_LIMIT}" | bc 2>&- )" == "1" ]; then
		EXIT_STATUS="${STATE_CRIT}"
		LEVEL="crit"
		TYPE="str"
		CONTENT="$(gettext "Queuing Letters Number CRITICAL") | $(eval_gettext "\${total} letters >= \${CRIT_LIMIT}") | $(html_red "$(eval_gettext "\${total} letters >= \${CRIT_LIMIT}")") ### ### $(eval_gettext "letters in local: [\${ln}]") ### $(eval_gettext "letters in remote: [\${rn}]") ### $(eval_gettext "letters in bounce: [\${bn}]") ### $(eval_gettext "letters in mlist: [\${mn}]") ### $(eval_gettext "letters in tmp: [\${tn}]") ### "
	elif [ -n "${WARN_LIMIT}" ] && [ "$( echo "${total} >= ${WARN_LIMIT}" | bc 2>&- )" == "1" ]; then
		EXIT_STATUS="${STATE_WARN}"
		LEVEL="warn"
		TYPE="str"
		CONTENT="$(gettext "Queuing Letters Number WARNING") | $(eval_gettext "\${total} letters >= \${WARN_LIMIT}") | $(html_red "$(eval_gettext "\${total} letters >= \${WARN_LIMIT}")") ### ### $(eval_gettext "letters in local: [\${ln}]") ### $(eval_gettext "letters in remote: [\${rn}]") ### $(eval_gettext "letters in bounce: [\${bn}]") ### $(eval_gettext "letters in mlist: [\${mn}]") ### $(eval_gettext "letters in tmp: [\${tn}]") ### "
	else
		EXIT_STATUS="${STATE_SUCC}"
		LEVEL="succ"
		TYPE="str"
		CONTENT="$(gettext "Queuing Letters Number OK") | $(eval_gettext "\${total} letters") | $(eval_gettext "\${total} letters") ### ### $(eval_gettext "letters in local: [\${ln}]") ### $(eval_gettext "letters in remote: [\${rn}]") ### $(eval_gettext "letters in bounce: [\${bn}]") ### $(eval_gettext "letters in mlist: [\${mn}]") ### $(eval_gettext "letters in tmp: [\${tn}]") ### "
	fi
  else
	EXIT_STATUS=${STATE_UNKN}
	LEVEL="unkn"
	TYPE="str"
	CONTENT="$(gettext "Queuing Letters Number Unknown") | $(eval_gettext "total: [${total}] not numberic") | $(html_yellow "$(eval_gettext "\${total} letters")") ### ### $(eval_gettext "letters in local: [\${ln}]") ### $(eval_gettext "letters in remote: [\${rn}]") ### $(eval_gettext "letters in bounce: [\${bn}]") ### $(eval_gettext "letters in mlist: [\${mn}]") ### $(eval_gettext "letters in tmp: [\${tn}]") ### "
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
