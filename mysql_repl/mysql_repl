#!/usr/bin/env bash


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="mysql_repl"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale mysql_repl)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi



show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {mysqlcli_path}  {ip,port,user,pass  ip2,port2,user2,pass2  ...}  {time_out}

Usage:   data  /opt/mysql/bin/mysql "127.0.0.1,3306,eyou,eyou 127.0.0.1,3316,eyou,eyou"  10

Output:   {ip:port}  {[result]}

127.0.0.1:3306  []
169.131.5.95:3316  []
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=""    	### { succ | warn | crit | unkn | noop | notify }
TYPE=""    	### { str| file }
CONTENT=""      ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	mysqlcli_path="$2"
	mysql_conn_conf="$3"
	mysql_time_out="$4"
else
	mysqlcli_path=$( read_mole_config mysql_repl mysqlcli_path )
	mysql_conn_conf=$( read_mole_config mysql_repl mysql_conn_conf )
	mysql_time_out=$( read_mole_config mysql_repl mysql_time_out )
fi

# if null return STATE_UNKN.

# if null or invalid set default.
[ -z "${mysqlcli_path}" ] && mysqlcli_path="/usr/local/eyou/mail/opt/mysql/bin/mysql"
[ -z "${mysql_conn_conf}" ] && mysql_conn_conf="127.0.0.1,3306,eyou,eyou"
[ -z "${mysql_time_out}" -o ! -z "${mysql_time_out//[0-9]}" ] && mysql_time_out=10

# check function here
check() {

  [ -f "${mysqlcli_path}" -a -x "${mysqlcli_path}" ] || {
	EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "utitile [\${mysqlcli_path}] not prepared.")"
	return
  } 

  local result=
  local oknum=0 errnum=0 unknum=0 total=0
  for pairs in `echo "${mysql_conn_conf}" | tr '[;/]' ' '`
  do
	((total++))

	sepnum=$(echo -e "${pairs}" | awk -F"," 'END{print --NF}')
	if [ "${sepnum}" != "3" ]; then
		((unknum++))
		result="${result} ### $(html_yellow "$(eval_gettext "[\${pairs}] is invalid")") ### ### "
		continue 1
	fi

  	mysql_host="$(echo -e "${pairs}"|awk -F"," '{print $1}')"
  	mysql_port="$(echo -e "${pairs}"|awk -F"," '{print $2}')"
  	mysql_user="$(echo -e "${pairs}"|awk -F"," '{print $3}')"
  	mysql_pass="$(echo -e "${pairs}"|awk -F"," '{print $4}')"
 	result="${result} $(eval_gettext "Login Slave Mysql Host [\${mysql_host}:\${mysql_port}] with Mysql User [\${mysql_user}]") ### "

	if [ -z "${mysql_pass}" ]; then
		cmd="${mysqlcli_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} --connect-timeout ${mysql_time_out} "
	else
		cmd="${mysqlcli_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} -p"${mysql_pass}" --connect-timeout ${mysql_time_out} "
	fi

	tmpfile="/var/tmp/${0##*/}.slave.info.tmp"
	touch $tmpfile 2>&-
	errstuff=$( ${cmd} -s -e "SHOW SLAVE STATUS\G" 2>&1 1>"${tmpfile}" )
	if [ "$?" != "0" ]; then
		((errnum++))
		errstuff=$(echo -e "${errstuff}" | sed -e '/password on the command line/d' | tr -d '\r\n')
		result="${result} $(html_red "$(eval_gettext "show slave status failed: return [\${errstuff}]")") ### "
	else
		if [ -f "${tmpfile}" -a -s "${tmpfile}" ]; then
			eval $( awk -F":[ \t]*" '\
				(/^[ \t]*Master_Server_Id:/){print "master_id=\""$2"\";";next} \
				(/^[ \t]*Master_Host:/){print "master_host=\""$2"\";";next} \
				(/^[ \t]*Master_Port:/){print "master_port=\""$2"\";";next} \
				(/^[ \t]*Master_User:/){print "master_user=\""$2"\";";next} \
				(/^[ \t]*Slave_IO_Running:/){print "io_running=\""$2"\";";next} \
				(/^[ \t]*Slave_SQL_Running:/){print "sql_running=\""$2"\";";next} \
				(/^[ \t]*Last_Errno:/){print "last_errno=\""$2"\";";next} \
				(/^[ \t]*Last_Error:/){print "last_error=\""$2"\";";next} \
				(/^[ \t]*Slave_IO_State:/){print "slave_iostate=\""$2"\";";next} \
				(/^[ \t]*Last_IO_Errno:/){print "last_ioerrno=\""$2"\";";next} \
				(/^[ \t]*Last_IO_Error:/){print "last_ioerror=\""$2"\";";next} \
				(/^[ \t]*Last_SQL_Errno:/){print "last_sqlerrno=\""$2"\";";next} \
				(/^[ \t]*Last_SQL_Error:/){print "last_sqlerror=\""$2"\";";next} \
			    ' "${tmpfile}" 2>&- )
			slave_info="$(eval_gettext "Master ID: \${master_id}") ### "
			slave_info="${slave_info} $(eval_gettext "Master Address: \$master_host:\$master_port") ### "
			slave_info="${slave_info} $(eval_gettext "Replication by User: \$master_user") ### "
			slave_info="${slave_info} $(eval_gettext "Slave IO State: \$slave_iostate") ### "
			result="${result} ${slave_info} ### "
			if [ "${io_running}" != "Yes" -o "${sql_running}" != "Yes" ]; then
				((errnum++))
				result="${result} $(html_red "$(gettext "IO Thread or SQL Thread Stopped")") ### $(gettext "IO Thread Running"): ${io_running} ### $(gettext "SQL Thread Running"): ${sql_running} ### $(gettext "Last ErrNo"): ${last_errno} ### $(gettext "Last Error"): ${last_error} ### $(gettext "Last IO Errno"): ${last_ioerrno} ### $(gettext "Last IO Error"): ${last_ioerror} ### $(gettext "Last SQL Errno"): ${last_sqlerrno} ### $(gettext "Last SQL Error"): ${last_sqlerror} ### "
			else
				result="${result} $(gettext "IO Thread and SQL Thread Running") ### "
				((oknum++))
			fi
		else
			((errnum++))
			result="${result} $(html_red "$(gettext "slave status not detected, maybe mysql slave not running on") ${mysql_host}:${mysql_port} ") ### "
		fi
	fi
	result="${result} ### ### ### "

	# output data and exit if MODE=1 
        [ "${MODE}" == "1" ] && {
                echo "${mysql_host}:${mysql_port}  []"
                continue
        }
  done

  # exit if MODE=1 
  [ "${MODE}" == "1" ] && exit

  [ "${errnum}" != "0" ] && {
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "Mysql Replication CRITICAL") | $(eval_gettext "\${errnum}/\${total} check failed") | ${result} "
  } || {
	[ "${oknum}" == "${total}" ] && {
		EXIT_STATUS=${STATE_SUCC};
		LEVEL="succ";
		TYPE="str";
		CONTENT="$(gettext "Mysql Replication OK") | $(eval_gettext "\${oknum}/\${total} check success") | ${result} "
	} || {
		[ "${unknum}" != "0" ] && {
			EXIT_STATUS=${STATE_UNKN};
			LEVEL="unkn";
			TYPE="str";
			CONTENT="$(gettext "Mysql Replication Unknown") | $(eval_gettext "\${unknum}/\${total} check unknown") | ${result} "
		}
	}
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
