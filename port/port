#!/usr/bin/env bash


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="port"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale port)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi



show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {port_list}
{port_list} format:
 port
 ip:port
 [tcp/udp]:ip:port
 [tcp/udp]:ip:port:tmout

Usage:  data  "22 udp:1.1.1.1:53  mail.eyou.net:110"

Output:   {rcode}  {prot}://{addr}:{port}  {tmout}  {result}

0 tcp://127.0.0.1:22 5 [Connection to 127.0.0.1 22 port [tcp/ssh] succeeded! ]
0 udp://1.1.1.1:53 10 [Connection to 1.1.1.1 53 port [udp/domain] succeeded! ]
EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unkn | noop | notify }
TYPE=    	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	port_list="$2"
else
	port_list=$( read_mole_config port port_list )
fi


# if null return STATE_UNKN.

# if null or invalid set default.
if [ -z "${port_list}" ]; then
	if [ -f "/etc/ssh/sshd_config" -a -s "/etc/ssh/sshd_config" ]; then
		ssh_port=$(awk '($1~/^Port\>/){print $2;exit;}' "/etc/ssh/sshd_config" 2>&- | tr -d '\r\n\t ')
	fi
	[ -z "${ssh_port}" ] && ssh_port=22
	port_list=" tcp:127.0.0.1:${ssh_port}:10 "
fi 

# check function here
check(){

### return code: 0|1|2
#  0: OK
#  1: CRIT
#  2: UNKNOWN:(type or port or tmout invalid)
check_single(){
  local ptype=$1 ip=$2 port=$3 tmout=$4
  local return_code=0
  local output=

  ### set default:   tcp 5 127.0.0.1
  [ -z "${ptype//[ ]}" ] && ptype="tcp" 
  [ -z "${ip//[ ]}" ] && ip="127.0.0.1"
  [ -z "${tmout//[ ]}" -o "${tmout}" == "0" ] && tmout=5
  if [ -z "${port//[ ]}" ]; then    ### port null, return UNKNOWN
	((unknum++))
	output="$(html_red "$(gettext "port required")") ### ### "
	return_code=2
  else
  	if [ "${ptype}" == "udp" -o "${ptype}" == "tcp" ]; then		### ptype ok, continue
		if [ -z "${port}" -o ! -z "${port//[0-9]}" -o -z "${tmout}" -o ! -z "${tmout//[0-9]}" ]; then
			((unknum++))
			output="$(html_red "$(eval_gettext "port/tmout must be numberic: port=[\${port}] tmout=[\${tmout}]")") ### ### "
			return_code=2
		else							### port/tmout ok, continue
			if [ "${ptype}" == "udp" ]; then
				local rstr=$( /usr/bin/nc -u -w "${tmout}" -vz "${ip}" "${port}" 2>&1 |tr '\n' ' ')
			else
				local rstr=$( /usr/bin/nc -w "${tmout}" -vz "${ip}" "${port}" 2>&1|tr '\n' ' ')
			fi
			if [ "$(sub_str "${rstr}" "succeeded")" == "yes" ]; then
				output="$(eval_gettext "Check \${ptype}://\${ip}:\${port} OK, return [\${rstr}]") ###"
				return_code=0
			else
				output="$(html_red "$(eval_gettext "Check \${ptype}://\${ip}:\${port} WARN, return [\${rstr}]")" ) ### "
				return_code=1
			fi
			# output data and exit if MODE=1 
			[ "${MODE}" == "1" ] && {
				echo "${return_code} ${ptype}://${ip}:${port} ${tmout} [${rstr}]"
				return
			}
		fi
  	else	### ptype invalid, return UNKNOWN
		((unknum++))
		output="$(html_red "$(eval_gettext "port type [\${ptype}] invalid, must be tcp/udp")") ### ### "
		return_code=2
  	fi
  fi

  echo -e "${output}"
  return ${return_code}
}

  [ -f "/usr/bin/nc" -a -x "/usr/bin/nc" ] || {
	EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "utilite [/usr/bin/nc] not prepared.")"
        return
  }

  local result=" ### $(eval_gettext "Check List: [${port_list}]") ### ### "
  local oknum=0 errnum=0 unknum=0 total=0
  for pairs in `echo "${port_list}" | tr '[;,/]' ' '`
  do
	((total++))
	sepnum=$(echo -e "${pairs}" | awk -F":" 'END{print --NF}')
	case "${sepnum}" in
	"0")
		ptype=
		ip=
		port="${pairs//[ ]}"
		tmout=
		;;
	"1")
		ptype=
		ip=$(echo -e "${pairs}" | cut -d: -f1)
		port=$(echo -e "${pairs}" | cut -d: -f2)
		tmout=
		;;
	"2")
		f1=$(echo -e "${pairs}" | cut -d: -f1)
		if [ "${f1}" == "tcp" -o "${f1}" == "udp" ]; then
			ptype=${f1} 
			ip=$(echo -e "${pairs}" | cut -d: -f2)
			port=$(echo -e "${pairs}" | cut -d: -f3)
			tmout=
		else
			ptype=
			ip=$(echo -e "${pairs}" | cut -d: -f1)
			port=$(echo -e "${pairs}" | cut -d: -f2)
			tmout=$(echo -e "${pairs}" | cut -d: -f3)
		fi
		;;
	"3")
		ptype=$(echo -e "${pairs}" | cut -d: -f1)
		ip=$(echo -e "${pairs}" | cut -d: -f2)
		port=$(echo -e "${pairs}" | cut -d: -f3)
		tmout=$(echo -e "${pairs}" | cut -d: -f4)
		;;
	*)
		((unknum++))
		result="${result} ### $(html_red "$(eval_gettext "[\${pairs}] is invalid")") ### ### "
		continue 1
		;;
	esac
	result="${result} ### "

   	tmpstr=$(check_single "${ptype}" "${ip}" "${port}" "${tmout}")
	rc=$?
	case "${rc}" in
	"0")
		((oknum++))	;;
	"1")
		((errnum++))	;;
	"2")
		((unknum++))	;;
	esac

	# output data and exit if MODE=1 
	[ "${MODE}" == "1" ] && {
		echo "${tmpstr}"
		continue
	}

	result="${result} "${tmpstr}" "
  done

  # exit if MODE=1 
  [ "${MODE}" == "1" ] && exit

  [ "${errnum}" != "0" ] && {
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "Check Port CRITICAL") | $(eval_gettext "\${errnum}/\${total} check failed.") | "${result}" "
  } || {
	[ "${oknum}" == "${total}" ] && {
		EXIT_STATUS=${STATE_SUCC};
		LEVEL="succ";
		TYPE="str";
		CONTENT="$(gettext "Check Port OK") | $(eval_gettext "${oknum}/${total} check success.") | "${result}" "
	} || {
		[ "${unknum}" != "0" ] && {
			EXIT_STATUS=${STATE_UNKN};
			LEVEL="unkn";
			TYPE="str";
			CONTENT="$(gettext "Check Port UNKNOWN") | $(eval_gettext "${unknum}/${total} check unknown.") | "${result}" "
		}
	}
  } 
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
