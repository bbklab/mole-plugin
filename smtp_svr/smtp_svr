#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Encode;
use Net::SMTP;
use Time::HiRes;
use Benchmark ':hireswallclock';
use Locale::Messages qw (textdomain bindtextdomain gettext);
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';

# return codes
our ($state_ok,$state_warn,$state_crit,$state_unkn,$state_noop) = (0,1,2,3,4);

# return stuff
our ($rc, $result) = (0,'');

our $eminfo = '/usr/local/eminfo/eminfo';
our $filename = (split /\//, __FILE__)[-1];

# check eminfo
unless (-f $eminfo && -x $eminfo) {
  printf "{unknown}:{str}:{$eminfo not prepared.}";
  exit $state_unkn;
}

# read eminfo locale_def
our $localdir = '/usr/local/eminfo/share/locale/';
open my $fh, "$eminfo printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $localdir = $_;
        last;
  }
}

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $addr_port = '127.0.0.1:25';
open $fh, "$eminfo view $filename addr_port 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $addr_port = $_;
	last;
  }
}

our $time_out = 10;
open $fh, "$eminfo view $filename time_out 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $time_out = $_;
	last;
  }
} 
$time_out = 10 if ($time_out =~ m/\D/ || !defined $time_out);

our $smtp_user = '';
open $fh, "$eminfo view $filename smtp_user 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $smtp_user = $_;
	last;
  }
}

our $smtp_pass = '';
open $fh, "$eminfo view $filename smtp_pass 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $smtp_pass = $_;
	last;
  }
}

# Main body begin
my ($total,$critnum,$unknnum) = (0,0,0);
my ($time_start,$time_stop,$time_duration);

$result = sprintf(_"check list: %s ### ### ",$addr_port);

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {
  $total++;
  my ($smtp_host, $smtp_port) = (split /:/, shift @addr_pair)[0,1];
  if (!defined $smtp_host || !defined $smtp_port) {
	$result .= sprintf(_"<font color=yellow> smtp_host or smtp_port not defined </font> ### ### ");
	$unknnum++;
	next;
  }
  if ($smtp_port =~ /\D/) {
	$result .= sprintf(_"<font color=yellow> %s:%d smtp port not numberic </font> ### ### ",$smtp_host,$smtp_port);
	$unknnum++;
	next;
  }

  $time_start = Benchmark->new();
  my $smtp=Net::SMTP->new(
	Host    =>	$smtp_host,
	Port	=> 	$smtp_port,
	Timeout =>	($time_out =~ /\D/)?10:$time_out,
	# Hello   =>      'bbklab.hello',
  );
  unless (defined $smtp) {
	if ($@) {
		$@ =~ s/[\r\n]//g;
		$@ = Encode::decode("gb2312",$@);
		$result .= sprintf(_"<font color=red> connect [%s:%d] failed in %d seconds, return [%s] </font> ",$smtp_host,$smtp_port,$time_out,$@);
	} else {
		$result .= sprintf(_"<font color=red> connect [%s:%d] failed in %d seconds, maybe in black ip list </font> ",$smtp_host,$smtp_port,$time_out);
	}
	$critnum++;
	goto ERREND;
  } else {
	(my $welcome = $smtp->banner()) =~ s/[\r\n]//g;
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= sprintf(_"connect [%s:%d] return welcome banner: ### [%s] (%f seconds) ### ",$smtp_host,$smtp_port,$welcome,$time_duration);
	$time_start = Benchmark->new();		## reset time_start
  }
  if($smtp_user && $smtp_pass) {
	my ($rcode,$response);
	$smtp->auth($smtp_user,$smtp_pass);
	($response = $smtp->message()) =~ s/[\r\n]//g;
	$response = Encode::decode("gb2312",$response);
	$rcode = $smtp->code();
	unless (defined $rcode && $rcode =~ m/\A2/) {
		$rcode = '' if (!defined $rcode);
		$result .= sprintf(_"<font color=red> smtp command: AUTH LOGIN return [code=%d message=%s] </font> ",$rcode,$response);
		$critnum++;
		goto ERREND;
	} else {
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= sprintf(_"smtp command: AUTH LOGIN return [code=%d message=%s] (%f seconds) ### ### ",$rcode,$response,$time_duration);
		$time_start = Benchmark->new();         ## reset time_start
	}
  } else {
	$result .= sprintf(_" smtp_user or smtp_pass not defined, smtp login test skip ### ### ");
  }
  next;

  ERREND: {
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= sprintf(_" (%f seconds) ### ### ",$time_duration);
	next;
  }
}
# prepare last output
if ($critnum > 0) {
  printf _"{crit}:{str}:{ SMTP SVR CRITICAL | %d/%d smtp check critical | %s }",$critnum,$total,$result;
  exit $state_crit;
} elsif ($unknnum > 0) {
  printf _"{unknown}:{str}:{ SMTP SVR UNKNOWN | %d/%d smtp check unknown | %s }",$unknnum,$total,$result;
  exit $state_unkn;
} else {
  printf _"{ok}:{str}:{ SMTP SVR OK | %d/%d smtp check success | %s }",$total,$total,$result;
  exit $state_ok;
}
