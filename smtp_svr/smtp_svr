#!/usr/bin/env perl

our $basedir = '/usr/local/esop/agent/mole';
our $mole = "$basedir/sbin/mole";

BEGIN {
  my $basedir = '/usr/local/esop/agent/mole';
  my $pllib_dir = "$basedir/opt/plmods";
  my @incs = (    # set additional path
        # rhel5 32bit
        $pllib_dir.'/lib/perl5/',
        $pllib_dir.'/lib/perl5/5.8.8/',
        $pllib_dir.'/lib/perl5/site_perl/',
        $pllib_dir.'/lib/perl5/site_perl/5.8.8/',
        # rhel5 64bit
        $pllib_dir.'/lib64/perl5/',
        $pllib_dir.'/lib64/perl5/5.8.8/',
        $pllib_dir.'/lib64/perl5/site_perl/',
        $pllib_dir.'/lib64/perl5/site_perl/5.8.8/',
        # rhel6 32bit
        $pllib_dir.'/lib/perl5/',
	$pllib_dir.'/share/perl5/',
        # rhel6 64bit
        $pllib_dir.'/lib64/perl5/',
	$pllib_dir.'/share/perl5/',
  );

  push @INC, @incs;
};

use strict;
use warnings;
use utf8;
use Encode;
use IO::Socket;
use IO::Socket::INET;
use MIME::Base64 qw(encode_base64);
use Time::HiRes;
use Benchmark ':hireswallclock';
# use Smart::Comments;
use Locale::Messages qw (textdomain bindtextdomain gettext nl_putenv :locale_h :libintl_h);
use POSIX qw (setlocale);
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';

$| = 1;

# return codes
our ($state_succ,$state_warn,$state_crit,$state_unkn,$state_noop,$state_notify) = (0,1,2,3,4,5);

# return stuff
our ($rc, $result) = (0,'');

our $filename = (split /\//, __FILE__)[-1];

# check mole 
unless (-f $mole && -x $mole) {
  printf "{unkn}:{str}:{$mole not prepared.}";
  exit $state_unkn;
}

# read mole locale_def
our $localdir = "$basedir/share/locale/";
open my $fh, "$mole printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $localdir = $_;
        last;
  }
}

# read plugin locale setting
our $locale = 'zh_CN.UTF-8';
open $fh, "$mole view $filename locale 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $locale = $_;
        last;
  }
  if(!defined $locale || $locale eq ''){
        open my $fh1, "$mole view default locale 2>&- |";
        if($fh1){
                while(<$fh1>){
                        chomp; $locale = $_;
                        last;
                }
        }
  }
}
if(!defined $locale || $locale eq ''){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'zh_CN' || $locale eq 'zh_CN.UTF-8' || $locale eq 'zh'){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'en_US' || $locale eq 'en_US.UTF-8' || $locale eq 'en'){
        $locale = 'en_US.UTF-8';
}else{
        $locale = 'zh_CN.UTF-8';
}
setlocale(LC_ALL,$locale);
nl_putenv("LANGUAGE=$locale");
nl_putenv("LANG=$locale");

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $addr_port = '127.0.0.1:25';
open $fh, "$mole view $filename addr_port 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $addr_port = $_;
	last;
  }
}

our $time_out = undef;
open $fh, "$mole view $filename time_out 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $time_out = $_;
 	last;
  }
} 
if (!defined $time_out) {
  printf _"{unkn}:{str}:{ time_out shoule be defined as int.}";
  exit $state_unkn;
} elsif ($time_out =~ m/\D/) {
  printf _"{unkn}:{str}:{ time_out [%s] shoule be int.}",$time_out;
  exit $state_unkn;
}

our $smtp_user = '';
open $fh, "$mole view $filename smtp_user 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $smtp_user = $_;
  	last;
  }
}

our $smtp_pass = '';
open $fh, "$mole view $filename smtp_pass 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $smtp_pass = $_;
	last;
  }
}

our $helo_me = 'localhost';
open $fh, "$mole view $filename helo_me 2>&- |";
if ($fh) {
  while(<$fh>){
	chomp; $helo_me = $_;
	last;
  }
}
$helo_me = 'localhost' unless ($helo_me && $helo_me ne '');

# Main body begin
my ($total,$critnum,$unknnum) = (0,0,0);
my ($time_start,$time_stop,$time_duration);

$result = sprintf(_"check list: %s ### ### ",$addr_port);

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {
  $total++;
  my ($smtp_host, $smtp_port) = (split /:/, shift @addr_pair)[0,1];
  if (!defined $smtp_host || !defined $smtp_port) {
	$result .= sprintf(_"<font color=yellow> smtp_host or smtp_port not defined </font> ### ### ");
	$unknnum++;
	next;
  }
  if ($smtp_port =~ /\D/) {
	$result .= sprintf(_"<font color=yellow> %s:%s smtp port not numberic </font> ### ### ",$smtp_host,$smtp_port,);
	$unknnum++;
	next;
  }

  $time_start = Benchmark->new();
  my $smtp=IO::Socket::INET->new(
        PeerAddr =>     $smtp_host,
        PeerPort =>     $smtp_port,
        Proto    =>     'tcp',
        Timeout =>      ($time_out =~ /\D/)?10:$time_out,
  );
  unless (defined $smtp) {
	if ($@) {
		$@ =~ s/[\r\n]//g;
		$result .= sprintf(_"<font color=red> connect [%s:%d] failed in %d seconds, return [%s] ",$smtp_host,$smtp_port,$time_out,$@);
	} else {
		$result .= sprintf(_"<font color=red> connect [%s:%d] failed in %d seconds, maybe in black ip list ",$smtp_host,$smtp_port,$time_out);
	}
	$critnum++;
	goto ERREND;
  } else {
	my $welcome = <$smtp>;
	### orig: $welcome
	if ($welcome && $welcome ne '') {
		eval {my $tmpstr = $welcome; Encode::decode("utf8", $tmpstr, 1)};
		if ($@) {
			eval {my $tmpstr = $welcome; Encode::decode("gbk", $tmpstr, 1)};
			if ($@) {
				$welcome = Encode::decode("gb2312", $welcome);
			} else {
				$welcome = Encode::decode("gbk", $welcome);
			}
		}
		Encode::_utf8_off($welcome);
		### decode: $welcome
	}
	if ($welcome && $welcome =~ m/\A2\d\d\s+/) {
		$welcome =~ s/[\r\n]//g;
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= sprintf(_"connect [%s:%d] return welcome banner ### [%s] (%f seconds) ### ",$smtp_host,$smtp_port,$welcome,$time_duration);
		$time_start = Benchmark->new();		## reset time_start
	} else {
		if ($welcome && $welcome ne '') {
			$welcome =~ s/[\r\n]//g;
			$result .= sprintf(_"<font color=red> connect [%s:%d] return welcome banner [%s] ",$smtp_host,$smtp_port,$welcome);
		} else {
			$result .= sprintf(_"<font color=red> connect [%s:%d] didn't return welcome banner ",$smtp_host,$smtp_port);
		}
		$critnum++;
		goto ERREND;
	}
  }
  
  print $smtp "HELO $helo_me\r\n";
  my $response = <$smtp>;
  ### orig: $response
  if ($response && $response ne '') {
       $response =~ s/[\r\n]//g;
       eval {my $tmpstr = $response; Encode::decode("utf8", $tmpstr, 1)};
       if ($@) {
               eval {my $tmpstr = $response; Encode::decode("gbk", $tmpstr, 1)};
               if ($@) {
                       $response = Encode::decode("gb2312", $response);
               } else {
                       $response = Encode::decode("gbk", $response);
               }
       }
       Encode::_utf8_off($response);
       ### decode: $response
  }
  unless (defined $response && $response =~ m/\A2\d\d\s+/) {
	$response = '' if (!defined $response);
	$result .= sprintf(_"<font color=red> smtp command: HELO return [message=%s] ",$response);
	$critnum++;
	goto ERREND;
  } else {
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$response = '' if (!defined $response);
	$result .= sprintf(_"smtp command: HELO return [message=%s] (%f seconds) ### ",$response,$time_duration);
	$time_start = Benchmark->new();         ## reset time_start
  }

  print $smtp "NOOP\r\n";
  $response = <$smtp>;
  ### orig: $response
  if ($response && $response ne '') {
       $response =~ s/[\r\n]//g;
       eval {my $tmpstr = $response; Encode::decode("utf8", $tmpstr, 1)};
       if ($@) {
               eval {my $tmpstr = $response; Encode::decode("gbk", $tmpstr, 1)};
               if ($@) {
                       $response = Encode::decode("gb2312", $response);
               } else {
                       $response = Encode::decode("gbk", $response);
               }
       }
       Encode::_utf8_off($response);
       ### decode: $response
  }
  unless (defined $response && $response =~ m/\A2\d\d\s+/) {
	$response = '' if (!defined $response);
	$result .= sprintf(_"<font color=red> smtp command: NOOP return [message=%s] ",$response);
	$critnum++;
	goto ERREND;
  } else {
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$response = '' if (!defined $response);
	$result .= sprintf(_"smtp command: NOOP return [message=%s] (%f seconds) ### ",$response,$time_duration);
	$time_start = Benchmark->new();         ## reset time_start
  }

  if($smtp_user && $smtp_pass) {
	my ($encode_smtp_user, $encode_smtp_pass);
	$encode_smtp_user = encode_base64($smtp_user,'');	# trim '\n', empty eof
	$encode_smtp_pass = encode_base64($smtp_pass,'');	# trim '\n', empty eof
	unless ($smtp_user && $smtp_pass) {
		$result .= sprintf(_"<font color=red> base64 encode on smtp_user/smtp_pass failed. </font> ### ### ");
		next;	
	}

	print $smtp "AUTH LOGIN\r\n";
	$response = <$smtp>;
	### orig: $response
	if ($response && $response ne '') {
		$response =~ s/[\r\n]//g;
		eval {my $tmpstr = $response; Encode::decode("utf8", $tmpstr, 1)};
		if ($@) {
			eval {my $tmpstr = $response; Encode::decode("gbk", $tmpstr, 1)};
			if ($@) {
				$response = Encode::decode("gb2312", $response);
			} else {
				$response = Encode::decode("gbk", $response);
			}
		}
		Encode::_utf8_off($response);
		### decode: $response
	}
	unless (defined $response && $response =~ m/\A3\d\d\s+/) {
		$response = '' if (!defined $response);
		$result .= sprintf(_"<font color=red> smtp command: AUTH LOGIN return [message=%s] ",$response);
		$critnum++;
		goto ERREND;
	} else {
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$response = '' if (!defined $response);
		$result .= sprintf(_"smtp command: AUTH LOGIN return [message=%s] (%f seconds) ### ",$response,$time_duration);
		$time_start = Benchmark->new();         ## reset time_start
	}
	
	print $smtp "$encode_smtp_user\r\n";
	$response = <$smtp>;
	### orig: $response
	if ($response && $response ne '') {
		$response =~ s/[\r\n]//g;
		eval {my $tmpstr = $response; Encode::decode("utf8", $tmpstr, 1)};
		if ($@) {
			eval {my $tmpstr = $response; Encode::decode("gbk", $tmpstr, 1)};
			if ($@) {
				$response = Encode::decode("gb2312", $response);
			} else {
				$response = Encode::decode("gbk", $response);
			}
		}
		Encode::_utf8_off($response);
		### decode: $response
	}
	unless (defined $response && $response =~ m/\A3\d\d\s+/) {
		$response = '' if (!defined $response);
		$result .= sprintf(_"<font color=red> smtp command: {Username:} return [message=%s] ",$response);
		$critnum++;
		goto ERREND;
	} else {
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= sprintf(_"smtp command: {Username:} return [message=%s] (%f seconds) ### ",$response,$time_duration);
		$time_start = Benchmark->new();         ## reset time_start
	}

	print $smtp "$encode_smtp_pass\r\n";
	$response = <$smtp>;
	### orig: $response
	if ($response && $response ne '') {
		$response =~ s/[\r\n]//g;
		eval {my $tmpstr = $response; Encode::decode("utf8", $tmpstr, 1)};
		if ($@) {
			eval {my $tmpstr = $response; Encode::decode("gbk", $tmpstr, 1)};
			if ($@) {
				$response = Encode::decode("gb2312", $response);
			} else {
				$response = Encode::decode("gbk", $response);
			}
		}
		Encode::_utf8_off($response);
		### decode: $response
	}
	unless (defined $response && $response =~ m/\A2\d\d\s+/) {
		$response = '' if (!defined $response);
		$result .= sprintf(_"<font color=red> smtp command: {Password:} return [message=%s] ",$response);
		$critnum++;
		goto ERREND;
	} else {
		print $smtp "QUIT\r\n" if $smtp;
		$smtp->close() if $smtp;
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= sprintf(_"smtp command: {Password:} return [message=%s] (%f seconds) ### ### ",$response,$time_duration);
		$time_start = Benchmark->new();         ## reset time_start
	}
  } else {
	$result .= sprintf(_" smtp_user or smtp_pass not defined, smtp login test skip ### ### ");
  }
  next;

  ERREND: {
	if ($smtp) { $smtp->close(); };
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= sprintf(_" (%f seconds) </font> ### ### ",$time_duration);
	next;
  }
}
# prepare last output
if ($critnum > 0) {
  printf _"{crit}:{str}:{ SMTP SVR CRITICAL | %d/%d smtp check critical | %s }",$critnum,$total,$result;
  exit $state_crit;
} elsif ($unknnum > 0) {
  printf _"{unkn}:{str}:{ SMTP SVR UNKNOWN | %d/%d smtp check unknown | %s }",$unknnum,$total,$result;
  exit $state_unkn;
} else {
  printf _"{succ}:{str}:{ SMTP SVR OK | %d/%d smtp check success | %s }",$total,$total,$result;
  exit $state_succ;
}
