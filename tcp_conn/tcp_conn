#!/usr/bin/env bash


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" ] && [ -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="tcp_conn"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale tcp_conn)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] || [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi



show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {port_list}

Usage:  data  "80, 110, 3306"

Output:  
port: {port}
conn_stat:
Total: {totol}
{server connect stats}
ip_stat:
{top10 client connect stats}

Example:

port: 110
conn_stat:
Total: 61
TIME_WAIT:42
FIN_WAIT2:2
ESTABLISHED:16
LISTEN:1
ip_stat:
10  166.111.99.132
3  59.66.145.161
3  166.111.98.132
2  101.5.201.37
1  98.233.226.112
1  61.148.242.39
1  60.247.92.78
1  59.66.113.20
1  58.246.131.243
1  222.128.61.148

port: 80
conn_stat:
Total: 1
LISTEN:1
ip_stat:

EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unkn | noop | notify }
TYPE=    	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
        port_list="$2"
else
	port_list=$( read_mole_config tcp_conn port_list )
fi

# if null return STATE_UNKN.

# if null or invalid set default.

# check function here
check(){

  if [ -z "${port_list}" ]; then
	EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "config port_list not defined.")"
        return
  fi

### return code: 0|1|2|3
#  0: OK
#  1: WARN
#  2: UNKN
#  3: CRIT
check_single(){
  local s_port=$1  limit=$2  statfile=$3
  local output=

  if ! is_int "${s_port}"; then
	output="$(html_red "$(eval_gettext "port \${s_port} must be int.")") ### "
	echo -e "${output}"
	return 2
  fi

  local WARN_LIMIT= CRIT_LIMIT=
  if is_multi_threshold "${limit}"; then
	if check_multi_threshold "${limit}" 1; then
		local ARRY_LIMIT=( $(seperate_multi_threshold "${limit}" 2>&- ) )
		WARN_LIMIT=${ARRY_LIMIT[0]}
		CRIT_LIMIT=${ARRY_LIMIT[1]}
		if [ "$(echo "${WARN_LIMIT} >= ${CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
			output="$(html_red "$(eval_gettext "limit [\${limit}] warn threshold must lower than crit threshold.")") ### "
			echo -e "${output}"
			return 2
		fi
	else
		output="$(html_red "$(eval_gettext "limit [\${limit}] is invalid multi threshold on int check.")") ### "
		echo -e "${output}"
		return 2
	fi
  else
	if is_int "${limit}"; then
		CRIT_LIMIT="${limit}"
	else
		output="$(html_red "$(eval_gettext "limit [\${limit}] must be int.")") ### "
		echo -e "${output}"
		return 2
	fi
  fi

  local conn_stat=$( awk '($4~/:'${s_port}'\>/){num[$NF]++;total++} \
				END{print "Total:",total; \
					for(c in num) \
						printf("%s:%s\n",c,num[c]) }'\
		 	"${statfile}" 2>&- )
  local ip_stat=$( awk '$4~/:'${s_port}'\>/ {print $5}' \
			"${statfile}" 2>&- |\
		   awk -F: '($(NF-1)!=""){Num[$(NF-1)]++} \
				END{for (c in Num) \
						{printf("%s  %s\n"),Num[c],c}}' |\
		   sort -rn | head)  ## only print top 10 ipaddress
  local total=$(echo -e "${conn_stat}" | awk -F: '/^Total\>/{print $2;exit}' | tr -d ' ')

  # output data and exit if MODE=1
  [ "${MODE}" == "1" ] && {
	echo -e "port: ${s_port}\nconn_stat:\n${conn_stat}\nip_stat:\n${ip_stat}\n"
	return
  }

  output=" ### $(eval_gettext "check port:\${s_port}, limit:\${limit}") ###"
  if ! is_int "${total}"; then
	output="${output} $(html_red "$(eval_gettext "return: [\${total}] is not numberic")") ### "
	output="${output} $(eval_gettext "Maybe port: [\${s_port}] not listening") ### "
	echo -e "${output}"
	return 1
  else
	local details="$(echo -e "${conn_stat} ### $(gettext "IP Connect Stat:") ### ${ip_stat} ### " | sed -e 's/$/ ### /g' | tr -d '\n' )"

	if [ -n "${CRIT_LIMIT}" ] && [ "$(echo " ${total} >= ${CRIT_LIMIT} " | bc 2>&-)" == "1" ]; then
		output="${output} $(html_red "$(eval_gettext "Total: [\${total}] >= Crit Limit: [\${CRIT_LIMIT}]")") ### "
		output="${output} ${details}"
		echo -e "${output}"
		return 3
	elif [ -n "${WARN_LIMIT}" ] && [ "$(echo " ${total} >= ${WARN_LIMIT} " | bc 2>&-)" == "1" ]; then
		output="${output} $(html_red "$(eval_gettext "Total: [\${total}] >= Warn Limit: [\${WARN_LIMIT}]")") ### "
		output="${output} ${details}"
		echo -e "${output}"
		return 1
	else
		output="${output} $(eval_gettext "Total: [\${total}]") ### "
		output="${output} ${details}"
		echo -e "${output}"
		return 0
	fi
  fi
}

  local result=" ### $(eval_gettext "Check List: [\${port_list}]") ### ### "
  local oknum=0 warnnum=0 critnum=0 unknum=0 total=0

  local statfile="/tmp/.check_tcpconn_num.statfile.mole"
  /bin/netstat -an > "${statfile}" 2>&-
  if [ ! -f "${statfile}" ] || [ ! -s "${statfile}" ]; then
	EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "netstat file: [\${statfile}] not exist or empty.")"
        return
  fi

  # output data and exit if MODE=1
  [ "${MODE}" == "1" ] && {
	for port_num in `echo "${port_list}"`
	do
		check_single "${port_num%%:*}" 0  "${statfile}"   ## No need to set limit number
	done
	exit
  }

  # output plugin format data if MODE=0
  for port_num in `echo "${port_list}"`
  do
	((total++))

	port=$(echo -e "${port_num}" | awk -F":" '{print $1}')
	tnum=$(echo -e "${port_num}" | awk -F":" '{print $2}')
	if [ -z "${port}" ] || [ -z "${tnum}" ]; then
		((unknum++))
		result="${result} $(html_red "$(eval_gettext "[\${port_num}] is invalid")") ### "
		continue 1
	fi

   	tmpstr=$(check_single "${port}" "${tnum}" "${statfile}")
	rc=$?
	case "${rc}" in
	"0")
		((oknum++))	;;
	"1")
		((warnnum++))	;;
	"2")
		((unknum++))	;;
	"3")
		((critnum++))	;;
	esac
	result="${result} "${tmpstr}" "
  done

  if [ ${critnum} -gt 0 ]; then
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "TCP-Connection Number Check CRITICAL") | $(eval_gettext "\${critnum}/\${total} check critical.") | "${result}" "
  elif [ ${warnnum} -gt 0 ]; then
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="warn";
	TYPE="str";
	CONTENT="$(gettext "TCP-Connection Number Check WARNING") | $(eval_gettext "\${warnnum}/\${total} check warning.") | "${result}" "
  elif [ ${unknum} -gt 0 ]; then
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(eval_gettext "TCP-Connection Number Check UNKNOWN") | $(eval_gettext "\${unknum}/\${total} check unknown.") | "${result}" "
  elif [ "${oknum}" == "${total}" ]; then
	EXIT_STATUS=${STATE_SUCC};
	LEVEL="succ";
	TYPE="str";
	CONTENT="$(gettext "TCP-Connection Number Check OK") | $(eval_gettext "\${oknum}/\${total} check success.") | "${result}" "
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
