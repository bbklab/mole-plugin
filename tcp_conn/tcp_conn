#!/usr/bin/env bash



BASE_DIR="/usr/local/eminfo/"
# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unknown}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unknown}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unknown}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="tcp_conn"
else    
        echo -en "{unknown}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(read_eminfo_config tcp_conn locale)
if [ -z "${glocale}" ]; then
        export LANG="${LANG}"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
fi



show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {port_list}

Usage:  data  "80, 110, 3306"

Output:  
port: {port}
conn_stat:
Total: {totol}
{server connect stats}
ip_stat:
{top10 client connect stats}

Example:

port: 110
conn_stat:
Total: 61
TIME_WAIT:42
FIN_WAIT2:2
ESTABLISHED:16
LISTEN:1
ip_stat:
10  166.111.99.132
3  59.66.145.161
3  166.111.98.132
2  101.5.201.37
1  98.233.226.112
1  61.148.242.39
1  60.247.92.78
1  59.66.113.20
1  58.246.131.243
1  222.128.61.148

port: 80
conn_stat:
Total: 1
LISTEN:1
ip_stat:

EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unknown | noop }
TYPE=    	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
        port_list="$2"
else
	port_list=$( read_eminfo_config tcp_conn port_list )
fi

# if null return STATE_UNKNOWN.

# if null or invalid set default.
[ -z "${port_list//[ ]}" ] && port_list=" 80:300 "

# check function here
check(){

### return code: 0|1|2
#  0: OK
#  1: CRIT
#  2: UNKNOWN:(total is not numberic,maybe port not listening)
check_single(){
  local s_port=$1  limit=$2  statfile=$3
  local return_code=0
  local conn_stat=$( awk '($4~/:'${s_port}'\>/){num[$NF]++;total++} END{print "Total:",total; for(c in num) printf("%s:%s\n",c,num[c]) }' "${statfile}" 2>&- )
  local ip_stat=$( awk '$4~/:'${s_port}'\>/ {print $5}' "${statfile}" 2>&- | awk -F: '($(NF-1)!=""){Num[$(NF-1)]++} END{for (c in Num) {printf("%s  %s\n"),Num[c],c}}' | sort -rn | head)  ## only print top 10 ipaddress
  local total=$(echo -e "${conn_stat}" | awk -F: '/^Total\>/{print $2;exit}' | tr -d ' ')

  # output data and exit if MODE=1
  [ "${MODE}" == "1" ] && {
	echo -e "port: ${s_port}\nconn_stat:\n${conn_stat}\nip_stat:\n${ip_stat}\n"
	return
  }

  if [ -z "${total}" -o ! -z "${total//[0-9]}" ]; then
	local output=" $(html_yellow "$(eval_gettext "check [\${s_port}:\${limit}]: return: [\${total}] is not numberic")") ### $(eval_gettext "Maybe port: [\${s_port}] not listening") ### "
	return_code=2
  else
	if [ "$(echo " ${total} >= ${limit} " | bc 2>&-)" == "1" ]; then
		local output="$(html_red "$(eval_gettext "Total: [\${total}] >= Limit: [\${limit}]")") ### "
		return_code=1
	else
		local output="$(eval_gettext "Total: [\${total}] < Limit: [\${limit}]") ### "
		return_code=0
	fi
  	local output="${output} $(echo -e "${conn_stat} ### ### $(gettext "IP Connect Stat:") ### ${ip_stat} ### " | sed -e 's/$/ ### /g' | tr -d '\n' )"
  fi
  echo -e "${output}"
  return ${return_code}
}

  local result=" ### $(eval_gettext "Check List: [\${port_list}]") ### ### "
  local oknum=0 errnum=0 unknum=0 total=0
  local statfile="/tmp/.check_tcpconn_num.statfile.eminfo"
  /bin/netstat -an > "${statfile}" 2>&-
  [ ! -f "${statfile}" -o ! -s "${statfile}" ] && {
	EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="$(eval_gettext "netstat file: [\${statfile}] not exist or empty.")"
        return
  }

  # output data and exit if MODE=1
  [ "${MODE}" == "1" ] && {
	for port_num in `echo "${port_list}" | tr ',' ' '`
	do
		check_single "${port_num%%:*}" 0  "${statfile}"   ## No need to set limit number
	done
	exit
  }

  # output plugin format data if MODE=0
  for port_num in `echo "${port_list}" | tr ',' ' '`
  do
	((total++))
	local port="${port_num%%:*}" num="${port_num##*:}"
	result="${result} ### $(eval_gettext "Check Tcp-Port [\${port}], Uplimit [\${num}]") ### "
	[ -z "${port}" -o ! -z "${port//[0-9]}" -o -z "${num}" -o ! -z "${num//[0-9]}" ] && {
		((unknum++))
		result="${result} $(html_red "$(eval_gettext "[\${port_num}] is invalid: [\${port}] or [\${num}] not numberic")") ### "
		continue 1
	}

   	tmpstr=$(check_single "${port}" "${num}" "${statfile}")
	rc=$?
	case "${rc}" in
	"0")
		((oknum++))	;;
	"1")
		((errnum++))	;;
	"2")
		((unknum++))	;;
	esac
	result="${result} "${tmpstr}" "
  done

  [ "${errnum}" != "0" ] && {
	EXIT_STATUS=${STATE_CRITICAL};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "TCP-Connection Number Check CRITICAL") | $(eval_gettext "\${errnum}/\${total} check failed.") | "${result}" "
  } || {
	[ "${oknum}" == "${total}" ] && {
		EXIT_STATUS=${STATE_OK};
		LEVEL="ok";
		TYPE="str";
		CONTENT="$(gettext "TCP-Connection Number Check OK") | $(eval_gettext "\${oknum}/\${total} check success.") | "${result}" "
	} || {
		[ "${unknum}" != "0" ] && {
			EXIT_STATUS=${STATE_UNKNOWN};
			LEVEL="unknown";
			TYPE="str";
			CONTENT="$(eval_gettext "TCP-Connection Number Check UNKNOWN") | $(eval_gettext "\${unknum}/\${total} check unknown.") | "${result}" "
		}
	}
  } 
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
