#!/usr/bin/env perl

our $basedir = '/usr/local/esop/agent/mole';
our $mole = "$basedir/sbin/mole";

BEGIN {
  my $basedir = '/usr/local/esop/agent/mole';
  my $pllib_dir = "$basedir/opt/plmods";
  my @incs = (    # set additional path
        # rhel5 32bit
        $pllib_dir.'/lib/perl5/',
        $pllib_dir.'/lib/perl5/5.8.8/',
        $pllib_dir.'/lib/perl5/site_perl/',
        $pllib_dir.'/lib/perl5/site_perl/5.8.8/',
        # rhel5 64bit
        $pllib_dir.'/lib64/perl5/',
        $pllib_dir.'/lib64/perl5/5.8.8/',
        $pllib_dir.'/lib64/perl5/site_perl/',
        $pllib_dir.'/lib64/perl5/site_perl/5.8.8/',
        # rhel6 32bit
        $pllib_dir.'/lib/perl5/',
	$pllib_dir.'/share/perl5/',
        # rhel6 64bit
        $pllib_dir.'/lib64/perl5/',
	$pllib_dir.'/share/perl5/',
  );

  push @INC, @incs;
};

use warnings;
use strict;
use utf8;
use Locale::Messages qw (textdomain bindtextdomain gettext nl_putenv);
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';


# return codes
our ($state_succ,$state_warn,$state_crit,$state_unkn,$state_noop,$state_notify) = (0,1,2,3,4,5);

# return stuff
our ($rc, $result) = (0,'');

our $filename = (split /\//, __FILE__)[-1];

# check mole
unless (-f $mole && -x $mole ) {
  printf "{unkn}:{str}:{$mole not prepared.}";
  exit $state_unkn;
}

# read mole locale_def
our $localdir = "$basedir/share/locale/";
open my $fh, "$mole printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $localdir = $_;
  	last;
  }
}

# read plugin locale setting
our $locale = 'zh_CN.UTF-8';
open $fh, "$mole view $filename locale 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $locale = $_;
        last;
  }
  if(!defined $locale || $locale eq ''){
        open my $fh1, "$mole view default locale 2>&- |";
        if($fh1){
                while(<$fh1>){
                        chomp; $locale = $_;
                        last;
                }
        }
  }
}
if(!defined $locale || $locale eq ''){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'zh_CN' || $locale eq 'zh_CN.UTF-8' || $locale eq 'zh'){
        $locale = 'zh_CN.UTF-8';
}elsif($locale eq 'en_US' || $locale eq 'en_US.UTF-8' || $locale eq 'en'){
        $locale = 'en_US.UTF-8';
}else{
        $locale = 'zh_CN.UTF-8';
}
nl_putenv("LANGUAGE=$locale");

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $max_limit = 7500;
open $fh, "$mole view $filename max_limit 2>&- |";
if($fh){
  while(<$fh>){
  	chomp; $max_limit = $_;
  	last;
  }
}
$max_limit = 7500 if $max_limit =~ /\D/;

# Main body begin
my $procfile = "/proc/sys/fs/file-nr";
if (-f $procfile && -r $procfile) {
  if (open my $fh, "<", $procfile) {
  	my ($fd_allocated, $fd_free, $max_fd) = (split /\s+/, <$fh>)[0,1,2];
	if ($fd_allocated > $max_limit) {
		$result = sprintf(_"allocated: %d > %d ### allocated but free: %d ### max allowed: %d ###",$fd_allocated,$max_limit,$fd_free,$max_fd);
		printf _"{warn}:{str}:{ File Descriptor Number CRITICAL | %d file descriptor allocated | %s }",$fd_allocated,$result;
  		exit $state_warn;
	} 
	$result = sprintf(_"allocated: %d <= %d ### allocated but free: %d ### max allowed: %d ###",$fd_allocated,$max_limit,$fd_free,$max_fd);
	printf _"{succ}:{str}:{ File Descriptor Number OK | %d file descriptor allocated | %s }",$fd_allocated,$result;
	exit $state_succ;
  }
  close $fh;
} else {
  printf _"{unkn}:{str}:{ File Descriptor Number UNKNOWN | proc file not prepared | %s not prepared }",$procfile;
  exit $state_unkn;  
}
