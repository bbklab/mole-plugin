#!/usr/bin/env bash


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" ] && [ -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="sysload"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale sysload)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] || [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi



show_help(){
cat <<EOF
cat <<EOF
Arguments:   {d|data|h|help}

Usage    :   data

Output   :   {processor_number}  {nower_load}
Example  :   2  0.67
EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unkn | noop | notify }
TYPE=   	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
load_uplimit=$(read_mole_config sysload load_uplimit)

# if null return STATE_UNKN.

# if null or invalid set default.

# check function here
check(){
  if [ -f "/proc/loadavg" ] && [ -f "/proc/cpuinfo" ]; then
	:
  else
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "FILE: [/proc/loadavg] or [/proc/cpuinfo] not prepared.")"
	return
  fi


  local WARN_LIMIT= CRIT_LIMIT=
  if is_multi_threshold "${load_uplimit}"; then
	if check_multi_threshold "${load_uplimit}" 3; then
		local ARRY_LIMIT=( $(seperate_multi_threshold "${load_uplimit}" 2>&- ) )
		WARN_LIMIT=${ARRY_LIMIT[0]}
		CRIT_LIMIT=${ARRY_LIMIT[1]}
		if [ "$(echo "${WARN_LIMIT} >= ${CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
			EXIT_STATUS=${STATE_UNKN};
			LEVEL="unkn";
			TYPE="str";
			CONTENT="$(eval_gettext "load_uplimit [\${load_uplimit}] warn threshold must lower than crit threshold.")"
			return
		fi
	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "load_uplimit [\${load_uplimit}] is invalid multi threshold on int or float check.")"
		return
	fi
  else
  	if is_float "${load_uplimit}" || is_int "${load_uplimit}" ; then
		CRIT_LIMIT=${load_uplimit}		# set single threshold as crit-threshold
  	else
		EXIT_STATUS=${STATE_UNKN};
		LEVEL="unkn";
		TYPE="str";
		CONTENT="$(eval_gettext "load_uplimit [\${load_uplimit}] should be int or float.")"
		return
  	fi
  fi

  # collect data
  local loadave=$(cut -d" " -f1     /proc/loadavg 2>&1)
  local details=$(awk '{printf "1min:%s 5min:%s 15min:%s\n",$1,$2,$3}' /proc/loadavg 2>&-)

  if is_float "${loadave}" || is_int "${loadave}"; then
	:
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "Retuen is not numberic: [\${loadave}]")"
        return
  fi

  # output data and exit if MODE=1
  [ "${MODE}" == "1" ] && {
	echo "${loadave}"
	exit
  }

  # output plugin format data if MODE=0
  if [ -n "${CRIT_LIMIT}" ] && [ "$(echo  "${loadave} >= ${CRIT_LIMIT}" | bc 2>&-)" == "1" ]; then
	local top_pcpu_ps=$(ps -eo pid,comm,pcpu|tail -n +2|sort -rn -k 3|head|sed -e 's/$/###/g' | tr -d '\n')
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "System Load Check CRITICAL") | $(eval_gettext "load [\${loadave} >= \${CRIT_LIMIT}]") | $(html_red "$(eval_gettext "load [\${loadave} >= \${CRIT_LIMIT}]")") ### ### $(gettext "recent load average:") ${details} ### ### $(gettext "cpu usage top10:") ###  ${top_pcpu_ps}"
  elif [ -n "${WARN_LIMIT}" ] && [ "$(echo  "${loadave} >= ${WARN_LIMIT}" | bc 2>&-)" == "1" ]; then
	local top_pcpu_ps=$(ps -eo pid,comm,pcpu|tail -n +2|sort -rn -k 3|head|sed -e 's/$/###/g' | tr -d '\n')
	EXIT_STATUS=${STATE_WARN};
	LEVEL="warn";
	TYPE="str";
	CONTENT="$(gettext "System Load Check WARNING") | $(eval_gettext "load [\${loadave} >= \${WARN_LIMIT}]") | $(html_red "$(eval_gettext "load [\${loadave} >= \${WARN_LIMIT}]")") ### ### $(gettext "recent load average:") ${details} ### ### $(gettext "cpu usage top10:") ###  ${top_pcpu_ps}"
  else
	EXIT_STATUS=${STATE_SUCC};
	LEVEL="succ";
	TYPE="str";
	CONTENT="$(gettext "System Load Check OK") | $(eval_gettext "load [\${loadave} <= \${WARN_LIMIT}]")"
  fi
}

check


# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
