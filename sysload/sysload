#!/usr/bin/env bash


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="sysload"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale sysload)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi



show_help(){
cat <<EOF
cat <<EOF
Arguments:   {d|data|h|help}

Usage    :   data

Output   :   {processor_number}  {nower_load}
Example  :   2  0.67
EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unkn | noop | notify }
TYPE=   	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
load_uplimit=$(read_mole_config sysload load_uplimit)

# if null return STATE_UNKN.

# if null or invalid set default.
load_uplimit_default=10
if [ -z "${load_uplimit}" -o ! -z "${load_uplimit//[0-9.]}" ]; then
	cpunum=$(awk '(/^processor\s*\d*.*$/){x++} END{print x}' /proc/cpuinfo 2>&-)
	if [ -z "${cpunum}" -o ! -z "${cpunum//[0-9]}" ]; then
		load_uplimit=${load_uplimit_default}
	else
		if [ ${cpunum} -le 4 ]; then
			load_uplimit=4
		elif [ ${cpunum} -le 8 ]; then
			load_uplimit=${cpunum}
		elif [ ${cpunum} -le 16 ]; then
			load_uplimit=$( echo "${cpunum} * 0.7" | bc 2>&-)
		else
			load_uplimit=$( echo "${cpunum} * 0.5" | bc 2>&-)
		fi
	fi
fi
[ -z "${load_uplimit}" -o ! -z "${load_uplimit//[0-9.]}" ] && load_uplimit=${load_uplimit_default}

# check function here
check(){
  [ -f "/proc/loadavg" -a -f "/proc/cpuinfo" ] || {
	EXIT_STATUS=${STATE_UNKN};
	LEVEL="unkn";
	TYPE="str";
	CONTENT="$(gettext "FILE: [/proc/loadavg] or [/proc/cpuinfo] not prepared.")"
	return
  }

  # collect data
  local loadave=$( cut -d" " -f1 /proc/loadavg 2>&1 )

  [ -z "${loadave}" -o ! -z "${loadave//[0-9.]}" ] && {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "Retuen is not numberic: [\${loadave}]")"
        return
  }

  # output data and exit if MODE=1
  [ "${MODE}" == "1" ] && {
	echo "${loadave}"
	exit
  }

  # output plugin format data if MODE=0
  if [ "$(echo  "${loadave} >= ${load_uplimit}" | bc 2>&-)" == "1" ]; then
	EXIT_STATUS=${STATE_WARN};
	LEVEL="warn";
	TYPE="str";
	CONTENT="$(gettext "System Load Check CRITICAL") | $(eval_gettext "load [\${loadave} >= \${load_uplimit}]")"
  else
	EXIT_STATUS=${STATE_SUCC};
	LEVEL="succ";
	TYPE="str";
	CONTENT="$(gettext "System Load Check OK") | $(eval_gettext "load [\${loadave} <= \${load_uplimit}]")"
  fi
}

check


# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
