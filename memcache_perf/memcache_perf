#!/usr/bin/env perl

our $basedir = '/usr/local/esop/agent/mole';
our $mole = "$basedir/sbin/mole";

BEGIN {
  my $basedir = '/usr/local/esop/agent/mole';
  my $pllib_dir = "$basedir/opt/plmods";
  my @incs = (    # set additional path
        # rhel5 32bit
        $pllib_dir.'/lib/perl5/',
        $pllib_dir.'/lib/perl5/5.8.8/',
        $pllib_dir.'/lib/perl5/site_perl/',
        $pllib_dir.'/lib/perl5/site_perl/5.8.8/',
        # rhel5 64bit
        $pllib_dir.'/lib64/perl5/',
        $pllib_dir.'/lib64/perl5/5.8.8/',
        $pllib_dir.'/lib64/perl5/site_perl/',
        $pllib_dir.'/lib64/perl5/site_perl/5.8.8/',
        # rhel6 32bit
        $pllib_dir.'/lib/perl5/',
	$pllib_dir.'/share/perl5/',
        # rhel6 64bit
        $pllib_dir.'/lib64/perl5/',
	$pllib_dir.'/share/perl5/',
  );

  push @INC, @incs;
};

use strict;
use warnings;
use utf8;
use IO::Socket;
use IO::Socket::INET;
use Time::HiRes;
use Benchmark ':hireswallclock';
use Locale::Messages qw (textdomain bindtextdomain gettext nl_putenv :locale_h :libintl_h);
use POSIX qw (setlocale LC_ALL);
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';

$| = 1;

# return codes
our ($state_succ,$state_warn,$state_crit,$state_unkn,$state_noop,$state_notify) = (0,1,2,3,4,5);

# return stuff
our ($rc, $result) = (0,'');

our $filename = (split /\//, __FILE__)[-1];

# check mole 
unless (-f $mole && -x $mole) {
  printf "{unkn}:{str}:{$mole not prepared.}";
  exit $state_unkn;
}

# read mole locale_def
our $localdir = "$basedir/share/locale/";
open my $fh, "$mole printdef LOCALE_DIR 2>&- |";
if($fh){
  while(<$fh>){
        chomp; $localdir = $_;
        last;
  }
}

# read plugin locale setting
our $locale = 'zh_CN.UTF-8';
open $fh, "$mole view $filename locale 2>&- |";
if($fh){
  while(<$fh>){
	chomp; $locale = $_;
	last;
  }
  if(!defined $locale || $locale eq ''){
	open my $fh1, "$mole view default locale 2>&- |";
	if($fh1){
		while(<$fh1>){
			chomp; $locale = $_;
			last;
		}
	}
  }
}
if(!defined $locale || $locale eq ''){
	$locale = 'zh_CN.UTF-8';
}elsif($locale eq 'zh_CN' || $locale eq 'zh_CN.UTF-8' || $locale eq 'zh'){
	$locale = 'zh_CN.UTF-8';
}elsif($locale eq 'en_US' || $locale eq 'en_US.UTF-8' || $locale eq 'en'){
	$locale = 'en_US.UTF-8';
}else{
	$locale = 'zh_CN.UTF-8';
}
setlocale(LC_ALL,$locale);
nl_putenv("LANGUAGE=$locale");
nl_putenv("LANG=$locale");

# set textdomain; bindtextdomain
sub _ ($) { &gettext; }
textdomain "$filename";
bindtextdomain "$filename", "$localdir";

# read plugin config here
our $addr_port = '127.0.0.1:11211'; 
open $fh, "$mole view $filename addr_port 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $addr_port = $_;
	last;
  }
}

our $time_out = 10;
open $fh, "$mole view $filename time_out 2>&- |";
if ($fh) {
  while(<$fh>){
  	chomp; $time_out = $_;
	last;
  }
}
$time_out = 10 if ($time_out =~ m/\D/ || !defined $time_out);

# Main body begin
my ($total,$critnum,$unknnum) = (0,0,0);
my ($time_start,$time_stop,$time_duration);

$result = sprintf(_"check list: %s ### ### ",$addr_port);

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {
  $total++;
  my ($mem_host, $mem_port) = (split /:/, shift @addr_pair)[0,1];
  if (!defined $mem_host || !defined $mem_port) {
	$result .= sprintf(_"<font color=yellow> memcache_host or memcache_port not defined </font> ### ### ");
	$unknnum++;
	next;
  }
  if ($mem_port =~ /\D/) {
	$result .= sprintf(_"<font color=yellow> %s:%d memcache port not numberic </font> ### ### ",$mem_host,$mem_port);
	$unknnum++;
	next;
  }

  $time_start = Benchmark->new();
  my $memcache=IO::Socket::INET->new(
	PeerAddr =>	$mem_host,
	PeerPort => 	$mem_port,
	Proto	 =>	'tcp',
	Timeout =>	($time_out =~ /\D/)?10:$time_out,
  );
  unless (defined $memcache) {
	if ($@) {
		$@ =~ s/[\r\n]//g;
		$result .= sprintf(_"<font color=red> connect [%s:%d] failed in %d seconds, return [%s] </font>",$mem_host,$mem_port,$time_out,$@);
	} else {
		$result .= sprintf(_"<font color=red> connect [%s:%d] failed in %d seconds. </font> ",$mem_host,$mem_port,$time_out);
	}
	$critnum++;
	goto ERREND;
  } else {
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= sprintf(_"connect memcache server [%s:%d] succeed. (%f seconds) ### ",$mem_host,$mem_port,$time_duration);
	$time_start = Benchmark->new();		## reset time_start
  }
  print $memcache "stats\r\n";			## if without \r, will hang up for 30s.
  my ($pid,$uptime,$version,$curconn,$curitem,$bytes,$get_hits,$cmd_get) = ('','','','','','','','');
  while (<$memcache>) {
	chomp;
	last if /END/;
	if (m/ERROR/) {
		$critnum++;	
		$result .= sprintf(_" memcache return error: %s ### ",$_);
		last;
	}
	if (m/\ASTAT pid ([\d\.]+)/) {
		$pid = $1;
	}
	if (m/\ASTAT uptime ([\d\.]+)/) {
		$uptime = $1;
	}
	if (m/\ASTAT version ([\d\.]+)/) {
		$version = $1;
	}
	if (m/\ASTAT curr_connections ([\d\.]+)/) {
		$curconn = $1;
	}
	if (m/\ASTAT curr_items ([\d\.]+)/) {
		$curitem = $1;
	}
	if (m/\ASTAT bytes ([\d\.]+)/) {
		$bytes = $1;
	}
	if (m/\ASTAT get_hits ([\d\.]+)/) {
		$get_hits = $1;
	}
	if (m/\ASTAT cmd_get ([\d\.]+)/) {
		$cmd_get = $1;
	}
  }
  $memcache->close() if ($memcache);
  unless ($pid ne '' && $uptime ne '' && $version ne '') {
	$critnum++;
  }
  $time_stop = Benchmark->new();
  $time_duration = timestr(timediff($time_stop,$time_start),'noc');
  $time_duration = (split /\s+/, $time_duration )[0];
  $result .= sprintf(_"get response: (%f seconds) ### ",$time_duration);
  $result .= sprintf(_"Version=%s  PID=%d  Uptime=%d ### ",$version,$pid,$uptime);
  $result .= sprintf(_"Size=%d  Item=%d  Connection=%d ### ",$bytes,$curitem,$curconn);
  if ($cmd_get != 0) {
  	$result .= sprintf(_"Hit=%d  Request=%d  HitRate=",$get_hits,$cmd_get).$get_hits*100/$cmd_get."% ### ###";
  } else {
	$result .= sprintf(_"Hit=%d  Request=%d  HitRate=",$get_hits,$cmd_get)."0% ### ###";
  }
  next;

  ERREND: {
  	$memcache->close() if ($memcache);
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= sprintf(_" (%f seconds) ### ### ",$time_duration);
	next;
  }
}
# prepare last output
if ($critnum > 0) {
  printf _"{crit}:{str}:{ Memcache SVR CRITICAL | %d/%d memcache check critical | %s }",$critnum,$total,$result;
  exit $state_crit;
} elsif ($unknnum > 0) {
  printf _"{unkn}:{str}:{ Memcache SVR UNKNOWN | %d/%d memcache check unknown | %s }",$unknnum,$total,$result;
  exit $state_unkn;
} else {
  printf _"{succ}:{str}:{ Memcache SVR OK | %d/%d memcache check success | %s }",$total,$total,$result;
  exit $state_succ;
}
