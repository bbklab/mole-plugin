#!/usr/bin/env bash



BASE_DIR="/usr/local/eminfo/"
# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unknown}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unknown}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unknown}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="remote_mailtest"
else    
        echo -en "{unknown}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale remote_mailtest)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"           ## read from sysenv
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi


# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=        ### { ok | warn | crit | unknown | noop | notify }
TYPE=         ### { str| file }
CONTENT=      ### { strings | /path/to/result.file }

# Read plugin config value here
sample_email_file=$( read_eminfo_config remote_mailtest sample_email_file )
mail_body_file=$( read_eminfo_config remote_mailtest mail_body_file )
helo_greeting_fqdn=$( read_eminfo_config remote_mailtest helo_greeting_fqdn )

# if null or invalid set default.
[ -z "${helo_greeting_fqdn}" ] && helo_greeting_fqdn="eyou.net."

# if null return STATE_UNKNOWN


# check function here.
check() {
  local total=0  errnum=0  result=  base_domain=  ### {object number} {faile number} {return information}

  [ -f "/usr/bin/host" -a -x "/usr/bin/host" ] || {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="$(gettext "Util: [/usr/bin/host] not prepared.")";
        return
  }

  if [ -z "${sample_email_file}" ]; then
	EXIT_STATUS=${STATE_UNKNOWN}
        LEVEL="unknown"
        TYPE="str"
        CONTENT="$(gettext "sample_email_file not set.")"
	return
  fi

  if [ -f "/${sample_email_file##*file:}" -a -s "/${sample_email_file##*file:}" ]; then
	sample_email_file="/${sample_email_file##*file:}"
  elif [ -f "${BASE_DIR}/${sample_email_file##*file:}" -a -s "${BASE_DIR}/${sample_email_file##*file:}" ]; then
	sample_email_file="${BASE_DIR}/${sample_email_file##*file:}"
  else
	EXIT_STATUS=${STATE_UNKNOWN}
	LEVEL="unknown"
	TYPE="str"
	CONTENT="$(eval_gettext "sample_email_file [\${sample_email_file}] not exist or empty")"
	return
  fi

  if [ -z "${mail_body_file}" ]; then
        EXIT_STATUS=${STATE_UNKNOWN}
        LEVEL="unknown"
        TYPE="str"
        CONTENT="$(gettext "mail_body_file not set.")"
	return
  fi

  if [ -f "/${mail_body_file##*file:}" -a -s "/${mail_body_file##*file:}" ]; then
	mail_body_file="/${mail_body_file##*file:}"
  elif [ -f "${BASE_DIR}/${mail_body_file##*file:}" -a -s "${BASE_DIR}/${mail_body_file##*file:}" ]; then
	mail_body_file="${BASE_DIR}/${mail_body_file##*file:}"
  else
	EXIT_STATUS=${STATE_UNKNOWN}
	LEVEL="unknown"
	TYPE="str"
	CONTENT="$(eval_gettext "mail_body_file [\${mail_body_file}] not exist or empty")"
	return
  fi

  local v4_config="/var/eyou/etc/eyou_smtpd_config"
  local v5_config="/usr/local/eyou/mail/etc/eyou_mail.ini"
  local gw_config="/var/emdg/etc/domain.conf"
  if [ -f "${v5_config}" -a -s "${v5_config}" ]; then
	base_domain=$(awk -F"=" '($1~/server_me\>/) {$1="";print;exit;}' "${v5_config}" 2>&- | tr -d '[" \t\n]' | sed -e 's/\x00//g;s/\x0D//g' )
  elif [ -f "${v4_config}" -a -s "${v4_config}" ]; then
	base_domain=$(awk '($1~/o_value\>/) {$1="";print;exit;}' "${v4_config}" 2>&- | tr -d '[" \t\n]' | sed -e 's/\x00//g;s/\x0D//g' )
  elif [ "${gw_config}" -a -s "${gw_config}" ]; then
	base_domain=$(awk '{print $1;exit}' "${gw_config}" 2>&- | tr -d '[ \t]' | sed -e 's/\x00//g;s/\x0D//g')
  fi
  [ -z "${base_domain//[ ]}" ] && base_domain="demo.eyou.net"

  local content=$( awk -F":::" '($0!~/^[ \t]*$/ && $0!~/^[ \t]*#/)' "${sample_email_file}" 2>&- )
  local remote_domain=$( echo -e "${content}" | awk -F":::" '{print $1}' )
  for x in `echo "${remote_domain}"`
  do
	local str1=  str2= date=$(date +%F_%T 2>&-)
	local subject="$(eval_gettext "Remote Test Mail from [\${base_domain}] at \${date}")"
	### first set mx-host if specified.
	local mx_host=$( echo -e "${content}" | awk -F ":::" '($1~/'${x}'\>/) {print $2;exit;}' | tr -d '[ \t]' )
	if [ -z "${mx_host}" ]; then
		### search best mx-host for domain: ${x/#@/} if not specified.
		local mx_host=$( /usr/bin/host -t mx ${x/#@/} 2>&- | awk '($(NF-1)~/[0-9]+/ && $0~/'${x/#@/}'/) {print $(NF-1),$NF}' | sort -n | awk '{print $NF;exit}' )
	fi
	if [ -z "${mx_host}" ]; then
		target_domain="${x/#@/}"
		result=" ${str} $( html_red "$(eval_gettext "Sorrsy: can NOT get mx for domain: [\${target_domain}]. SKIP")" ) ### ### "
		((total++))
		((errnum++))
		continue
	fi

	xlist=$( echo -e "${content}" | awk -F ":::" '($1~/'${x}'\>/) {$1=$2="";print;exit;}' )
	for y in `echo "${xlist}"`
	do
		str1=$( ${SENDEMAIL} -f "eminfo@${base_domain}" -t "${y}" -s "${mx_host}" -u "${subject}" -o message-file="${mail_body_file}"  -o fqdn="${helo_greeting_fqdn}" -o message-charset=utf8 2>&1 )
		rc=$?
  		str2=$( echo -e "${str1}" | awk -F "sendEmail" '{$1="";print}' | awk -F: '{for(x=2;x<=NF;x++) {printf $x}}')
		if [ "${rc}" == "0" ]; then
			result=" $result $(eval_gettext "remote mail to [\${y}] return [\${str2}]") ### "
			result=" $result $(eval_gettext "talked with mx-host: [\${mx_host}]") ### "
			result=" $result $(eval_gettext "subject: [\${subject}]") ### ### "
		else
			result=" $result $(html_red "$(eval_gettext "remote mail to [\${y}] return [\${str1}]")") ### "
			result=" $result $(eval_gettext "talked with mx-host: [\${mx_host}]") ### "
			result=" $result $(eval_gettext "subject: [\${subject}]") ### ###"
			((errnum++))
		fi
		((total++))
	done
  done

  if [ "${errnum}" == "0" ]; then
        EXIT_STATUS=${STATE_OK};
        LEVEL="ok";
        TYPE="str";
        CONTENT="$(gettext "Remote Mail Test OK") | $(eval_gettext "\${total}/\${total} remote mail test succeed") | "${result}" "
  else
        EXIT_STATUS=${STATE_CRITICAL};
        LEVEL="crit";
        TYPE="str";
        CONTENT="$(gettext "Remote Mail Test CRITICAL") | $(eval_gettext "\${errnum}/\${total} remote mail test failed") | "${result}" "
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
