#!/usr/bin/env bash


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" ] && [ -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="remote_mailtest"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale remote_mailtest)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] || [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi


# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=        ### { succ | warn | crit | unkn | noop | notify }
TYPE=         ### { str| file }
CONTENT=      ### { strings | /path/to/result.file }

# Read plugin config value here
sample_email_file=$( read_mole_config remote_mailtest sample_email_file )
mail_body_file=$( read_mole_config remote_mailtest mail_body_file )
base_domain=$( read_mole_config remote_mailtest base_domain )
helo_greeting_fqdn=$( read_mole_config remote_mailtest helo_greeting_fqdn )

# if null or invalid set default.
[ -z "${base_domain}" ] && base_domain="demo.eyou.net"
[ -z "${helo_greeting_fqdn}" ] && helo_greeting_fqdn="localhost.localdomain"

# if null return STATE_UNKN

# gen_text function here
gen_text() {
	local base_domain=$1
	local date=$(date +%F_%T 2>&-)
	local min=1 max=120				# random range
	local line_maxlen=60				# line max length
	local line_num=$( random_num 3 10 2>&- )	# line max number
	local linen=0
	local x=1
	local line=
	local result=
	while (( ${linen} < ${line_num} ))
	do
		x=$( random_num ${min} ${max} 2>&- )
		line="${line}$(gettext "rand${x}" 2>&-)"
		if [ ${#line} -gt ${line_maxlen} ] ; then
			result="${result}\n\n${line}"
			line=
			((linen++))
		fi
	done
	local sig="-- $(eval_gettext "\${date} From [\${base_domain}]")"
	local hid="-- $(get_mole_id)"
	local hname="-- $(get_global_name)"
	result="${result}\n\n\n${sig}\n${hname}\n${hid}"
	echo -en "${result}\n"
}

# gen_subject function here
gen_subject() {
	local min=1 max=120				# random range
	local result="$(gettext "rand$( random_num ${min} ${max} )" 2>&-) $(gettext "rand$( random_num ${min} ${max} )" 2>&-)"
	echo -en "${result}"
}

# check function here.
check() {
  local total=0  errnum=0  result=   ### {object number} {faile number} {return information}

  if [ -f "/usr/bin/host" ] && [ -x "/usr/bin/host" ]; then
	:
  else
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "Util: [/usr/bin/host] not prepared.")";
        return
  fi

  if [ -z "${sample_email_file}" ]; then
	EXIT_STATUS=${STATE_UNKN}
        LEVEL="unkn"
        TYPE="str"
        CONTENT="$(gettext "sample_email_file not set.")"
	return
  fi

  if [ -f "/${sample_email_file##*file:}" ] && [ -s "/${sample_email_file##*file:}" ]; then
	sample_email_file="/${sample_email_file##*file:}"
  elif [ -f "${BASE_DIR}/${sample_email_file##*file:}" ] && [ -s "${BASE_DIR}/${sample_email_file##*file:}" ]; then
	sample_email_file="${BASE_DIR}/${sample_email_file##*file:}"
  else
	EXIT_STATUS=${STATE_UNKN}
	LEVEL="unkn"
	TYPE="str"
	CONTENT="$(eval_gettext "sample_email_file [\${sample_email_file}] not exist or empty")"
	return
  fi

  if [ -z "${mail_body_file}" ]; then
        EXIT_STATUS=${STATE_UNKN}
        LEVEL="unkn"
        TYPE="str"
        CONTENT="$(gettext "mail_body_file not set.")"
	return
  fi

  if [ -f "/${mail_body_file##*file:}" ] && [ -s "/${mail_body_file##*file:}" ]; then
	mail_body_file="/${mail_body_file##*file:}"
  elif [ -f "${BASE_DIR}/${mail_body_file##*file:}" ] && [ -s "${BASE_DIR}/${mail_body_file##*file:}" ]; then
	mail_body_file="${BASE_DIR}/${mail_body_file##*file:}"
  else
	EXIT_STATUS=${STATE_UNKN}
	LEVEL="unkn"
	TYPE="str"
	CONTENT="$(eval_gettext "mail_body_file [\${mail_body_file}] not exist or empty")"
	return
  fi
	
  # prepare fixed mail header
  local addrfrom="mole@${base_domain}"
  local mailfrom="From: =?UTF-8?B?5pm66IO96L+Q57u05bmz5Y+w5bel56iL5biI?= <${addrfrom}>"
  local mailer="X-Mailer: Foxmail 7, 2, 5, 140[cn]"
  local priority="X-Priority: 3"

  # prepare random subject
  local subject="$(gen_subject)"
  subject="$(${PLUTIL} base64_encode "${subject}" 2>&-)"
  subject="Subject: =?UTF-8?B?${subject}?="

  # prepare random content into {mail_body_file}
  local _tmp_mail_body_file="/var/tmp/.${mail_body_file##*/}"
  { 
	/bin/cat "${mail_body_file}"
	gen_text "${base_domain}"
  } > "${_tmp_mail_body_file}" 2>/dev/null

  local content=$( awk -F":::" '($0!~/^[ \t]*$/ && $0!~/^[ \t]*#/)' "${sample_email_file}" 2>&- )
  local remote_domain=$( echo -e "${content}" | awk -F":::" '{print $1}' )
  for x in `echo "${remote_domain}"`
  do
	local str1=
	
	### first set mx-host if specified.
	local mx_host=$( (echo -e "${content}" | awk -F ":::" '($1~/'${x}'\>/) {print $2;exit;}' | tr -d '[ \t]') 2>&- )
	if [ -z "${mx_host}" ]; then
		### search best mx-host for domain: ${x/#@/} if not specified.
		local mx_host=$( (/usr/bin/host -t mx ${x/#@/} 2>&- | awk '($(NF-1)~/[0-9]+/ && $0~/'${x/#@/}'/) {print $(NF-1),$NF}' | sort -n | awk '{print $NF;exit}') 2>&- )
	fi
	if [ -z "${mx_host}" ]; then
		target_domain="${x/#@/}"
		result=" ${str} $( html_red "$(eval_gettext "Sorrsy: can NOT get mx for domain: [\${target_domain}]. SKIP")" ) ### ### "
		((total++))
		((errnum++))
		continue
	fi

	#xlist=$( echo -e "${content}" | awk -F ":::" '($1~/'${x}'\>/) {$1=$2="";print;exit;}' )
	xlist=$( echo -e "${content}" | awk -F ":::" '($1~/'${x}'\>/) {$1=$2="";print;}' )
	for y in `echo "${xlist}"`
	do
		str1=$( ${SENDEMAIL} -f "${addrfrom}" -t "${y}" -s "${mx_host}" \
				-o tls=no \
				-o message-header="${mailfrom}" \
				-o message-header="${subject}" \
				-o message-header="${mailer}" \
				-o message-header="${priority}" \
				-o message-file="${_tmp_mail_body_file}"  \
				-o message-charset=utf8 \
				-o fqdn="${helo_greeting_fqdn}" 2>&1 )
		rc=$?
		if [ "${rc}" == "0" ]; then
			result=" $result $(eval_gettext "remote mail to [\${y}] succeed!") ### "
			result=" $result $(eval_gettext "talked with mx-host: [\${mx_host}]") ### ### "
		else
			result=" $result $(html_red "$(eval_gettext "remote mail to [\${y}] return [\${str1}]")") ### "
			result=" $result $(eval_gettext "talked with mx-host: [\${mx_host}]") ### ### "
			((errnum++))
		fi
		((total++))
	done
  done

  if [ "${errnum}" == "0" ]; then
        EXIT_STATUS=${STATE_SUCC};
        LEVEL="succ";
        TYPE="str";
        CONTENT="$(gettext "Remote Mail Test OK") | $(eval_gettext "\${total}/\${total} remote mail test succeed") | "${result}" "
  else
        EXIT_STATUS=${STATE_CRIT};
        LEVEL="crit";
        TYPE="str";
        CONTENT="$(gettext "Remote Mail Test CRITICAL") | $(eval_gettext "\${errnum}/\${total} remote mail test failed") | "${result}" "
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
